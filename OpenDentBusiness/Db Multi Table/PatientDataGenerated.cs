//This file is generated automatically by a button in the CrudGenerator
//Do not edit this file manually.
//Jordan is involved in the code generation because he's the only one allowed to edit PatientData.
//Last generated on 4/23/2022 8:36 PM
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Xml.Serialization;

namespace OpenDentBusiness {
	public partial class PatientData {
		#region Fields - Public
		///<summary>Guarantor is first.</summary>
		public List<Patient> ListPatients;
		public List<InsSub> ListInsSubs;
		public List<InsPlan> ListInsPlans;
		public List<PatPlan> ListPatPlans;
		public List<Benefit> ListBenefits;
		public List<ClaimProc> ListClaimProcs;
		public List<Adjustment> ListAdjustments;
		public List<Allergy> ListAllergies;
		public List<Appointment> ListAppointments;
		public List<ClaimProcHist> ListClaimProcHists;
		public List<Disease> ListDiseases;
		public List<Document> ListDocuments;
		public List<EhrMeasureEvent> ListEhrMeasureEvents;
		public List<MedicationPat> ListMedicationPats;
		public List<Mount> ListMounts;
		public List<OrthoChartRow> ListOrthoChartRows;
		public List<OrthoChart> ListOrthoCharts;
		public List<OrthoHardware> ListOrthoHardwares;
		public List<PatField> ListPatFields;
		public PatientNote PatientNote;
		public Patient PatientSuperFamHead;
		public List<PatRestriction> ListPatRestrictions;
		public List<PayorType> ListPayorTypes;
		public List<PaySplit> ListPaySplits;
		public List<Procedure> ListProcedures;
		public List<ProcGroupItem> ListProcGroupItems;
		public List<ProcMultiVisit> ListProcMultiVisits;
		public List<RefAttach> ListRefAttaches;
		[XmlIgnore]
		public DataTable TableProgNotes;
		[XmlIgnore]
		public DataTable TablePlannedAppts;
		public List<ToothInitial> ListToothInitials;
		public bool UserWebHasPortalAccess;
		#endregion Fields - Public

		#region Properties
		[XmlElement(nameof(TableProgNotes))]
		public string TableProgNotesXml {
			get {
				if(TableProgNotes==null) {
					return null;
				}
				return XmlConverter.TableToXml(TableProgNotes);
			}
			set {
				if(value==null) {
					TableProgNotesXml=null;
					return;
				}
				TableProgNotes=XmlConverter.XmlToTable(value);
			}
		}

		[XmlElement(nameof(TablePlannedAppts))]
		public string TablePlannedApptsXml {
			get {
				if(TablePlannedAppts==null) {
					return null;
				}
				return XmlConverter.TableToXml(TablePlannedAppts);
			}
			set {
				if(value==null) {
					TablePlannedApptsXml=null;
					return;
				}
				TablePlannedAppts=XmlConverter.XmlToTable(value);
			}
		}
		#endregion Properties

		#region Methods - Public
		///<summary>Instead of ClearAll, you can clear specific lists to mark them as stale. It's usually easier to use ClearAll.</summary>
		public void Clear(params EnumPdTable[] pdTableArray){
			//No need to check MiddleTierRole; no call to db.
			if(pdTableArray.Contains(EnumPdTable.Patient)){
				ListPatients=null;
			}
			if(pdTableArray.Contains(EnumPdTable.InsSub)){
				ListInsSubs=null;
			}
			if(pdTableArray.Contains(EnumPdTable.InsPlan)){
				ListInsPlans=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PatPlan)){
				ListPatPlans=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Benefit)){
				ListBenefits=null;
			}
			if(pdTableArray.Contains(EnumPdTable.ClaimProc)){
				ListClaimProcs=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Adjustment)){
				ListAdjustments=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Allergy)){
				ListAllergies=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Appointment)){
				ListAppointments=null;
			}
			if(pdTableArray.Contains(EnumPdTable.ClaimProcHist)){
				ListClaimProcHists=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Disease)){
				ListDiseases=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Document)){
				ListDocuments=null;
			}
			if(pdTableArray.Contains(EnumPdTable.EhrMeasureEvent)){
				ListEhrMeasureEvents=null;
			}
			if(pdTableArray.Contains(EnumPdTable.MedicationPat)){
				ListMedicationPats=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Mount)){
				ListMounts=null;
			}
			if(pdTableArray.Contains(EnumPdTable.OrthoChart)){
				ListOrthoChartRows=null;
				ListOrthoCharts=null;
			}
			if(pdTableArray.Contains(EnumPdTable.OrthoHardware)){
				ListOrthoHardwares=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PatField)){
				ListPatFields=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PatientNote)){
				PatientNote=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PatientSuperFamHead)){
				PatientSuperFamHead=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PatRestriction)){
				ListPatRestrictions=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PayorType)){
				ListPayorTypes=null;
			}
			if(pdTableArray.Contains(EnumPdTable.PaySplit)){
				ListPaySplits=null;
			}
			if(pdTableArray.Contains(EnumPdTable.Procedure)){
				ListProcedures=null;
			}
			if(pdTableArray.Contains(EnumPdTable.ProcGroupItem)){
				ListProcGroupItems=null;
			}
			if(pdTableArray.Contains(EnumPdTable.ProcMultiVisit)){
				ListProcMultiVisits=null;
			}
			if(pdTableArray.Contains(EnumPdTable.RefAttach)){
				ListRefAttaches=null;
			}
			if(pdTableArray.Contains(EnumPdTable.TableProgNotes)){
				TableProgNotes=null;
			}
			if(pdTableArray.Contains(EnumPdTable.TablePlannedAppts)){
				TablePlannedAppts=null;
			}
			if(pdTableArray.Contains(EnumPdTable.ToothInitial)){
				ListToothInitials=null;
			}
		}

		///<summary>This is how you notify PatientData exactly what data you will need. If the specified Lists already have data, it will do nothing. If any are null, it will refresh those from db. After this, all the lists that you specified will be guaranteed to not be null.</summary>
		public void FillIfNeeded(params EnumPdTable[] pdTableArray){
			//No need to check MiddleTierRole; no call to db.
			if(PatNum==0){
				//this is fairly unlikely to happen. It would be more common to forget to change the PatNum, so it would still be using an old one.
				throw new ApplicationException("Set PatNum first.");
			}
			List<EnumPdTable> listPdTablesFiltered=FilterPdTables(pdTableArray);
			PatientData patientData=GetFromDb(PatNum,listPdTablesFiltered);
			CopyDataToOurPd(patientData,listPdTablesFiltered);
		}

		///<summary>This is a version of FillIfNeeded that's specific to Chart module when getting Progress Notes table.</summary>
		public void FillIfNeededChart(bool isAuditMode,ChartModuleFilters chartModuleFilters,params EnumPdTable[] pdTableArray){
			//No need to check MiddleTierRole; no call to db.
			if(PatNum==0){
				//this is fairly unlikely to happen. It would be more common to forget to change the PatNum, so it would still be using an old one.
				throw new ApplicationException("Set PatNum first.");
			}
			List<EnumPdTable> listPdTablesFiltered=FilterPdTables(pdTableArray);
			PatientData patientData=GetFromDbChartProgNotes(PatNum,listPdTablesFiltered,isAuditMode,chartModuleFilters);
			CopyDataToOurPd(patientData,listPdTablesFiltered);
		}
		#endregion Methods - Public

		#region Methods - Public Static
		///<summary>The PatientData that comes back here is a totally different one than the main PatientData. It will only have a few lists in it, and those lists will get copied over to the main PatientData. This just gets simpler data that doesn't need additional parameters.</summary>
		public static PatientData GetFromDb(long patNum,List<EnumPdTable> listPdTables){
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				return Meth.GetObject<PatientData>(MethodBase.GetCurrentMethod(),patNum,listPdTables);
			}
			PatientData patientData=new PatientData();
			GetFromDbSimple(patNum,listPdTables,patientData);
			return patientData;
		}	

		///<summary>This is separate from GetFromDb because it requires additional parameters. It can also get any simple data that doesn't need complex parameters.</summary>
		public static PatientData GetFromDbChartProgNotes(long patNum,List<EnumPdTable> listPdTables,bool isAuditMode,ChartModuleFilters chartModuleFilters){
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				return Meth.GetObject<PatientData>(MethodBase.GetCurrentMethod(),patNum,listPdTables,isAuditMode,chartModuleFilters);
			}
			PatientData patientData=new PatientData();
			patientData.TableProgNotes=ChartModules.GetProgNotes(patNum,isAuditMode,chartModuleFilters);//this must come before ChartModules.GetPlannedApt
			GetFromDbSimple(patNum,listPdTables,patientData);
			return patientData;
		}	
		#endregion Methods - Public Static

		#region Methods - Private Static
///<summary>This gets all the simple lists that don't need additional parameters.</summary>
		public static void GetFromDbSimple(long patNum,List<EnumPdTable> listPdTables,PatientData patientData){
			if(listPdTables.Contains(EnumPdTable.Patient)){
				patientData.ListPatients=Patients.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.InsSub)){
				patientData.ListInsSubs=InsSubs.GetPatientData(patientData.ListPatients);
			}
			if(listPdTables.Contains(EnumPdTable.InsPlan)){
				patientData.ListInsPlans=InsPlans.GetPatientData(patientData.ListInsSubs);
			}
			if(listPdTables.Contains(EnumPdTable.PatPlan)){
				patientData.ListPatPlans=PatPlans.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Benefit)){
				patientData.ListBenefits=Benefits.GetPatientData(patientData.ListPatPlans,patientData.ListInsSubs);
			}
			if(listPdTables.Contains(EnumPdTable.ClaimProc)){
				patientData.ListClaimProcs=ClaimProcs.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Adjustment)){
				patientData.ListAdjustments=Adjustments.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Allergy)){
				patientData.ListAllergies=Allergies.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Appointment)){
				patientData.ListAppointments=Appointments.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.ClaimProcHist)){
				patientData.ListClaimProcHists=ClaimProcs.GetPatientData(patNum,patientData.ListBenefits,patientData.ListPatPlans,patientData.ListInsPlans,patientData.ListInsSubs);
			}
			if(listPdTables.Contains(EnumPdTable.Disease)){
				patientData.ListDiseases=Diseases.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Document)){
				patientData.ListDocuments=Documents.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.EhrMeasureEvent)){
				patientData.ListEhrMeasureEvents=EhrMeasureEvents.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.MedicationPat)){
				patientData.ListMedicationPats=MedicationPats.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Mount)){
				patientData.ListMounts=Mounts.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.OrthoChart)){
				patientData.ListOrthoChartRows=OrthoChartRows.GetPatientData(patNum);
				patientData.ListOrthoCharts=OrthoCharts.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.OrthoHardware)){
				patientData.ListOrthoHardwares=OrthoHardwares.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.PatField)){
				patientData.ListPatFields=PatFields.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.PatientNote)){
				patientData.PatientNote=PatientNotes.GetPatientData(patNum,patientData.ListPatients[0].Guarantor);
			}
			if(listPdTables.Contains(EnumPdTable.PatientSuperFamHead)){
				if(patientData.ListPatients[0].SuperFamily!=0){
					patientData.PatientSuperFamHead=Patients.GetPat(patientData.ListPatients[0].SuperFamily);
				}
			}
			if(listPdTables.Contains(EnumPdTable.PatRestriction)){
				patientData.ListPatRestrictions=PatRestrictions.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.PayorType)){
				patientData.ListPayorTypes=PayorTypes.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.PaySplit)){
				patientData.ListPaySplits=PaySplits.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.Procedure)){
				patientData.ListProcedures=Procedures.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.ProcGroupItem)){
				patientData.ListProcGroupItems=ProcGroupItems.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.ProcMultiVisit)){
				patientData.ListProcMultiVisits=ProcMultiVisits.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.RefAttach)){
				patientData.ListRefAttaches=RefAttaches.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.TablePlannedAppts)){
				patientData.TablePlannedAppts=ChartModules.GetPlannedApt(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.ToothInitial)){
				patientData.ListToothInitials=ToothInitials.GetPatientData(patNum);
			}
			if(listPdTables.Contains(EnumPdTable.UserWebHasPortalAccess)){
				patientData.UserWebHasPortalAccess=UserWebs.HasPatientPortalAccess(patNum);
			}
		}
		#endregion Methods - Private Static

		#region Methods - Private
		///<summary></summary>
		private List<EnumPdTable> FilterPdTables(EnumPdTable[] pdTableArray){
			List<EnumPdTable> listPdTables=new List<EnumPdTable>();
			if(pdTableArray.Contains(EnumPdTable.Patient) && ListPatients is null){
				listPdTables.Add(EnumPdTable.Patient);
			}
			if(pdTableArray.Contains(EnumPdTable.InsSub) && ListInsSubs is null){
				listPdTables.Add(EnumPdTable.InsSub);
			}
			if(pdTableArray.Contains(EnumPdTable.InsPlan) && ListInsPlans is null){
				listPdTables.Add(EnumPdTable.InsPlan);
			}
			if(pdTableArray.Contains(EnumPdTable.PatPlan) && ListPatPlans is null){
				listPdTables.Add(EnumPdTable.PatPlan);
			}
			if(pdTableArray.Contains(EnumPdTable.Benefit) && ListBenefits is null){
				listPdTables.Add(EnumPdTable.Benefit);
			}
			if(pdTableArray.Contains(EnumPdTable.ClaimProc) && ListClaimProcs is null){
				listPdTables.Add(EnumPdTable.ClaimProc);
			}
			if(pdTableArray.Contains(EnumPdTable.Adjustment) && ListAdjustments is null){
				listPdTables.Add(EnumPdTable.Adjustment);
			}
			if(pdTableArray.Contains(EnumPdTable.Allergy) && ListAllergies is null){
				listPdTables.Add(EnumPdTable.Allergy);
			}
			if(pdTableArray.Contains(EnumPdTable.Appointment) && ListAppointments is null){
				listPdTables.Add(EnumPdTable.Appointment);
			}
			if(pdTableArray.Contains(EnumPdTable.ClaimProcHist) && ListClaimProcHists is null){
				listPdTables.Add(EnumPdTable.ClaimProcHist);
			}
			if(pdTableArray.Contains(EnumPdTable.Disease) && ListDiseases is null){
				listPdTables.Add(EnumPdTable.Disease);
			}
			if(pdTableArray.Contains(EnumPdTable.Document) && ListDocuments is null){
				listPdTables.Add(EnumPdTable.Document);
			}
			if(pdTableArray.Contains(EnumPdTable.EhrMeasureEvent) && ListEhrMeasureEvents is null){
				listPdTables.Add(EnumPdTable.EhrMeasureEvent);
			}
			if(pdTableArray.Contains(EnumPdTable.MedicationPat) && ListMedicationPats is null){
				listPdTables.Add(EnumPdTable.MedicationPat);
			}
			if(pdTableArray.Contains(EnumPdTable.Mount) && ListMounts is null){
				listPdTables.Add(EnumPdTable.Mount);
			}
			if(pdTableArray.Contains(EnumPdTable.OrthoChart) && ListOrthoCharts is null){
				listPdTables.Add(EnumPdTable.OrthoChart);
			}
			if(pdTableArray.Contains(EnumPdTable.OrthoHardware) && ListOrthoHardwares is null){
				listPdTables.Add(EnumPdTable.OrthoHardware);
			}
			if(pdTableArray.Contains(EnumPdTable.PatField) && ListPatFields is null){
				listPdTables.Add(EnumPdTable.PatField);
			}
			if(pdTableArray.Contains(EnumPdTable.PatientNote) && PatientNote is null){
				listPdTables.Add(EnumPdTable.PatientNote);
			}
			if(pdTableArray.Contains(EnumPdTable.PatientSuperFamHead) && PatientSuperFamHead is null){
				listPdTables.Add(EnumPdTable.PatientSuperFamHead);
			}
			if(pdTableArray.Contains(EnumPdTable.PatRestriction) && ListPatRestrictions is null){
				listPdTables.Add(EnumPdTable.PatRestriction);
			}
			if(pdTableArray.Contains(EnumPdTable.PayorType) && ListPayorTypes is null){
				listPdTables.Add(EnumPdTable.PayorType);
			}
			if(pdTableArray.Contains(EnumPdTable.PaySplit) && ListPaySplits is null){
				listPdTables.Add(EnumPdTable.PaySplit);
			}
			if(pdTableArray.Contains(EnumPdTable.Procedure) && ListProcedures is null){
				listPdTables.Add(EnumPdTable.Procedure);
			}
			if(pdTableArray.Contains(EnumPdTable.ProcGroupItem) && ListProcGroupItems is null){
				listPdTables.Add(EnumPdTable.ProcGroupItem);
			}
			if(pdTableArray.Contains(EnumPdTable.ProcMultiVisit) && ListProcMultiVisits is null){
				listPdTables.Add(EnumPdTable.ProcMultiVisit);
			}
			if(pdTableArray.Contains(EnumPdTable.RefAttach) && ListRefAttaches is null){
				listPdTables.Add(EnumPdTable.RefAttach);
			}
			if(pdTableArray.Contains(EnumPdTable.TableProgNotes) && TableProgNotes is null){
				listPdTables.Add(EnumPdTable.TableProgNotes);
			}
			if(pdTableArray.Contains(EnumPdTable.TablePlannedAppts) && TablePlannedAppts is null){
				listPdTables.Add(EnumPdTable.TablePlannedAppts);
			}
			if(pdTableArray.Contains(EnumPdTable.ToothInitial) && ListToothInitials is null){
				listPdTables.Add(EnumPdTable.ToothInitial);
			}
			if(pdTableArray.Contains(EnumPdTable.UserWebHasPortalAccess)){
				listPdTables.Add(EnumPdTable.UserWebHasPortalAccess);
			}
			return listPdTables;
		}

		///<summary></summary>
		private void CopyDataToOurPd(PatientData patientData,List<EnumPdTable> listPdTables){
			if(listPdTables.Contains(EnumPdTable.Patient)){
				ListPatients=new List<Patient>(patientData.ListPatients);
				Patient=ListPatients.Find(x=>x.PatNum==PatNum);
				Family=new Family(ListPatients);
			}
			if(listPdTables.Contains(EnumPdTable.InsSub)){
				ListInsSubs=new List<InsSub>(patientData.ListInsSubs);
			}
			if(listPdTables.Contains(EnumPdTable.InsPlan)){
				ListInsPlans=new List<InsPlan>(patientData.ListInsPlans);
			}
			if(listPdTables.Contains(EnumPdTable.PatPlan)){
				ListPatPlans=new List<PatPlan>(patientData.ListPatPlans);
			}
			if(listPdTables.Contains(EnumPdTable.Benefit)){
				ListBenefits=new List<Benefit>(patientData.ListBenefits);
			}
			if(listPdTables.Contains(EnumPdTable.ClaimProc)){
				ListClaimProcs=new List<ClaimProc>(patientData.ListClaimProcs);
			}
			if(listPdTables.Contains(EnumPdTable.Adjustment)){
				ListAdjustments=new List<Adjustment>(patientData.ListAdjustments);
			}
			if(listPdTables.Contains(EnumPdTable.Allergy)){
				ListAllergies=new List<Allergy>(patientData.ListAllergies);
			}
			if(listPdTables.Contains(EnumPdTable.Appointment)){
				ListAppointments=new List<Appointment>(patientData.ListAppointments);
			}
			if(listPdTables.Contains(EnumPdTable.ClaimProcHist)){
				ListClaimProcHists=new List<ClaimProcHist>(patientData.ListClaimProcHists);
			}
			if(listPdTables.Contains(EnumPdTable.Disease)){
				ListDiseases=new List<Disease>(patientData.ListDiseases);
			}
			if(listPdTables.Contains(EnumPdTable.Document)){
				ListDocuments=new List<Document>(patientData.ListDocuments);
			}
			if(listPdTables.Contains(EnumPdTable.EhrMeasureEvent)){
				ListEhrMeasureEvents=new List<EhrMeasureEvent>(patientData.ListEhrMeasureEvents);
			}
			if(listPdTables.Contains(EnumPdTable.MedicationPat)){
				ListMedicationPats=new List<MedicationPat>(patientData.ListMedicationPats);
			}
			if(listPdTables.Contains(EnumPdTable.Mount)){
				ListMounts=new List<Mount>(patientData.ListMounts);
			}
			if(listPdTables.Contains(EnumPdTable.OrthoChart)){
				ListOrthoChartRows=new List<OrthoChartRow>(patientData.ListOrthoChartRows);
				ListOrthoCharts=new List<OrthoChart>(patientData.ListOrthoCharts);
			}
			if(listPdTables.Contains(EnumPdTable.OrthoHardware)){
				ListOrthoHardwares=new List<OrthoHardware>(patientData.ListOrthoHardwares);
			}
			if(listPdTables.Contains(EnumPdTable.PatField)){
				ListPatFields=new List<PatField>(patientData.ListPatFields);
			}
			if(listPdTables.Contains(EnumPdTable.PatientNote)){
				PatientNote=patientData.PatientNote;
			}
			if(listPdTables.Contains(EnumPdTable.PatientSuperFamHead)){
				PatientSuperFamHead=patientData.PatientSuperFamHead;
			}
			if(listPdTables.Contains(EnumPdTable.PatRestriction)){
				ListPatRestrictions=new List<PatRestriction>(patientData.ListPatRestrictions);
			}
			if(listPdTables.Contains(EnumPdTable.PayorType)){
				ListPayorTypes=new List<PayorType>(patientData.ListPayorTypes);
			}
			if(listPdTables.Contains(EnumPdTable.PaySplit)){
				ListPaySplits=new List<PaySplit>(patientData.ListPaySplits);
			}
			if(listPdTables.Contains(EnumPdTable.Procedure)){
				ListProcedures=new List<Procedure>(patientData.ListProcedures);
			}
			if(listPdTables.Contains(EnumPdTable.ProcGroupItem)){
				ListProcGroupItems=new List<ProcGroupItem>(patientData.ListProcGroupItems);
			}
			if(listPdTables.Contains(EnumPdTable.ProcMultiVisit)){
				ListProcMultiVisits=new List<ProcMultiVisit>(patientData.ListProcMultiVisits);
			}
			if(listPdTables.Contains(EnumPdTable.RefAttach)){
				ListRefAttaches=new List<RefAttach>(patientData.ListRefAttaches);
			}
			if(listPdTables.Contains(EnumPdTable.TableProgNotes)){
				TableProgNotes=patientData.TableProgNotes;
			}
			if(listPdTables.Contains(EnumPdTable.TablePlannedAppts)){
				TablePlannedAppts=patientData.TablePlannedAppts;
			}
			if(listPdTables.Contains(EnumPdTable.ToothInitial)){
				ListToothInitials=new List<ToothInitial>(patientData.ListToothInitials);
			}
			if(listPdTables.Contains(EnumPdTable.UserWebHasPortalAccess)){
				UserWebHasPortalAccess=patientData.UserWebHasPortalAccess;
			}
		}
		#endregion Methods - Private
	}
}