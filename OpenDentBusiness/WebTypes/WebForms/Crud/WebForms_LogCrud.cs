//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;

namespace OpenDentBusiness.WebTypes.WebForms.Crud{
	public class WebForms_LogCrud {
		///<summary>Gets one WebForms_Log object from the database using the primary key.  Returns null if not found.</summary>
		public static WebForms_Log SelectOne(long logNum) {
			string command="SELECT * FROM webforms_log "
				+"WHERE LogNum = "+POut.Long(logNum);
			List<WebForms_Log> list=TableToList(DataCore.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WebForms_Log object from the database using a query.</summary>
		public static WebForms_Log SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebForms_Log> list=TableToList(DataCore.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WebForms_Log objects from the database using a query.</summary>
		public static List<WebForms_Log> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebForms_Log> list=TableToList(DataCore.GetTable(command));
			return list;
		}

		///<summary>Converts a list of WebForms_Log into a DataTable.</summary>
		public static DataTable ListToTable(List<WebForms_Log> listWebForms_Logs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WebForms_Log";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("LogNum");
			table.Columns.Add("DentalOfficeID");
			table.Columns.Add("WebSheetDefIDs");
			table.Columns.Add("LogMessage");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("RegistrationKeyNum");
			foreach(WebForms_Log webForms_Log in listWebForms_Logs) {
				table.Rows.Add(new object[] {
					POut.Long  (webForms_Log.LogNum),
					POut.Long  (webForms_Log.DentalOfficeID),
					            webForms_Log.WebSheetDefIDs,
					            webForms_Log.LogMessage,
					POut.DateT (webForms_Log.DateTStamp),
					POut.Long  (webForms_Log.RegistrationKeyNum),
				});
			}
			return table;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WebForms_Log> TableToList(DataTable table) {
			List<WebForms_Log> retVal=new List<WebForms_Log>();
			WebForms_Log webForms_Log;
			for(int i=0;i<table.Rows.Count;i++) {
				webForms_Log=new WebForms_Log();
				webForms_Log.LogNum            = PIn.Long  (table.Rows[i]["LogNum"].ToString());
				webForms_Log.DentalOfficeID    = PIn.Long  (table.Rows[i]["DentalOfficeID"].ToString());
				webForms_Log.WebSheetDefIDs    = PIn.String(table.Rows[i]["WebSheetDefIDs"].ToString());
				webForms_Log.LogMessage        = PIn.String(table.Rows[i]["LogMessage"].ToString());
				webForms_Log.DateTStamp        = PIn.DateT (table.Rows[i]["DateTStamp"].ToString());
				webForms_Log.RegistrationKeyNum= PIn.Long  (table.Rows[i]["RegistrationKeyNum"].ToString());
				retVal.Add(webForms_Log);
			}
			return retVal;
		}

		///<summary>Inserts one WebForms_Log into the database.  Returns the new priKey.</summary>
		public static long Insert(WebForms_Log webForms_Log) {
			return Insert(webForms_Log,false);
		}

		///<summary>Inserts one WebForms_Log into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WebForms_Log webForms_Log,bool useExistingPK) {
			string command="INSERT INTO webforms_log (";
			if(useExistingPK) {
				command+="LogNum,";
			}
			command+="DentalOfficeID,WebSheetDefIDs,LogMessage,RegistrationKeyNum) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(webForms_Log.LogNum)+",";
			}
			command+=
				     POut.Long  (webForms_Log.DentalOfficeID)+","
				+"'"+POut.String(webForms_Log.WebSheetDefIDs)+"',"
				+    DbHelper.ParamChar+"paramLogMessage,"
				//DateTStamp can only be set by MySQL
				+    POut.Long  (webForms_Log.RegistrationKeyNum)+")";
			if(webForms_Log.LogMessage==null) {
				webForms_Log.LogMessage="";
			}
			OdSqlParameter paramLogMessage=new OdSqlParameter("paramLogMessage",OdDbType.Text,webForms_Log.LogMessage);
			if(useExistingPK) {
				DataCore.NonQ(command,paramLogMessage);
			}
			else {
				webForms_Log.LogNum=DataCore.NonQ(command,true,paramLogMessage);
			}
			return webForms_Log.LogNum;
		}

		///<summary>Inserts many WebForms_Logs into the database.</summary>
		public static void InsertMany(List<WebForms_Log> listWebForms_Logs) {
			InsertMany(listWebForms_Logs,false);
		}

		///<summary>Inserts many WebForms_Logs into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<WebForms_Log> listWebForms_Logs,bool useExistingPK) {
			StringBuilder sbCommands=null;
			int index=0;
			int countRows=0;
			while(index < listWebForms_Logs.Count) {
				WebForms_Log webForms_Log=listWebForms_Logs[index];
				StringBuilder sbRow=new StringBuilder("(");
				bool hasComma=false;
				if(sbCommands==null) {
					sbCommands=new StringBuilder();
					sbCommands.Append("INSERT INTO webforms_log (");
					if(useExistingPK) {
						sbCommands.Append("LogNum,");
					}
					sbCommands.Append("DentalOfficeID,WebSheetDefIDs,LogMessage,RegistrationKeyNum) VALUES ");
					countRows=0;
				}
				else {
					hasComma=true;
				}
				if(useExistingPK) {
					sbRow.Append(POut.Long(webForms_Log.LogNum)); sbRow.Append(",");
				}
				sbRow.Append(POut.Long(webForms_Log.DentalOfficeID)); sbRow.Append(",");
				sbRow.Append("'"+POut.String(webForms_Log.WebSheetDefIDs)+"'"); sbRow.Append(",");
				sbRow.Append("'"+POut.String(webForms_Log.LogMessage)+"'"); sbRow.Append(",");
				//DateTStamp can only be set by MySQL
				sbRow.Append(POut.Long(webForms_Log.RegistrationKeyNum)); sbRow.Append(")");
				if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
					DataCore.NonQ(sbCommands.ToString());
					sbCommands=null;
				}
				else {
					if(hasComma) {
						sbCommands.Append(",");
					}
					sbCommands.Append(sbRow.ToString());
					countRows++;
					if(index==listWebForms_Logs.Count-1) {
						DataCore.NonQ(sbCommands.ToString());
					}
					index++;
				}
			}
		}

		///<summary>Updates one WebForms_Log in the database.</summary>
		public static void Update(WebForms_Log webForms_Log) {
			string command="UPDATE webforms_log SET "
				+"DentalOfficeID    =  "+POut.Long  (webForms_Log.DentalOfficeID)+", "
				+"WebSheetDefIDs    = '"+POut.String(webForms_Log.WebSheetDefIDs)+"', "
				+"LogMessage        =  "+DbHelper.ParamChar+"paramLogMessage, "
				//DateTStamp can only be set by MySQL
				+"RegistrationKeyNum=  "+POut.Long  (webForms_Log.RegistrationKeyNum)+" "
				+"WHERE LogNum = "+POut.Long(webForms_Log.LogNum);
			if(webForms_Log.LogMessage==null) {
				webForms_Log.LogMessage="";
			}
			OdSqlParameter paramLogMessage=new OdSqlParameter("paramLogMessage",OdDbType.Text,webForms_Log.LogMessage);
			DataCore.NonQ(command,paramLogMessage);
		}

		///<summary>Updates one WebForms_Log in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WebForms_Log webForms_Log,WebForms_Log oldWebForms_Log) {
			string command="";
			if(webForms_Log.DentalOfficeID != oldWebForms_Log.DentalOfficeID) {
				if(command!="") { command+=",";}
				command+="DentalOfficeID = "+POut.Long(webForms_Log.DentalOfficeID)+"";
			}
			if(webForms_Log.WebSheetDefIDs != oldWebForms_Log.WebSheetDefIDs) {
				if(command!="") { command+=",";}
				command+="WebSheetDefIDs = '"+POut.String(webForms_Log.WebSheetDefIDs)+"'";
			}
			if(webForms_Log.LogMessage != oldWebForms_Log.LogMessage) {
				if(command!="") { command+=",";}
				command+="LogMessage = "+DbHelper.ParamChar+"paramLogMessage";
			}
			//DateTStamp can only be set by MySQL
			if(webForms_Log.RegistrationKeyNum != oldWebForms_Log.RegistrationKeyNum) {
				if(command!="") { command+=",";}
				command+="RegistrationKeyNum = "+POut.Long(webForms_Log.RegistrationKeyNum)+"";
			}
			if(command=="") {
				return false;
			}
			if(webForms_Log.LogMessage==null) {
				webForms_Log.LogMessage="";
			}
			OdSqlParameter paramLogMessage=new OdSqlParameter("paramLogMessage",OdDbType.Text,webForms_Log.LogMessage);
			command="UPDATE webforms_log SET "+command
				+" WHERE LogNum = "+POut.Long(webForms_Log.LogNum);
			DataCore.NonQ(command,paramLogMessage);
			return true;
		}

		///<summary>Deletes one WebForms_Log from the database.</summary>
		public static void Delete(long logNum) {
			string command="DELETE FROM webforms_log "
				+"WHERE LogNum = "+POut.Long(logNum);
			DataCore.NonQ(command);
		}

	}
}