//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;

namespace OpenDentBusiness.WebTypes.WebForms.Crud{
	public class WebForms_PreferenceCrud {
		///<summary>Gets one WebForms_Preference object from the database using the primary key.  Returns null if not found.</summary>
		public static WebForms_Preference SelectOne(long webFormPrefNum) {
			string command="SELECT * FROM webforms_preference "
				+"WHERE WebFormPrefNum = "+POut.Long(webFormPrefNum);
			List<WebForms_Preference> list=TableToList(DataCore.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WebForms_Preference object from the database using a query.</summary>
		public static WebForms_Preference SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebForms_Preference> list=TableToList(DataCore.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WebForms_Preference objects from the database using a query.</summary>
		public static List<WebForms_Preference> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebForms_Preference> list=TableToList(DataCore.GetTable(command));
			return list;
		}

		///<summary>Converts a list of WebForms_Preference into a DataTable.</summary>
		public static DataTable ListToTable(List<WebForms_Preference> listWebForms_Preferences,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WebForms_Preference";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("WebFormPrefNum");
			table.Columns.Add("ColorBorder");
			table.Columns.Add("CultureName");
			table.Columns.Add("DisableSignatures");
			table.Columns.Add("RegistrationKeyNum");
			table.Columns.Add("DentalOfficeID");
			foreach(WebForms_Preference webForms_Preference in listWebForms_Preferences) {
				table.Rows.Add(new object[] {
					POut.Long  (webForms_Preference.WebFormPrefNum),
					POut.Int   (webForms_Preference.ColorBorder.ToArgb()),
					            webForms_Preference.CultureName,
					POut.Bool  (webForms_Preference.DisableSignatures),
					POut.Long  (webForms_Preference.RegistrationKeyNum),
					POut.Long  (webForms_Preference.DentalOfficeID),
				});
			}
			return table;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WebForms_Preference> TableToList(DataTable table) {
			List<WebForms_Preference> retVal=new List<WebForms_Preference>();
			WebForms_Preference webForms_Preference;
			for(int i=0;i<table.Rows.Count;i++) {
				webForms_Preference=new WebForms_Preference();
				webForms_Preference.WebFormPrefNum    = PIn.Long  (table.Rows[i]["WebFormPrefNum"].ToString());
				webForms_Preference.ColorBorder       = Color.FromArgb(PIn.Int(table.Rows[i]["ColorBorder"].ToString()));
				webForms_Preference.CultureName       = PIn.String(table.Rows[i]["CultureName"].ToString());
				webForms_Preference.DisableSignatures = PIn.Bool  (table.Rows[i]["DisableSignatures"].ToString());
				webForms_Preference.RegistrationKeyNum= PIn.Long  (table.Rows[i]["RegistrationKeyNum"].ToString());
				webForms_Preference.DentalOfficeID    = PIn.Long  (table.Rows[i]["DentalOfficeID"].ToString());
				retVal.Add(webForms_Preference);
			}
			return retVal;
		}

		///<summary>Inserts one WebForms_Preference into the database.  Returns the new priKey.</summary>
		public static long Insert(WebForms_Preference webForms_Preference) {
			return Insert(webForms_Preference,false);
		}

		///<summary>Inserts one WebForms_Preference into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WebForms_Preference webForms_Preference,bool useExistingPK) {
			string command="INSERT INTO webforms_preference (";
			if(useExistingPK) {
				command+="WebFormPrefNum,";
			}
			command+="ColorBorder,CultureName,DisableSignatures,RegistrationKeyNum,DentalOfficeID) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(webForms_Preference.WebFormPrefNum)+",";
			}
			command+=
				     POut.Int   (webForms_Preference.ColorBorder.ToArgb())+","
				+"'"+POut.String(webForms_Preference.CultureName)+"',"
				+    POut.Bool  (webForms_Preference.DisableSignatures)+","
				+    POut.Long  (webForms_Preference.RegistrationKeyNum)+","
				+    POut.Long  (webForms_Preference.DentalOfficeID)+")";
			if(useExistingPK) {
				DataCore.NonQ(command);
			}
			else {
				webForms_Preference.WebFormPrefNum=DataCore.NonQ(command,true);
			}
			return webForms_Preference.WebFormPrefNum;
		}

		///<summary>Inserts many WebForms_Preferences into the database.</summary>
		public static void InsertMany(List<WebForms_Preference> listWebForms_Preferences) {
			InsertMany(listWebForms_Preferences,false);
		}

		///<summary>Inserts many WebForms_Preferences into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<WebForms_Preference> listWebForms_Preferences,bool useExistingPK) {
			StringBuilder sbCommands=null;
			int index=0;
			int countRows=0;
			while(index < listWebForms_Preferences.Count) {
				WebForms_Preference webForms_Preference=listWebForms_Preferences[index];
				StringBuilder sbRow=new StringBuilder("(");
				bool hasComma=false;
				if(sbCommands==null) {
					sbCommands=new StringBuilder();
					sbCommands.Append("INSERT INTO webforms_preference (");
					if(useExistingPK) {
						sbCommands.Append("WebFormPrefNum,");
					}
					sbCommands.Append("ColorBorder,CultureName,DisableSignatures,RegistrationKeyNum,DentalOfficeID) VALUES ");
					countRows=0;
				}
				else {
					hasComma=true;
				}
				if(useExistingPK) {
					sbRow.Append(POut.Long(webForms_Preference.WebFormPrefNum)); sbRow.Append(",");
				}
				sbRow.Append(POut.Int(webForms_Preference.ColorBorder.ToArgb())); sbRow.Append(",");
				sbRow.Append("'"+POut.String(webForms_Preference.CultureName)+"'"); sbRow.Append(",");
				sbRow.Append(POut.Bool(webForms_Preference.DisableSignatures)); sbRow.Append(",");
				sbRow.Append(POut.Long(webForms_Preference.RegistrationKeyNum)); sbRow.Append(",");
				sbRow.Append(POut.Long(webForms_Preference.DentalOfficeID)); sbRow.Append(")");
				if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
					DataCore.NonQ(sbCommands.ToString());
					sbCommands=null;
				}
				else {
					if(hasComma) {
						sbCommands.Append(",");
					}
					sbCommands.Append(sbRow.ToString());
					countRows++;
					if(index==listWebForms_Preferences.Count-1) {
						DataCore.NonQ(sbCommands.ToString());
					}
					index++;
				}
			}
		}

		///<summary>Updates one WebForms_Preference in the database.</summary>
		public static void Update(WebForms_Preference webForms_Preference) {
			string command="UPDATE webforms_preference SET "
				+"ColorBorder       =  "+POut.Int   (webForms_Preference.ColorBorder.ToArgb())+", "
				+"CultureName       = '"+POut.String(webForms_Preference.CultureName)+"', "
				+"DisableSignatures =  "+POut.Bool  (webForms_Preference.DisableSignatures)+", "
				+"RegistrationKeyNum=  "+POut.Long  (webForms_Preference.RegistrationKeyNum)+", "
				+"DentalOfficeID    =  "+POut.Long  (webForms_Preference.DentalOfficeID)+" "
				+"WHERE WebFormPrefNum = "+POut.Long(webForms_Preference.WebFormPrefNum);
			DataCore.NonQ(command);
		}

		///<summary>Updates one WebForms_Preference in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WebForms_Preference webForms_Preference,WebForms_Preference oldWebForms_Preference) {
			string command="";
			if(webForms_Preference.ColorBorder != oldWebForms_Preference.ColorBorder) {
				if(command!="") { command+=",";}
				command+="ColorBorder = "+POut.Int(webForms_Preference.ColorBorder.ToArgb())+"";
			}
			if(webForms_Preference.CultureName != oldWebForms_Preference.CultureName) {
				if(command!="") { command+=",";}
				command+="CultureName = '"+POut.String(webForms_Preference.CultureName)+"'";
			}
			if(webForms_Preference.DisableSignatures != oldWebForms_Preference.DisableSignatures) {
				if(command!="") { command+=",";}
				command+="DisableSignatures = "+POut.Bool(webForms_Preference.DisableSignatures)+"";
			}
			if(webForms_Preference.RegistrationKeyNum != oldWebForms_Preference.RegistrationKeyNum) {
				if(command!="") { command+=",";}
				command+="RegistrationKeyNum = "+POut.Long(webForms_Preference.RegistrationKeyNum)+"";
			}
			if(webForms_Preference.DentalOfficeID != oldWebForms_Preference.DentalOfficeID) {
				if(command!="") { command+=",";}
				command+="DentalOfficeID = "+POut.Long(webForms_Preference.DentalOfficeID)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE webforms_preference SET "+command
				+" WHERE WebFormPrefNum = "+POut.Long(webForms_Preference.WebFormPrefNum);
			DataCore.NonQ(command);
			return true;
		}

		///<summary>Deletes one WebForms_Preference from the database.</summary>
		public static void Delete(long webFormPrefNum) {
			string command="DELETE FROM webforms_preference "
				+"WHERE WebFormPrefNum = "+POut.Long(webFormPrefNum);
			DataCore.NonQ(command);
		}

	}
}