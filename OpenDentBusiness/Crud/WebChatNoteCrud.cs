//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class WebChatNoteCrud {
		///<summary>Gets one WebChatNote object from the database using the primary key.  Returns null if not found.</summary>
		public static WebChatNote SelectOne(long webChatNoteNum) {
			string command="SELECT * FROM webchatnote "
				+"WHERE WebChatNoteNum = "+POut.Long(webChatNoteNum);
			List<WebChatNote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WebChatNote object from the database using a query.</summary>
		public static WebChatNote SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebChatNote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WebChatNote objects from the database using a query.</summary>
		public static List<WebChatNote> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebChatNote> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WebChatNote> TableToList(DataTable table) {
			List<WebChatNote> retVal=new List<WebChatNote>();
			WebChatNote webChatNote;
			foreach(DataRow row in table.Rows) {
				webChatNote=new WebChatNote();
				webChatNote.WebChatNoteNum   = PIn.Long  (row["WebChatNoteNum"].ToString());
				webChatNote.WebChatSessionNum= PIn.Long  (row["WebChatSessionNum"].ToString());
				webChatNote.DateTimeNote     = PIn.DateT (row["DateTimeNote"].ToString());
				webChatNote.TechName         = PIn.String(row["TechName"].ToString());
				webChatNote.Note             = PIn.String(row["Note"].ToString());
				retVal.Add(webChatNote);
			}
			return retVal;
		}

		///<summary>Converts a list of WebChatNote into a DataTable.</summary>
		public static DataTable ListToTable(List<WebChatNote> listWebChatNotes,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WebChatNote";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("WebChatNoteNum");
			table.Columns.Add("WebChatSessionNum");
			table.Columns.Add("DateTimeNote");
			table.Columns.Add("TechName");
			table.Columns.Add("Note");
			foreach(WebChatNote webChatNote in listWebChatNotes) {
				table.Rows.Add(new object[] {
					POut.Long  (webChatNote.WebChatNoteNum),
					POut.Long  (webChatNote.WebChatSessionNum),
					POut.DateT (webChatNote.DateTimeNote,false),
					            webChatNote.TechName,
					            webChatNote.Note,
				});
			}
			return table;
		}

		///<summary>Inserts one WebChatNote into the database.  Returns the new priKey.</summary>
		public static long Insert(WebChatNote webChatNote) {
			return Insert(webChatNote,false);
		}

		///<summary>Inserts one WebChatNote into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WebChatNote webChatNote,bool useExistingPK) {
			string command="INSERT INTO webchatnote (";
			if(useExistingPK) {
				command+="WebChatNoteNum,";
			}
			command+="WebChatSessionNum,DateTimeNote,TechName,Note) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(webChatNote.WebChatNoteNum)+",";
			}
			command+=
				     POut.Long  (webChatNote.WebChatSessionNum)+","
				+    POut.DateT (webChatNote.DateTimeNote)+","
				+    DbHelper.ParamChar+"paramTechName,"
				+    DbHelper.ParamChar+"paramNote)";
			if(webChatNote.TechName==null) {
				webChatNote.TechName="";
			}
			OdSqlParameter paramTechName=new OdSqlParameter("paramTechName",OdDbType.Text,POut.StringParam(webChatNote.TechName));
			if(webChatNote.Note==null) {
				webChatNote.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringNote(webChatNote.Note));
			if(useExistingPK) {
				Db.NonQ(command,paramTechName,paramNote);
			}
			else {
				webChatNote.WebChatNoteNum=Db.NonQ(command,true,"WebChatNoteNum","webChatNote",paramTechName,paramNote);
			}
			return webChatNote.WebChatNoteNum;
		}

		///<summary>Inserts one WebChatNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WebChatNote webChatNote) {
			return InsertNoCache(webChatNote,false);
		}

		///<summary>Inserts one WebChatNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WebChatNote webChatNote,bool useExistingPK) {
			string command="INSERT INTO webchatnote (";
			if(useExistingPK) {
				command+="WebChatNoteNum,";
			}
			command+="WebChatSessionNum,DateTimeNote,TechName,Note) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(webChatNote.WebChatNoteNum)+",";
			}
			command+=
				     POut.Long  (webChatNote.WebChatSessionNum)+","
				+    POut.DateT (webChatNote.DateTimeNote)+","
				+    DbHelper.ParamChar+"paramTechName,"
				+    DbHelper.ParamChar+"paramNote)";
			if(webChatNote.TechName==null) {
				webChatNote.TechName="";
			}
			OdSqlParameter paramTechName=new OdSqlParameter("paramTechName",OdDbType.Text,POut.StringParam(webChatNote.TechName));
			if(webChatNote.Note==null) {
				webChatNote.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringNote(webChatNote.Note));
			if(useExistingPK) {
				Db.NonQ(command,paramTechName,paramNote);
			}
			else {
				webChatNote.WebChatNoteNum=Db.NonQ(command,true,"WebChatNoteNum","webChatNote",paramTechName,paramNote);
			}
			return webChatNote.WebChatNoteNum;
		}

		///<summary>Updates one WebChatNote in the database.</summary>
		public static void Update(WebChatNote webChatNote) {
			string command="UPDATE webchatnote SET "
				+"WebChatSessionNum=  "+POut.Long  (webChatNote.WebChatSessionNum)+", "
				+"DateTimeNote     =  "+POut.DateT (webChatNote.DateTimeNote)+", "
				+"TechName         =  "+DbHelper.ParamChar+"paramTechName, "
				+"Note             =  "+DbHelper.ParamChar+"paramNote "
				+"WHERE WebChatNoteNum = "+POut.Long(webChatNote.WebChatNoteNum);
			if(webChatNote.TechName==null) {
				webChatNote.TechName="";
			}
			OdSqlParameter paramTechName=new OdSqlParameter("paramTechName",OdDbType.Text,POut.StringParam(webChatNote.TechName));
			if(webChatNote.Note==null) {
				webChatNote.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringNote(webChatNote.Note));
			Db.NonQ(command,paramTechName,paramNote);
		}

		///<summary>Updates one WebChatNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WebChatNote webChatNote,WebChatNote oldWebChatNote) {
			string command="";
			if(webChatNote.WebChatSessionNum != oldWebChatNote.WebChatSessionNum) {
				if(command!="") { command+=",";}
				command+="WebChatSessionNum = "+POut.Long(webChatNote.WebChatSessionNum)+"";
			}
			if(webChatNote.DateTimeNote != oldWebChatNote.DateTimeNote) {
				if(command!="") { command+=",";}
				command+="DateTimeNote = "+POut.DateT(webChatNote.DateTimeNote)+"";
			}
			if(webChatNote.TechName != oldWebChatNote.TechName) {
				if(command!="") { command+=",";}
				command+="TechName = "+DbHelper.ParamChar+"paramTechName";
			}
			if(webChatNote.Note != oldWebChatNote.Note) {
				if(command!="") { command+=",";}
				command+="Note = "+DbHelper.ParamChar+"paramNote";
			}
			if(command=="") {
				return false;
			}
			if(webChatNote.TechName==null) {
				webChatNote.TechName="";
			}
			OdSqlParameter paramTechName=new OdSqlParameter("paramTechName",OdDbType.Text,POut.StringParam(webChatNote.TechName));
			if(webChatNote.Note==null) {
				webChatNote.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringNote(webChatNote.Note));
			command="UPDATE webchatnote SET "+command
				+" WHERE WebChatNoteNum = "+POut.Long(webChatNote.WebChatNoteNum);
			Db.NonQ(command,paramTechName,paramNote);
			return true;
		}

		///<summary>Returns true if Update(WebChatNote,WebChatNote) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(WebChatNote webChatNote,WebChatNote oldWebChatNote) {
			if(webChatNote.WebChatSessionNum != oldWebChatNote.WebChatSessionNum) {
				return true;
			}
			if(webChatNote.DateTimeNote != oldWebChatNote.DateTimeNote) {
				return true;
			}
			if(webChatNote.TechName != oldWebChatNote.TechName) {
				return true;
			}
			if(webChatNote.Note != oldWebChatNote.Note) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one WebChatNote from the database.</summary>
		public static void Delete(long webChatNoteNum) {
			string command="DELETE FROM webchatnote "
				+"WHERE WebChatNoteNum = "+POut.Long(webChatNoteNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many WebChatNotes from the database.</summary>
		public static void DeleteMany(List<long> listWebChatNoteNums) {
			if(listWebChatNoteNums==null || listWebChatNoteNums.Count==0) {
				return;
			}
			string command="DELETE FROM webchatnote "
				+"WHERE WebChatNoteNum IN("+string.Join(",",listWebChatNoteNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}