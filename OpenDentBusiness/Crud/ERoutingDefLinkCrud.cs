//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ERoutingDefLinkCrud {
		///<summary>Gets one ERoutingDefLink object from the database using the primary key.  Returns null if not found.</summary>
		public static ERoutingDefLink SelectOne(long eRoutingDefLinkNum) {
			string command="SELECT * FROM eroutingdeflink "
				+"WHERE ERoutingDefLinkNum = "+POut.Long(eRoutingDefLinkNum);
			List<ERoutingDefLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ERoutingDefLink object from the database using a query.</summary>
		public static ERoutingDefLink SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERoutingDefLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ERoutingDefLink objects from the database using a query.</summary>
		public static List<ERoutingDefLink> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERoutingDefLink> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ERoutingDefLink> TableToList(DataTable table) {
			List<ERoutingDefLink> retVal=new List<ERoutingDefLink>();
			ERoutingDefLink eRoutingDefLink;
			foreach(DataRow row in table.Rows) {
				eRoutingDefLink=new ERoutingDefLink();
				eRoutingDefLink.ERoutingDefLinkNum= PIn.Long  (row["ERoutingDefLinkNum"].ToString());
				eRoutingDefLink.ERoutingDefNum    = PIn.Long  (row["ERoutingDefNum"].ToString());
				eRoutingDefLink.Fkey              = PIn.Long  (row["Fkey"].ToString());
				eRoutingDefLink.ERoutingType      = (OpenDentBusiness.EnumERoutingType)PIn.Int(row["ERoutingType"].ToString());
				retVal.Add(eRoutingDefLink);
			}
			return retVal;
		}

		///<summary>Converts a list of ERoutingDefLink into a DataTable.</summary>
		public static DataTable ListToTable(List<ERoutingDefLink> listERoutingDefLinks,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ERoutingDefLink";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ERoutingDefLinkNum");
			table.Columns.Add("ERoutingDefNum");
			table.Columns.Add("Fkey");
			table.Columns.Add("ERoutingType");
			foreach(ERoutingDefLink eRoutingDefLink in listERoutingDefLinks) {
				table.Rows.Add(new object[] {
					POut.Long  (eRoutingDefLink.ERoutingDefLinkNum),
					POut.Long  (eRoutingDefLink.ERoutingDefNum),
					POut.Long  (eRoutingDefLink.Fkey),
					POut.Int   ((int)eRoutingDefLink.ERoutingType),
				});
			}
			return table;
		}

		///<summary>Inserts one ERoutingDefLink into the database.  Returns the new priKey.</summary>
		public static long Insert(ERoutingDefLink eRoutingDefLink) {
			return Insert(eRoutingDefLink,false);
		}

		///<summary>Inserts one ERoutingDefLink into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ERoutingDefLink eRoutingDefLink,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eRoutingDefLink.ERoutingDefLinkNum=ReplicationServers.GetKey("eroutingdeflink","ERoutingDefLinkNum");
			}
			string command="INSERT INTO eroutingdeflink (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ERoutingDefLinkNum,";
			}
			command+="ERoutingDefNum,Fkey,ERoutingType) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eRoutingDefLink.ERoutingDefLinkNum)+",";
			}
			command+=
				     POut.Long  (eRoutingDefLink.ERoutingDefNum)+","
				+    POut.Long  (eRoutingDefLink.Fkey)+","
				+    POut.Int   ((int)eRoutingDefLink.ERoutingType)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eRoutingDefLink.ERoutingDefLinkNum=Db.NonQ(command,true,"ERoutingDefLinkNum","eRoutingDefLink");
			}
			return eRoutingDefLink.ERoutingDefLinkNum;
		}

		///<summary>Inserts one ERoutingDefLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERoutingDefLink eRoutingDefLink) {
			return InsertNoCache(eRoutingDefLink,false);
		}

		///<summary>Inserts one ERoutingDefLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERoutingDefLink eRoutingDefLink,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO eroutingdeflink (";
			if(!useExistingPK && isRandomKeys) {
				eRoutingDefLink.ERoutingDefLinkNum=ReplicationServers.GetKeyNoCache("eroutingdeflink","ERoutingDefLinkNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ERoutingDefLinkNum,";
			}
			command+="ERoutingDefNum,Fkey,ERoutingType) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eRoutingDefLink.ERoutingDefLinkNum)+",";
			}
			command+=
				     POut.Long  (eRoutingDefLink.ERoutingDefNum)+","
				+    POut.Long  (eRoutingDefLink.Fkey)+","
				+    POut.Int   ((int)eRoutingDefLink.ERoutingType)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eRoutingDefLink.ERoutingDefLinkNum=Db.NonQ(command,true,"ERoutingDefLinkNum","eRoutingDefLink");
			}
			return eRoutingDefLink.ERoutingDefLinkNum;
		}

		///<summary>Updates one ERoutingDefLink in the database.</summary>
		public static void Update(ERoutingDefLink eRoutingDefLink) {
			string command="UPDATE eroutingdeflink SET "
				+"ERoutingDefNum    =  "+POut.Long  (eRoutingDefLink.ERoutingDefNum)+", "
				+"Fkey              =  "+POut.Long  (eRoutingDefLink.Fkey)+", "
				+"ERoutingType      =  "+POut.Int   ((int)eRoutingDefLink.ERoutingType)+" "
				+"WHERE ERoutingDefLinkNum = "+POut.Long(eRoutingDefLink.ERoutingDefLinkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ERoutingDefLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ERoutingDefLink eRoutingDefLink,ERoutingDefLink oldERoutingDefLink) {
			string command="";
			if(eRoutingDefLink.ERoutingDefNum != oldERoutingDefLink.ERoutingDefNum) {
				if(command!="") { command+=",";}
				command+="ERoutingDefNum = "+POut.Long(eRoutingDefLink.ERoutingDefNum)+"";
			}
			if(eRoutingDefLink.Fkey != oldERoutingDefLink.Fkey) {
				if(command!="") { command+=",";}
				command+="Fkey = "+POut.Long(eRoutingDefLink.Fkey)+"";
			}
			if(eRoutingDefLink.ERoutingType != oldERoutingDefLink.ERoutingType) {
				if(command!="") { command+=",";}
				command+="ERoutingType = "+POut.Int   ((int)eRoutingDefLink.ERoutingType)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE eroutingdeflink SET "+command
				+" WHERE ERoutingDefLinkNum = "+POut.Long(eRoutingDefLink.ERoutingDefLinkNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ERoutingDefLink,ERoutingDefLink) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ERoutingDefLink eRoutingDefLink,ERoutingDefLink oldERoutingDefLink) {
			if(eRoutingDefLink.ERoutingDefNum != oldERoutingDefLink.ERoutingDefNum) {
				return true;
			}
			if(eRoutingDefLink.Fkey != oldERoutingDefLink.Fkey) {
				return true;
			}
			if(eRoutingDefLink.ERoutingType != oldERoutingDefLink.ERoutingType) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ERoutingDefLink from the database.</summary>
		public static void Delete(long eRoutingDefLinkNum) {
			string command="DELETE FROM eroutingdeflink "
				+"WHERE ERoutingDefLinkNum = "+POut.Long(eRoutingDefLinkNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ERoutingDefLinks from the database.</summary>
		public static void DeleteMany(List<long> listERoutingDefLinkNums) {
			if(listERoutingDefLinkNums==null || listERoutingDefLinkNums.Count==0) {
				return;
			}
			string command="DELETE FROM eroutingdeflink "
				+"WHERE ERoutingDefLinkNum IN("+string.Join(",",listERoutingDefLinkNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}