//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class DocumentCrud {
		///<summary>Gets one Document object from the database using the primary key.  Returns null if not found.</summary>
		public static Document SelectOne(long docNum) {
			string command="SELECT * FROM document "
				+"WHERE DocNum = "+POut.Long(docNum);
			List<Document> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Document object from the database using a query.</summary>
		public static Document SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Document> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Document objects from the database using a query.</summary>
		public static List<Document> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Document> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Document> TableToList(DataTable table) {
			List<Document> retVal=new List<Document>();
			Document document;
			foreach(DataRow row in table.Rows) {
				document=new Document();
				document.DocNum        = PIn.Long  (row["DocNum"].ToString());
				document.Description   = PIn.String(row["Description"].ToString());
				document.DateCreated   = PIn.DateT (row["DateCreated"].ToString());
				document.DocCategory   = PIn.Long  (row["DocCategory"].ToString());
				document.PatNum        = PIn.Long  (row["PatNum"].ToString());
				document.FileName      = PIn.String(row["FileName"].ToString());
				document.ImgType       = (OpenDentBusiness.ImageType)PIn.Int(row["ImgType"].ToString());
				document.IsFlipped     = PIn.Bool  (row["IsFlipped"].ToString());
				document.DegreesRotated= PIn.Float (row["DegreesRotated"].ToString());
				document.ToothNumbers  = PIn.String(row["ToothNumbers"].ToString());
				document.Note          = PIn.String(row["Note"].ToString());
				document.SigIsTopaz    = PIn.Bool  (row["SigIsTopaz"].ToString());
				document.Signature     = PIn.String(row["Signature"].ToString());
				document.CropX         = PIn.Int   (row["CropX"].ToString());
				document.CropY         = PIn.Int   (row["CropY"].ToString());
				document.CropW         = PIn.Int   (row["CropW"].ToString());
				document.CropH         = PIn.Int   (row["CropH"].ToString());
				document.WindowingMin  = PIn.Int   (row["WindowingMin"].ToString());
				document.WindowingMax  = PIn.Int   (row["WindowingMax"].ToString());
				document.MountItemNum  = PIn.Long  (row["MountItemNum"].ToString());
				document.DateTStamp    = PIn.DateT (row["DateTStamp"].ToString());
				document.RawBase64     = PIn.String(row["RawBase64"].ToString());
				document.Thumbnail     = PIn.String(row["Thumbnail"].ToString());
				document.ExternalGUID  = PIn.String(row["ExternalGUID"].ToString());
				string externalSource=row["ExternalSource"].ToString();
				if(externalSource=="") {
					document.ExternalSource=(OpenDentBusiness.ExternalSourceType)0;
				}
				else try{
					document.ExternalSource=(OpenDentBusiness.ExternalSourceType)Enum.Parse(typeof(OpenDentBusiness.ExternalSourceType),externalSource);
				}
				catch{
					document.ExternalSource=(OpenDentBusiness.ExternalSourceType)0;
				}
				document.ProvNum       = PIn.Long  (row["ProvNum"].ToString());
				document.IsCropOld     = PIn.Bool  (row["IsCropOld"].ToString());
				retVal.Add(document);
			}
			return retVal;
		}

		///<summary>Converts a list of Document into a DataTable.</summary>
		public static DataTable ListToTable(List<Document> listDocuments,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Document";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("DocNum");
			table.Columns.Add("Description");
			table.Columns.Add("DateCreated");
			table.Columns.Add("DocCategory");
			table.Columns.Add("PatNum");
			table.Columns.Add("FileName");
			table.Columns.Add("ImgType");
			table.Columns.Add("IsFlipped");
			table.Columns.Add("DegreesRotated");
			table.Columns.Add("ToothNumbers");
			table.Columns.Add("Note");
			table.Columns.Add("SigIsTopaz");
			table.Columns.Add("Signature");
			table.Columns.Add("CropX");
			table.Columns.Add("CropY");
			table.Columns.Add("CropW");
			table.Columns.Add("CropH");
			table.Columns.Add("WindowingMin");
			table.Columns.Add("WindowingMax");
			table.Columns.Add("MountItemNum");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("RawBase64");
			table.Columns.Add("Thumbnail");
			table.Columns.Add("ExternalGUID");
			table.Columns.Add("ExternalSource");
			table.Columns.Add("ProvNum");
			table.Columns.Add("IsCropOld");
			foreach(Document document in listDocuments) {
				table.Rows.Add(new object[] {
					POut.Long  (document.DocNum),
					            document.Description,
					POut.DateT (document.DateCreated,false),
					POut.Long  (document.DocCategory),
					POut.Long  (document.PatNum),
					            document.FileName,
					POut.Int   ((int)document.ImgType),
					POut.Bool  (document.IsFlipped),
					POut.Float (document.DegreesRotated),
					            document.ToothNumbers,
					            document.Note,
					POut.Bool  (document.SigIsTopaz),
					            document.Signature,
					POut.Int   (document.CropX),
					POut.Int   (document.CropY),
					POut.Int   (document.CropW),
					POut.Int   (document.CropH),
					POut.Int   (document.WindowingMin),
					POut.Int   (document.WindowingMax),
					POut.Long  (document.MountItemNum),
					POut.DateT (document.DateTStamp,false),
					            document.RawBase64,
					            document.Thumbnail,
					            document.ExternalGUID,
					POut.Int   ((int)document.ExternalSource),
					POut.Long  (document.ProvNum),
					POut.Bool  (document.IsCropOld),
				});
			}
			return table;
		}

		///<summary>Inserts one Document into the database.  Returns the new priKey.</summary>
		public static long Insert(Document document) {
			return Insert(document,false);
		}

		///<summary>Inserts one Document into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Document document,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				document.DocNum=ReplicationServers.GetKey("document","DocNum");
			}
			string command="INSERT INTO document (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DocNum,";
			}
			command+="Description,DateCreated,DocCategory,PatNum,FileName,ImgType,IsFlipped,DegreesRotated,ToothNumbers,Note,SigIsTopaz,Signature,CropX,CropY,CropW,CropH,WindowingMin,WindowingMax,MountItemNum,RawBase64,Thumbnail,ExternalGUID,ExternalSource,ProvNum,IsCropOld) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(document.DocNum)+",";
			}
			command+=
				 "'"+POut.String(document.Description)+"',"
				+    POut.DateT (document.DateCreated)+","
				+    POut.Long  (document.DocCategory)+","
				+    POut.Long  (document.PatNum)+","
				+"'"+POut.String(document.FileName)+"',"
				+    POut.Int   ((int)document.ImgType)+","
				+    POut.Bool  (document.IsFlipped)+","
				+    POut.Float (document.DegreesRotated)+","
				+"'"+POut.String(document.ToothNumbers)+"',"
				+    DbHelper.ParamChar+"paramNote,"
				+    POut.Bool  (document.SigIsTopaz)+","
				+    DbHelper.ParamChar+"paramSignature,"
				+    POut.Int   (document.CropX)+","
				+    POut.Int   (document.CropY)+","
				+    POut.Int   (document.CropW)+","
				+    POut.Int   (document.CropH)+","
				+    POut.Int   (document.WindowingMin)+","
				+    POut.Int   (document.WindowingMax)+","
				+    POut.Long  (document.MountItemNum)+","
				//DateTStamp can only be set by MySQL
				+    DbHelper.ParamChar+"paramRawBase64,"
				+    DbHelper.ParamChar+"paramThumbnail,"
				+"'"+POut.String(document.ExternalGUID)+"',"
				+"'"+POut.String(document.ExternalSource.ToString())+"',"
				+    POut.Long  (document.ProvNum)+","
				+    POut.Bool  (document.IsCropOld)+")";
			if(document.Note==null) {
				document.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(document.Note));
			if(document.Signature==null) {
				document.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(document.Signature));
			if(document.RawBase64==null) {
				document.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(document.RawBase64));
			if(document.Thumbnail==null) {
				document.Thumbnail="";
			}
			OdSqlParameter paramThumbnail=new OdSqlParameter("paramThumbnail",OdDbType.Text,POut.StringParam(document.Thumbnail));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramNote,paramSignature,paramRawBase64,paramThumbnail);
			}
			else {
				document.DocNum=Db.NonQ(command,true,"DocNum","document",paramNote,paramSignature,paramRawBase64,paramThumbnail);
			}
			return document.DocNum;
		}

		///<summary>Inserts one Document into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Document document) {
			return InsertNoCache(document,false);
		}

		///<summary>Inserts one Document into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Document document,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO document (";
			if(!useExistingPK && isRandomKeys) {
				document.DocNum=ReplicationServers.GetKeyNoCache("document","DocNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="DocNum,";
			}
			command+="Description,DateCreated,DocCategory,PatNum,FileName,ImgType,IsFlipped,DegreesRotated,ToothNumbers,Note,SigIsTopaz,Signature,CropX,CropY,CropW,CropH,WindowingMin,WindowingMax,MountItemNum,RawBase64,Thumbnail,ExternalGUID,ExternalSource,ProvNum,IsCropOld) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(document.DocNum)+",";
			}
			command+=
				 "'"+POut.String(document.Description)+"',"
				+    POut.DateT (document.DateCreated)+","
				+    POut.Long  (document.DocCategory)+","
				+    POut.Long  (document.PatNum)+","
				+"'"+POut.String(document.FileName)+"',"
				+    POut.Int   ((int)document.ImgType)+","
				+    POut.Bool  (document.IsFlipped)+","
				+    POut.Float (document.DegreesRotated)+","
				+"'"+POut.String(document.ToothNumbers)+"',"
				+    DbHelper.ParamChar+"paramNote,"
				+    POut.Bool  (document.SigIsTopaz)+","
				+    DbHelper.ParamChar+"paramSignature,"
				+    POut.Int   (document.CropX)+","
				+    POut.Int   (document.CropY)+","
				+    POut.Int   (document.CropW)+","
				+    POut.Int   (document.CropH)+","
				+    POut.Int   (document.WindowingMin)+","
				+    POut.Int   (document.WindowingMax)+","
				+    POut.Long  (document.MountItemNum)+","
				//DateTStamp can only be set by MySQL
				+    DbHelper.ParamChar+"paramRawBase64,"
				+    DbHelper.ParamChar+"paramThumbnail,"
				+"'"+POut.String(document.ExternalGUID)+"',"
				+"'"+POut.String(document.ExternalSource.ToString())+"',"
				+    POut.Long  (document.ProvNum)+","
				+    POut.Bool  (document.IsCropOld)+")";
			if(document.Note==null) {
				document.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(document.Note));
			if(document.Signature==null) {
				document.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(document.Signature));
			if(document.RawBase64==null) {
				document.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(document.RawBase64));
			if(document.Thumbnail==null) {
				document.Thumbnail="";
			}
			OdSqlParameter paramThumbnail=new OdSqlParameter("paramThumbnail",OdDbType.Text,POut.StringParam(document.Thumbnail));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramNote,paramSignature,paramRawBase64,paramThumbnail);
			}
			else {
				document.DocNum=Db.NonQ(command,true,"DocNum","document",paramNote,paramSignature,paramRawBase64,paramThumbnail);
			}
			return document.DocNum;
		}

		///<summary>Updates one Document in the database.</summary>
		public static void Update(Document document) {
			string command="UPDATE document SET "
				+"Description   = '"+POut.String(document.Description)+"', "
				+"DateCreated   =  "+POut.DateT (document.DateCreated)+", "
				+"DocCategory   =  "+POut.Long  (document.DocCategory)+", "
				+"PatNum        =  "+POut.Long  (document.PatNum)+", "
				+"FileName      = '"+POut.String(document.FileName)+"', "
				+"ImgType       =  "+POut.Int   ((int)document.ImgType)+", "
				+"IsFlipped     =  "+POut.Bool  (document.IsFlipped)+", "
				+"DegreesRotated=  "+POut.Float (document.DegreesRotated)+", "
				+"ToothNumbers  = '"+POut.String(document.ToothNumbers)+"', "
				+"Note          =  "+DbHelper.ParamChar+"paramNote, "
				+"SigIsTopaz    =  "+POut.Bool  (document.SigIsTopaz)+", "
				+"Signature     =  "+DbHelper.ParamChar+"paramSignature, "
				+"CropX         =  "+POut.Int   (document.CropX)+", "
				+"CropY         =  "+POut.Int   (document.CropY)+", "
				+"CropW         =  "+POut.Int   (document.CropW)+", "
				+"CropH         =  "+POut.Int   (document.CropH)+", "
				+"WindowingMin  =  "+POut.Int   (document.WindowingMin)+", "
				+"WindowingMax  =  "+POut.Int   (document.WindowingMax)+", "
				+"MountItemNum  =  "+POut.Long  (document.MountItemNum)+", "
				//DateTStamp can only be set by MySQL
				+"RawBase64     =  "+DbHelper.ParamChar+"paramRawBase64, "
				+"Thumbnail     =  "+DbHelper.ParamChar+"paramThumbnail, "
				+"ExternalGUID  = '"+POut.String(document.ExternalGUID)+"', "
				+"ExternalSource= '"+POut.String(document.ExternalSource.ToString())+"', "
				+"ProvNum       =  "+POut.Long  (document.ProvNum)+", "
				+"IsCropOld     =  "+POut.Bool  (document.IsCropOld)+" "
				+"WHERE DocNum = "+POut.Long(document.DocNum);
			if(document.Note==null) {
				document.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(document.Note));
			if(document.Signature==null) {
				document.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(document.Signature));
			if(document.RawBase64==null) {
				document.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(document.RawBase64));
			if(document.Thumbnail==null) {
				document.Thumbnail="";
			}
			OdSqlParameter paramThumbnail=new OdSqlParameter("paramThumbnail",OdDbType.Text,POut.StringParam(document.Thumbnail));
			Db.NonQ(command,paramNote,paramSignature,paramRawBase64,paramThumbnail);
		}

		///<summary>Updates one Document in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Document document,Document oldDocument) {
			string command="";
			if(document.Description != oldDocument.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(document.Description)+"'";
			}
			if(document.DateCreated != oldDocument.DateCreated) {
				if(command!="") { command+=",";}
				command+="DateCreated = "+POut.DateT(document.DateCreated)+"";
			}
			if(document.DocCategory != oldDocument.DocCategory) {
				if(command!="") { command+=",";}
				command+="DocCategory = "+POut.Long(document.DocCategory)+"";
			}
			if(document.PatNum != oldDocument.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(document.PatNum)+"";
			}
			if(document.FileName != oldDocument.FileName) {
				if(command!="") { command+=",";}
				command+="FileName = '"+POut.String(document.FileName)+"'";
			}
			if(document.ImgType != oldDocument.ImgType) {
				if(command!="") { command+=",";}
				command+="ImgType = "+POut.Int   ((int)document.ImgType)+"";
			}
			if(document.IsFlipped != oldDocument.IsFlipped) {
				if(command!="") { command+=",";}
				command+="IsFlipped = "+POut.Bool(document.IsFlipped)+"";
			}
			if(document.DegreesRotated != oldDocument.DegreesRotated) {
				if(command!="") { command+=",";}
				command+="DegreesRotated = "+POut.Float(document.DegreesRotated)+"";
			}
			if(document.ToothNumbers != oldDocument.ToothNumbers) {
				if(command!="") { command+=",";}
				command+="ToothNumbers = '"+POut.String(document.ToothNumbers)+"'";
			}
			if(document.Note != oldDocument.Note) {
				if(command!="") { command+=",";}
				command+="Note = "+DbHelper.ParamChar+"paramNote";
			}
			if(document.SigIsTopaz != oldDocument.SigIsTopaz) {
				if(command!="") { command+=",";}
				command+="SigIsTopaz = "+POut.Bool(document.SigIsTopaz)+"";
			}
			if(document.Signature != oldDocument.Signature) {
				if(command!="") { command+=",";}
				command+="Signature = "+DbHelper.ParamChar+"paramSignature";
			}
			if(document.CropX != oldDocument.CropX) {
				if(command!="") { command+=",";}
				command+="CropX = "+POut.Int(document.CropX)+"";
			}
			if(document.CropY != oldDocument.CropY) {
				if(command!="") { command+=",";}
				command+="CropY = "+POut.Int(document.CropY)+"";
			}
			if(document.CropW != oldDocument.CropW) {
				if(command!="") { command+=",";}
				command+="CropW = "+POut.Int(document.CropW)+"";
			}
			if(document.CropH != oldDocument.CropH) {
				if(command!="") { command+=",";}
				command+="CropH = "+POut.Int(document.CropH)+"";
			}
			if(document.WindowingMin != oldDocument.WindowingMin) {
				if(command!="") { command+=",";}
				command+="WindowingMin = "+POut.Int(document.WindowingMin)+"";
			}
			if(document.WindowingMax != oldDocument.WindowingMax) {
				if(command!="") { command+=",";}
				command+="WindowingMax = "+POut.Int(document.WindowingMax)+"";
			}
			if(document.MountItemNum != oldDocument.MountItemNum) {
				if(command!="") { command+=",";}
				command+="MountItemNum = "+POut.Long(document.MountItemNum)+"";
			}
			//DateTStamp can only be set by MySQL
			if(document.RawBase64 != oldDocument.RawBase64) {
				if(command!="") { command+=",";}
				command+="RawBase64 = "+DbHelper.ParamChar+"paramRawBase64";
			}
			if(document.Thumbnail != oldDocument.Thumbnail) {
				if(command!="") { command+=",";}
				command+="Thumbnail = "+DbHelper.ParamChar+"paramThumbnail";
			}
			if(document.ExternalGUID != oldDocument.ExternalGUID) {
				if(command!="") { command+=",";}
				command+="ExternalGUID = '"+POut.String(document.ExternalGUID)+"'";
			}
			if(document.ExternalSource != oldDocument.ExternalSource) {
				if(command!="") { command+=",";}
				command+="ExternalSource = '"+POut.String(document.ExternalSource.ToString())+"'";
			}
			if(document.ProvNum != oldDocument.ProvNum) {
				if(command!="") { command+=",";}
				command+="ProvNum = "+POut.Long(document.ProvNum)+"";
			}
			if(document.IsCropOld != oldDocument.IsCropOld) {
				if(command!="") { command+=",";}
				command+="IsCropOld = "+POut.Bool(document.IsCropOld)+"";
			}
			if(command=="") {
				return false;
			}
			if(document.Note==null) {
				document.Note="";
			}
			OdSqlParameter paramNote=new OdSqlParameter("paramNote",OdDbType.Text,POut.StringParam(document.Note));
			if(document.Signature==null) {
				document.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(document.Signature));
			if(document.RawBase64==null) {
				document.RawBase64="";
			}
			OdSqlParameter paramRawBase64=new OdSqlParameter("paramRawBase64",OdDbType.Text,POut.StringParam(document.RawBase64));
			if(document.Thumbnail==null) {
				document.Thumbnail="";
			}
			OdSqlParameter paramThumbnail=new OdSqlParameter("paramThumbnail",OdDbType.Text,POut.StringParam(document.Thumbnail));
			command="UPDATE document SET "+command
				+" WHERE DocNum = "+POut.Long(document.DocNum);
			Db.NonQ(command,paramNote,paramSignature,paramRawBase64,paramThumbnail);
			return true;
		}

		///<summary>Returns true if Update(Document,Document) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Document document,Document oldDocument) {
			if(document.Description != oldDocument.Description) {
				return true;
			}
			if(document.DateCreated != oldDocument.DateCreated) {
				return true;
			}
			if(document.DocCategory != oldDocument.DocCategory) {
				return true;
			}
			if(document.PatNum != oldDocument.PatNum) {
				return true;
			}
			if(document.FileName != oldDocument.FileName) {
				return true;
			}
			if(document.ImgType != oldDocument.ImgType) {
				return true;
			}
			if(document.IsFlipped != oldDocument.IsFlipped) {
				return true;
			}
			if(document.DegreesRotated != oldDocument.DegreesRotated) {
				return true;
			}
			if(document.ToothNumbers != oldDocument.ToothNumbers) {
				return true;
			}
			if(document.Note != oldDocument.Note) {
				return true;
			}
			if(document.SigIsTopaz != oldDocument.SigIsTopaz) {
				return true;
			}
			if(document.Signature != oldDocument.Signature) {
				return true;
			}
			if(document.CropX != oldDocument.CropX) {
				return true;
			}
			if(document.CropY != oldDocument.CropY) {
				return true;
			}
			if(document.CropW != oldDocument.CropW) {
				return true;
			}
			if(document.CropH != oldDocument.CropH) {
				return true;
			}
			if(document.WindowingMin != oldDocument.WindowingMin) {
				return true;
			}
			if(document.WindowingMax != oldDocument.WindowingMax) {
				return true;
			}
			if(document.MountItemNum != oldDocument.MountItemNum) {
				return true;
			}
			//DateTStamp can only be set by MySQL
			if(document.RawBase64 != oldDocument.RawBase64) {
				return true;
			}
			if(document.Thumbnail != oldDocument.Thumbnail) {
				return true;
			}
			if(document.ExternalGUID != oldDocument.ExternalGUID) {
				return true;
			}
			if(document.ExternalSource != oldDocument.ExternalSource) {
				return true;
			}
			if(document.ProvNum != oldDocument.ProvNum) {
				return true;
			}
			if(document.IsCropOld != oldDocument.IsCropOld) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Document from the database.</summary>
		public static void Delete(long docNum) {
			ClearFkey(docNum);
			string command="DELETE FROM document "
				+"WHERE DocNum = "+POut.Long(docNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many Documents from the database.</summary>
		public static void DeleteMany(List<long> listDocNums) {
			if(listDocNums==null || listDocNums.Count==0) {
				return;
			}
			ClearFkey(listDocNums);
			string command="DELETE FROM document "
				+"WHERE DocNum IN("+string.Join(",",listDocNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching docNum as FKey and are related to Document.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Document table type.</summary>
		public static void ClearFkey(long docNum) {
			if(docNum==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey="+POut.Long(docNum)+" AND PermType IN (44,89)";
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching docNums as FKey and are related to Document.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Document table type.</summary>
		public static void ClearFkey(List<long> listDocNums) {
			if(listDocNums==null || listDocNums.FindAll(x => x != 0).Count==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey IN("+String.Join(",",listDocNums.FindAll(x => x != 0))+") AND PermType IN (44,89)";
			Db.NonQ(command);
		}

	}
}