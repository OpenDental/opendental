//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ERoutingCrud {
		///<summary>Gets one ERouting object from the database using the primary key.  Returns null if not found.</summary>
		public static ERouting SelectOne(long eRoutingNum) {
			string command="SELECT * FROM erouting "
				+"WHERE ERoutingNum = "+POut.Long(eRoutingNum);
			List<ERouting> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ERouting object from the database using a query.</summary>
		public static ERouting SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERouting> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ERouting objects from the database using a query.</summary>
		public static List<ERouting> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERouting> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ERouting> TableToList(DataTable table) {
			List<ERouting> retVal=new List<ERouting>();
			ERouting eRouting;
			foreach(DataRow row in table.Rows) {
				eRouting=new ERouting();
				eRouting.ERoutingNum  = PIn.Long  (row["ERoutingNum"].ToString());
				eRouting.Description  = PIn.String(row["Description"].ToString());
				eRouting.PatNum       = PIn.Long  (row["PatNum"].ToString());
				eRouting.ClinicNum    = PIn.Long  (row["ClinicNum"].ToString());
				eRouting.SecDateTEntry= PIn.DateT (row["SecDateTEntry"].ToString());
				eRouting.IsComplete   = PIn.Bool  (row["IsComplete"].ToString());
				retVal.Add(eRouting);
			}
			return retVal;
		}

		///<summary>Converts a list of ERouting into a DataTable.</summary>
		public static DataTable ListToTable(List<ERouting> listERoutings,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ERouting";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ERoutingNum");
			table.Columns.Add("Description");
			table.Columns.Add("PatNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("SecDateTEntry");
			table.Columns.Add("IsComplete");
			foreach(ERouting eRouting in listERoutings) {
				table.Rows.Add(new object[] {
					POut.Long  (eRouting.ERoutingNum),
					            eRouting.Description,
					POut.Long  (eRouting.PatNum),
					POut.Long  (eRouting.ClinicNum),
					POut.DateT (eRouting.SecDateTEntry,false),
					POut.Bool  (eRouting.IsComplete),
				});
			}
			return table;
		}

		///<summary>Inserts one ERouting into the database.  Returns the new priKey.</summary>
		public static long Insert(ERouting eRouting) {
			return Insert(eRouting,false);
		}

		///<summary>Inserts one ERouting into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ERouting eRouting,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eRouting.ERoutingNum=ReplicationServers.GetKey("erouting","ERoutingNum");
			}
			string command="INSERT INTO erouting (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ERoutingNum,";
			}
			command+="Description,PatNum,ClinicNum,SecDateTEntry,IsComplete) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eRouting.ERoutingNum)+",";
			}
			command+=
				 "'"+POut.String(eRouting.Description)+"',"
				+    POut.Long  (eRouting.PatNum)+","
				+    POut.Long  (eRouting.ClinicNum)+","
				+    DbHelper.Now()+","
				+    POut.Bool  (eRouting.IsComplete)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eRouting.ERoutingNum=Db.NonQ(command,true,"ERoutingNum","eRouting");
			}
			return eRouting.ERoutingNum;
		}

		///<summary>Inserts one ERouting into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERouting eRouting) {
			return InsertNoCache(eRouting,false);
		}

		///<summary>Inserts one ERouting into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERouting eRouting,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO erouting (";
			if(!useExistingPK && isRandomKeys) {
				eRouting.ERoutingNum=ReplicationServers.GetKeyNoCache("erouting","ERoutingNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ERoutingNum,";
			}
			command+="Description,PatNum,ClinicNum,SecDateTEntry,IsComplete) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eRouting.ERoutingNum)+",";
			}
			command+=
				 "'"+POut.String(eRouting.Description)+"',"
				+    POut.Long  (eRouting.PatNum)+","
				+    POut.Long  (eRouting.ClinicNum)+","
				+    DbHelper.Now()+","
				+    POut.Bool  (eRouting.IsComplete)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eRouting.ERoutingNum=Db.NonQ(command,true,"ERoutingNum","eRouting");
			}
			return eRouting.ERoutingNum;
		}

		///<summary>Updates one ERouting in the database.</summary>
		public static void Update(ERouting eRouting) {
			string command="UPDATE erouting SET "
				+"Description  = '"+POut.String(eRouting.Description)+"', "
				+"PatNum       =  "+POut.Long  (eRouting.PatNum)+", "
				+"ClinicNum    =  "+POut.Long  (eRouting.ClinicNum)+", "
				//SecDateTEntry not allowed to change
				+"IsComplete   =  "+POut.Bool  (eRouting.IsComplete)+" "
				+"WHERE ERoutingNum = "+POut.Long(eRouting.ERoutingNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ERouting in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ERouting eRouting,ERouting oldERouting) {
			string command="";
			if(eRouting.Description != oldERouting.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(eRouting.Description)+"'";
			}
			if(eRouting.PatNum != oldERouting.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(eRouting.PatNum)+"";
			}
			if(eRouting.ClinicNum != oldERouting.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(eRouting.ClinicNum)+"";
			}
			//SecDateTEntry not allowed to change
			if(eRouting.IsComplete != oldERouting.IsComplete) {
				if(command!="") { command+=",";}
				command+="IsComplete = "+POut.Bool(eRouting.IsComplete)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE erouting SET "+command
				+" WHERE ERoutingNum = "+POut.Long(eRouting.ERoutingNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ERouting,ERouting) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ERouting eRouting,ERouting oldERouting) {
			if(eRouting.Description != oldERouting.Description) {
				return true;
			}
			if(eRouting.PatNum != oldERouting.PatNum) {
				return true;
			}
			if(eRouting.ClinicNum != oldERouting.ClinicNum) {
				return true;
			}
			//SecDateTEntry not allowed to change
			if(eRouting.IsComplete != oldERouting.IsComplete) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ERouting from the database.</summary>
		public static void Delete(long eRoutingNum) {
			string command="DELETE FROM erouting "
				+"WHERE ERoutingNum = "+POut.Long(eRoutingNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ERoutings from the database.</summary>
		public static void DeleteMany(List<long> listERoutingNums) {
			if(listERoutingNums==null || listERoutingNums.Count==0) {
				return;
			}
			string command="DELETE FROM erouting "
				+"WHERE ERoutingNum IN("+string.Join(",",listERoutingNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}