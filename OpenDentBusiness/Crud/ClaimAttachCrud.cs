//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ClaimAttachCrud {
		///<summary>Gets one ClaimAttach object from the database using the primary key.  Returns null if not found.</summary>
		public static ClaimAttach SelectOne(long claimAttachNum) {
			string command="SELECT * FROM claimattach "
				+"WHERE ClaimAttachNum = "+POut.Long(claimAttachNum);
			List<ClaimAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ClaimAttach object from the database using a query.</summary>
		public static ClaimAttach SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ClaimAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ClaimAttach objects from the database using a query.</summary>
		public static List<ClaimAttach> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ClaimAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ClaimAttach> TableToList(DataTable table) {
			List<ClaimAttach> retVal=new List<ClaimAttach>();
			ClaimAttach claimAttach;
			foreach(DataRow row in table.Rows) {
				claimAttach=new ClaimAttach();
				claimAttach.ClaimAttachNum   = PIn.Long  (row["ClaimAttachNum"].ToString());
				claimAttach.ClaimNum         = PIn.Long  (row["ClaimNum"].ToString());
				claimAttach.DisplayedFileName= PIn.String(row["DisplayedFileName"].ToString());
				claimAttach.ActualFileName   = PIn.String(row["ActualFileName"].ToString());
				retVal.Add(claimAttach);
			}
			return retVal;
		}

		///<summary>Converts a list of ClaimAttach into a DataTable.</summary>
		public static DataTable ListToTable(List<ClaimAttach> listClaimAttachs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ClaimAttach";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ClaimAttachNum");
			table.Columns.Add("ClaimNum");
			table.Columns.Add("DisplayedFileName");
			table.Columns.Add("ActualFileName");
			foreach(ClaimAttach claimAttach in listClaimAttachs) {
				table.Rows.Add(new object[] {
					POut.Long  (claimAttach.ClaimAttachNum),
					POut.Long  (claimAttach.ClaimNum),
					            claimAttach.DisplayedFileName,
					            claimAttach.ActualFileName,
				});
			}
			return table;
		}

		///<summary>Inserts one ClaimAttach into the database.  Returns the new priKey.</summary>
		public static long Insert(ClaimAttach claimAttach) {
			return Insert(claimAttach,false);
		}

		///<summary>Inserts one ClaimAttach into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ClaimAttach claimAttach,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				claimAttach.ClaimAttachNum=ReplicationServers.GetKey("claimattach","ClaimAttachNum");
			}
			string command="INSERT INTO claimattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ClaimAttachNum,";
			}
			command+="ClaimNum,DisplayedFileName,ActualFileName) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(claimAttach.ClaimAttachNum)+",";
			}
			command+=
				     POut.Long  (claimAttach.ClaimNum)+","
				+"'"+POut.String(claimAttach.DisplayedFileName)+"',"
				+"'"+POut.String(claimAttach.ActualFileName)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				claimAttach.ClaimAttachNum=Db.NonQ(command,true,"ClaimAttachNum","claimAttach");
			}
			return claimAttach.ClaimAttachNum;
		}

		///<summary>Inserts one ClaimAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ClaimAttach claimAttach) {
			return InsertNoCache(claimAttach,false);
		}

		///<summary>Inserts one ClaimAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ClaimAttach claimAttach,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO claimattach (";
			if(!useExistingPK && isRandomKeys) {
				claimAttach.ClaimAttachNum=ReplicationServers.GetKeyNoCache("claimattach","ClaimAttachNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ClaimAttachNum,";
			}
			command+="ClaimNum,DisplayedFileName,ActualFileName) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(claimAttach.ClaimAttachNum)+",";
			}
			command+=
				     POut.Long  (claimAttach.ClaimNum)+","
				+"'"+POut.String(claimAttach.DisplayedFileName)+"',"
				+"'"+POut.String(claimAttach.ActualFileName)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				claimAttach.ClaimAttachNum=Db.NonQ(command,true,"ClaimAttachNum","claimAttach");
			}
			return claimAttach.ClaimAttachNum;
		}

		///<summary>Updates one ClaimAttach in the database.</summary>
		public static void Update(ClaimAttach claimAttach) {
			string command="UPDATE claimattach SET "
				+"ClaimNum         =  "+POut.Long  (claimAttach.ClaimNum)+", "
				+"DisplayedFileName= '"+POut.String(claimAttach.DisplayedFileName)+"', "
				+"ActualFileName   = '"+POut.String(claimAttach.ActualFileName)+"' "
				+"WHERE ClaimAttachNum = "+POut.Long(claimAttach.ClaimAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ClaimAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ClaimAttach claimAttach,ClaimAttach oldClaimAttach) {
			string command="";
			if(claimAttach.ClaimNum != oldClaimAttach.ClaimNum) {
				if(command!="") { command+=",";}
				command+="ClaimNum = "+POut.Long(claimAttach.ClaimNum)+"";
			}
			if(claimAttach.DisplayedFileName != oldClaimAttach.DisplayedFileName) {
				if(command!="") { command+=",";}
				command+="DisplayedFileName = '"+POut.String(claimAttach.DisplayedFileName)+"'";
			}
			if(claimAttach.ActualFileName != oldClaimAttach.ActualFileName) {
				if(command!="") { command+=",";}
				command+="ActualFileName = '"+POut.String(claimAttach.ActualFileName)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE claimattach SET "+command
				+" WHERE ClaimAttachNum = "+POut.Long(claimAttach.ClaimAttachNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ClaimAttach,ClaimAttach) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ClaimAttach claimAttach,ClaimAttach oldClaimAttach) {
			if(claimAttach.ClaimNum != oldClaimAttach.ClaimNum) {
				return true;
			}
			if(claimAttach.DisplayedFileName != oldClaimAttach.DisplayedFileName) {
				return true;
			}
			if(claimAttach.ActualFileName != oldClaimAttach.ActualFileName) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ClaimAttach from the database.</summary>
		public static void Delete(long claimAttachNum) {
			string command="DELETE FROM claimattach "
				+"WHERE ClaimAttachNum = "+POut.Long(claimAttachNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ClaimAttachs from the database.</summary>
		public static void DeleteMany(List<long> listClaimAttachNums) {
			if(listClaimAttachNums==null || listClaimAttachNums.Count==0) {
				return;
			}
			string command="DELETE FROM claimattach "
				+"WHERE ClaimAttachNum IN("+string.Join(",",listClaimAttachNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}