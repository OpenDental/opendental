//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class AutoCommExcludeDateCrud {
		///<summary>Gets one AutoCommExcludeDate object from the database using the primary key.  Returns null if not found.</summary>
		public static AutoCommExcludeDate SelectOne(long autoCommExcludeDateNum) {
			string command="SELECT * FROM autocommexcludedate "
				+"WHERE AutoCommExcludeDateNum = "+POut.Long(autoCommExcludeDateNum);
			List<AutoCommExcludeDate> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AutoCommExcludeDate object from the database using a query.</summary>
		public static AutoCommExcludeDate SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AutoCommExcludeDate> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AutoCommExcludeDate objects from the database using a query.</summary>
		public static List<AutoCommExcludeDate> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AutoCommExcludeDate> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<AutoCommExcludeDate> TableToList(DataTable table) {
			List<AutoCommExcludeDate> retVal=new List<AutoCommExcludeDate>();
			AutoCommExcludeDate autoCommExcludeDate;
			foreach(DataRow row in table.Rows) {
				autoCommExcludeDate=new AutoCommExcludeDate();
				autoCommExcludeDate.AutoCommExcludeDateNum= PIn.Long  (row["AutoCommExcludeDateNum"].ToString());
				autoCommExcludeDate.ClinicNum             = PIn.Long  (row["ClinicNum"].ToString());
				autoCommExcludeDate.DateExclude           = PIn.DateT (row["DateExclude"].ToString());
				retVal.Add(autoCommExcludeDate);
			}
			return retVal;
		}

		///<summary>Converts a list of AutoCommExcludeDate into a DataTable.</summary>
		public static DataTable ListToTable(List<AutoCommExcludeDate> listAutoCommExcludeDates,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="AutoCommExcludeDate";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("AutoCommExcludeDateNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("DateExclude");
			foreach(AutoCommExcludeDate autoCommExcludeDate in listAutoCommExcludeDates) {
				table.Rows.Add(new object[] {
					POut.Long  (autoCommExcludeDate.AutoCommExcludeDateNum),
					POut.Long  (autoCommExcludeDate.ClinicNum),
					POut.DateT (autoCommExcludeDate.DateExclude,false),
				});
			}
			return table;
		}

		///<summary>Inserts one AutoCommExcludeDate into the database.  Returns the new priKey.</summary>
		public static long Insert(AutoCommExcludeDate autoCommExcludeDate) {
			return Insert(autoCommExcludeDate,false);
		}

		///<summary>Inserts one AutoCommExcludeDate into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(AutoCommExcludeDate autoCommExcludeDate,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				autoCommExcludeDate.AutoCommExcludeDateNum=ReplicationServers.GetKey("autocommexcludedate","AutoCommExcludeDateNum");
			}
			string command="INSERT INTO autocommexcludedate (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AutoCommExcludeDateNum,";
			}
			command+="ClinicNum,DateExclude) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(autoCommExcludeDate.AutoCommExcludeDateNum)+",";
			}
			command+=
				     POut.Long  (autoCommExcludeDate.ClinicNum)+","
				+    POut.DateT (autoCommExcludeDate.DateExclude)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoCommExcludeDate.AutoCommExcludeDateNum=Db.NonQ(command,true,"AutoCommExcludeDateNum","autoCommExcludeDate");
			}
			return autoCommExcludeDate.AutoCommExcludeDateNum;
		}

		///<summary>Inserts one AutoCommExcludeDate into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(AutoCommExcludeDate autoCommExcludeDate) {
			return InsertNoCache(autoCommExcludeDate,false);
		}

		///<summary>Inserts one AutoCommExcludeDate into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(AutoCommExcludeDate autoCommExcludeDate,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO autocommexcludedate (";
			if(!useExistingPK && isRandomKeys) {
				autoCommExcludeDate.AutoCommExcludeDateNum=ReplicationServers.GetKeyNoCache("autocommexcludedate","AutoCommExcludeDateNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="AutoCommExcludeDateNum,";
			}
			command+="ClinicNum,DateExclude) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(autoCommExcludeDate.AutoCommExcludeDateNum)+",";
			}
			command+=
				     POut.Long  (autoCommExcludeDate.ClinicNum)+","
				+    POut.DateT (autoCommExcludeDate.DateExclude)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoCommExcludeDate.AutoCommExcludeDateNum=Db.NonQ(command,true,"AutoCommExcludeDateNum","autoCommExcludeDate");
			}
			return autoCommExcludeDate.AutoCommExcludeDateNum;
		}

		///<summary>Updates one AutoCommExcludeDate in the database.</summary>
		public static void Update(AutoCommExcludeDate autoCommExcludeDate) {
			string command="UPDATE autocommexcludedate SET "
				+"ClinicNum             =  "+POut.Long  (autoCommExcludeDate.ClinicNum)+", "
				+"DateExclude           =  "+POut.DateT (autoCommExcludeDate.DateExclude)+" "
				+"WHERE AutoCommExcludeDateNum = "+POut.Long(autoCommExcludeDate.AutoCommExcludeDateNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AutoCommExcludeDate in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(AutoCommExcludeDate autoCommExcludeDate,AutoCommExcludeDate oldAutoCommExcludeDate) {
			string command="";
			if(autoCommExcludeDate.ClinicNum != oldAutoCommExcludeDate.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(autoCommExcludeDate.ClinicNum)+"";
			}
			if(autoCommExcludeDate.DateExclude != oldAutoCommExcludeDate.DateExclude) {
				if(command!="") { command+=",";}
				command+="DateExclude = "+POut.DateT(autoCommExcludeDate.DateExclude)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE autocommexcludedate SET "+command
				+" WHERE AutoCommExcludeDateNum = "+POut.Long(autoCommExcludeDate.AutoCommExcludeDateNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(AutoCommExcludeDate,AutoCommExcludeDate) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(AutoCommExcludeDate autoCommExcludeDate,AutoCommExcludeDate oldAutoCommExcludeDate) {
			if(autoCommExcludeDate.ClinicNum != oldAutoCommExcludeDate.ClinicNum) {
				return true;
			}
			if(autoCommExcludeDate.DateExclude != oldAutoCommExcludeDate.DateExclude) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one AutoCommExcludeDate from the database.</summary>
		public static void Delete(long autoCommExcludeDateNum) {
			string command="DELETE FROM autocommexcludedate "
				+"WHERE AutoCommExcludeDateNum = "+POut.Long(autoCommExcludeDateNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many AutoCommExcludeDates from the database.</summary>
		public static void DeleteMany(List<long> listAutoCommExcludeDateNums) {
			if(listAutoCommExcludeDateNums==null || listAutoCommExcludeDateNums.Count==0) {
				return;
			}
			string command="DELETE FROM autocommexcludedate "
				+"WHERE AutoCommExcludeDateNum IN("+string.Join(",",listAutoCommExcludeDateNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}