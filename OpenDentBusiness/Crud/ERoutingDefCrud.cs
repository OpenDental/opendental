//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ERoutingDefCrud {
		///<summary>Gets one ERoutingDef object from the database using the primary key.  Returns null if not found.</summary>
		public static ERoutingDef SelectOne(long eRoutingDefNum) {
			string command="SELECT * FROM eroutingdef "
				+"WHERE ERoutingDefNum = "+POut.Long(eRoutingDefNum);
			List<ERoutingDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ERoutingDef object from the database using a query.</summary>
		public static ERoutingDef SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERoutingDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ERoutingDef objects from the database using a query.</summary>
		public static List<ERoutingDef> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ERoutingDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ERoutingDef> TableToList(DataTable table) {
			List<ERoutingDef> retVal=new List<ERoutingDef>();
			ERoutingDef eRoutingDef;
			foreach(DataRow row in table.Rows) {
				eRoutingDef=new ERoutingDef();
				eRoutingDef.ERoutingDefNum  = PIn.Long  (row["ERoutingDefNum"].ToString());
				eRoutingDef.ClinicNum       = PIn.Long  (row["ClinicNum"].ToString());
				eRoutingDef.Description     = PIn.String(row["Description"].ToString());
				eRoutingDef.UserNumCreated  = PIn.Long  (row["UserNumCreated"].ToString());
				eRoutingDef.UserNumModified = PIn.Long  (row["UserNumModified"].ToString());
				eRoutingDef.SecDateTEntered = PIn.DateT (row["SecDateTEntered"].ToString());
				eRoutingDef.DateLastModified= PIn.DateT (row["DateLastModified"].ToString());
				retVal.Add(eRoutingDef);
			}
			return retVal;
		}

		///<summary>Converts a list of ERoutingDef into a DataTable.</summary>
		public static DataTable ListToTable(List<ERoutingDef> listERoutingDefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ERoutingDef";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ERoutingDefNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("Description");
			table.Columns.Add("UserNumCreated");
			table.Columns.Add("UserNumModified");
			table.Columns.Add("SecDateTEntered");
			table.Columns.Add("DateLastModified");
			foreach(ERoutingDef eRoutingDef in listERoutingDefs) {
				table.Rows.Add(new object[] {
					POut.Long  (eRoutingDef.ERoutingDefNum),
					POut.Long  (eRoutingDef.ClinicNum),
					            eRoutingDef.Description,
					POut.Long  (eRoutingDef.UserNumCreated),
					POut.Long  (eRoutingDef.UserNumModified),
					POut.DateT (eRoutingDef.SecDateTEntered,false),
					POut.DateT (eRoutingDef.DateLastModified,false),
				});
			}
			return table;
		}

		///<summary>Inserts one ERoutingDef into the database.  Returns the new priKey.</summary>
		public static long Insert(ERoutingDef eRoutingDef) {
			return Insert(eRoutingDef,false);
		}

		///<summary>Inserts one ERoutingDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ERoutingDef eRoutingDef,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eRoutingDef.ERoutingDefNum=ReplicationServers.GetKey("eroutingdef","ERoutingDefNum");
			}
			string command="INSERT INTO eroutingdef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ERoutingDefNum,";
			}
			command+="ClinicNum,Description,UserNumCreated,UserNumModified,SecDateTEntered,DateLastModified) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eRoutingDef.ERoutingDefNum)+",";
			}
			command+=
				     POut.Long  (eRoutingDef.ClinicNum)+","
				+"'"+POut.String(eRoutingDef.Description)+"',"
				+    POut.Long  (eRoutingDef.UserNumCreated)+","
				+    POut.Long  (eRoutingDef.UserNumModified)+","
				+    DbHelper.Now()+","
				+    POut.DateT (eRoutingDef.DateLastModified)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eRoutingDef.ERoutingDefNum=Db.NonQ(command,true,"ERoutingDefNum","eRoutingDef");
			}
			return eRoutingDef.ERoutingDefNum;
		}

		///<summary>Inserts one ERoutingDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERoutingDef eRoutingDef) {
			return InsertNoCache(eRoutingDef,false);
		}

		///<summary>Inserts one ERoutingDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ERoutingDef eRoutingDef,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO eroutingdef (";
			if(!useExistingPK && isRandomKeys) {
				eRoutingDef.ERoutingDefNum=ReplicationServers.GetKeyNoCache("eroutingdef","ERoutingDefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ERoutingDefNum,";
			}
			command+="ClinicNum,Description,UserNumCreated,UserNumModified,SecDateTEntered,DateLastModified) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eRoutingDef.ERoutingDefNum)+",";
			}
			command+=
				     POut.Long  (eRoutingDef.ClinicNum)+","
				+"'"+POut.String(eRoutingDef.Description)+"',"
				+    POut.Long  (eRoutingDef.UserNumCreated)+","
				+    POut.Long  (eRoutingDef.UserNumModified)+","
				+    DbHelper.Now()+","
				+    POut.DateT (eRoutingDef.DateLastModified)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eRoutingDef.ERoutingDefNum=Db.NonQ(command,true,"ERoutingDefNum","eRoutingDef");
			}
			return eRoutingDef.ERoutingDefNum;
		}

		///<summary>Updates one ERoutingDef in the database.</summary>
		public static void Update(ERoutingDef eRoutingDef) {
			string command="UPDATE eroutingdef SET "
				+"ClinicNum       =  "+POut.Long  (eRoutingDef.ClinicNum)+", "
				+"Description     = '"+POut.String(eRoutingDef.Description)+"', "
				+"UserNumCreated  =  "+POut.Long  (eRoutingDef.UserNumCreated)+", "
				+"UserNumModified =  "+POut.Long  (eRoutingDef.UserNumModified)+", "
				//SecDateTEntered not allowed to change
				+"DateLastModified=  "+POut.DateT (eRoutingDef.DateLastModified)+" "
				+"WHERE ERoutingDefNum = "+POut.Long(eRoutingDef.ERoutingDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ERoutingDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ERoutingDef eRoutingDef,ERoutingDef oldERoutingDef) {
			string command="";
			if(eRoutingDef.ClinicNum != oldERoutingDef.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(eRoutingDef.ClinicNum)+"";
			}
			if(eRoutingDef.Description != oldERoutingDef.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(eRoutingDef.Description)+"'";
			}
			if(eRoutingDef.UserNumCreated != oldERoutingDef.UserNumCreated) {
				if(command!="") { command+=",";}
				command+="UserNumCreated = "+POut.Long(eRoutingDef.UserNumCreated)+"";
			}
			if(eRoutingDef.UserNumModified != oldERoutingDef.UserNumModified) {
				if(command!="") { command+=",";}
				command+="UserNumModified = "+POut.Long(eRoutingDef.UserNumModified)+"";
			}
			//SecDateTEntered not allowed to change
			if(eRoutingDef.DateLastModified != oldERoutingDef.DateLastModified) {
				if(command!="") { command+=",";}
				command+="DateLastModified = "+POut.DateT(eRoutingDef.DateLastModified)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE eroutingdef SET "+command
				+" WHERE ERoutingDefNum = "+POut.Long(eRoutingDef.ERoutingDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ERoutingDef,ERoutingDef) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ERoutingDef eRoutingDef,ERoutingDef oldERoutingDef) {
			if(eRoutingDef.ClinicNum != oldERoutingDef.ClinicNum) {
				return true;
			}
			if(eRoutingDef.Description != oldERoutingDef.Description) {
				return true;
			}
			if(eRoutingDef.UserNumCreated != oldERoutingDef.UserNumCreated) {
				return true;
			}
			if(eRoutingDef.UserNumModified != oldERoutingDef.UserNumModified) {
				return true;
			}
			//SecDateTEntered not allowed to change
			if(eRoutingDef.DateLastModified != oldERoutingDef.DateLastModified) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ERoutingDef from the database.</summary>
		public static void Delete(long eRoutingDefNum) {
			string command="DELETE FROM eroutingdef "
				+"WHERE ERoutingDefNum = "+POut.Long(eRoutingDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ERoutingDefs from the database.</summary>
		public static void DeleteMany(List<long> listERoutingDefNums) {
			if(listERoutingDefNums==null || listERoutingDefNums.Count==0) {
				return;
			}
			string command="DELETE FROM eroutingdef "
				+"WHERE ERoutingDefNum IN("+string.Join(",",listERoutingDefNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}