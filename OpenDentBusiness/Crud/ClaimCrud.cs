//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ClaimCrud {
		///<summary>Gets one Claim object from the database using the primary key.  Returns null if not found.</summary>
		public static Claim SelectOne(long claimNum) {
			string command="SELECT * FROM claim "
				+"WHERE ClaimNum = "+POut.Long(claimNum);
			List<Claim> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Claim object from the database using a query.</summary>
		public static Claim SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Claim> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Claim objects from the database using a query.</summary>
		public static List<Claim> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Claim> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Claim> TableToList(DataTable table) {
			List<Claim> retVal=new List<Claim>();
			Claim claim;
			foreach(DataRow row in table.Rows) {
				claim=new Claim();
				claim.ClaimNum                      = PIn.Long  (row["ClaimNum"].ToString());
				claim.PatNum                        = PIn.Long  (row["PatNum"].ToString());
				claim.DateService                   = PIn.Date  (row["DateService"].ToString());
				claim.DateSent                      = PIn.Date  (row["DateSent"].ToString());
				claim.ClaimStatus                   = PIn.String(row["ClaimStatus"].ToString());
				claim.DateReceived                  = PIn.Date  (row["DateReceived"].ToString());
				claim.PlanNum                       = PIn.Long  (row["PlanNum"].ToString());
				claim.ProvTreat                     = PIn.Long  (row["ProvTreat"].ToString());
				claim.ClaimFee                      = PIn.Double(row["ClaimFee"].ToString());
				claim.InsPayEst                     = PIn.Double(row["InsPayEst"].ToString());
				claim.InsPayAmt                     = PIn.Double(row["InsPayAmt"].ToString());
				claim.DedApplied                    = PIn.Double(row["DedApplied"].ToString());
				claim.PreAuthString                 = PIn.String(row["PreAuthString"].ToString());
				claim.IsProsthesis                  = PIn.String(row["IsProsthesis"].ToString());
				claim.PriorDate                     = PIn.Date  (row["PriorDate"].ToString());
				claim.ReasonUnderPaid               = PIn.String(row["ReasonUnderPaid"].ToString());
				claim.ClaimNote                     = PIn.String(row["ClaimNote"].ToString());
				claim.ClaimType                     = PIn.String(row["ClaimType"].ToString());
				claim.ProvBill                      = PIn.Long  (row["ProvBill"].ToString());
				claim.ReferringProv                 = PIn.Long  (row["ReferringProv"].ToString());
				claim.RefNumString                  = PIn.String(row["RefNumString"].ToString());
				claim.PlaceService                  = (OpenDentBusiness.PlaceOfService)PIn.Int(row["PlaceService"].ToString());
				claim.AccidentRelated               = PIn.String(row["AccidentRelated"].ToString());
				claim.AccidentDate                  = PIn.Date  (row["AccidentDate"].ToString());
				claim.AccidentST                    = PIn.String(row["AccidentST"].ToString());
				claim.EmployRelated                 = (OpenDentBusiness.YN)PIn.Int(row["EmployRelated"].ToString());
				claim.IsOrtho                       = PIn.Bool  (row["IsOrtho"].ToString());
				claim.OrthoRemainM                  = PIn.Byte  (row["OrthoRemainM"].ToString());
				claim.OrthoDate                     = PIn.Date  (row["OrthoDate"].ToString());
				claim.PatRelat                      = (OpenDentBusiness.Relat)PIn.Int(row["PatRelat"].ToString());
				claim.PlanNum2                      = PIn.Long  (row["PlanNum2"].ToString());
				claim.PatRelat2                     = (OpenDentBusiness.Relat)PIn.Int(row["PatRelat2"].ToString());
				claim.WriteOff                      = PIn.Double(row["WriteOff"].ToString());
				claim.Radiographs                   = PIn.Byte  (row["Radiographs"].ToString());
				claim.ClinicNum                     = PIn.Long  (row["ClinicNum"].ToString());
				claim.ClaimForm                     = PIn.Long  (row["ClaimForm"].ToString());
				claim.AttachedImages                = PIn.Int   (row["AttachedImages"].ToString());
				claim.AttachedModels                = PIn.Int   (row["AttachedModels"].ToString());
				claim.AttachedFlags                 = PIn.String(row["AttachedFlags"].ToString());
				claim.AttachmentID                  = PIn.String(row["AttachmentID"].ToString());
				claim.CanadianMaterialsForwarded    = PIn.String(row["CanadianMaterialsForwarded"].ToString());
				claim.CanadianReferralProviderNum   = PIn.String(row["CanadianReferralProviderNum"].ToString());
				claim.CanadianReferralReason        = PIn.Byte  (row["CanadianReferralReason"].ToString());
				claim.CanadianIsInitialLower        = PIn.String(row["CanadianIsInitialLower"].ToString());
				claim.CanadianDateInitialLower      = PIn.Date  (row["CanadianDateInitialLower"].ToString());
				claim.CanadianMandProsthMaterial    = PIn.Byte  (row["CanadianMandProsthMaterial"].ToString());
				claim.CanadianIsInitialUpper        = PIn.String(row["CanadianIsInitialUpper"].ToString());
				claim.CanadianDateInitialUpper      = PIn.Date  (row["CanadianDateInitialUpper"].ToString());
				claim.CanadianMaxProsthMaterial     = PIn.Byte  (row["CanadianMaxProsthMaterial"].ToString());
				claim.InsSubNum                     = PIn.Long  (row["InsSubNum"].ToString());
				claim.InsSubNum2                    = PIn.Long  (row["InsSubNum2"].ToString());
				claim.CanadaTransRefNum             = PIn.String(row["CanadaTransRefNum"].ToString());
				claim.CanadaEstTreatStartDate       = PIn.Date  (row["CanadaEstTreatStartDate"].ToString());
				claim.CanadaInitialPayment          = PIn.Double(row["CanadaInitialPayment"].ToString());
				claim.CanadaPaymentMode             = PIn.Byte  (row["CanadaPaymentMode"].ToString());
				claim.CanadaTreatDuration           = PIn.Byte  (row["CanadaTreatDuration"].ToString());
				claim.CanadaNumAnticipatedPayments  = PIn.Byte  (row["CanadaNumAnticipatedPayments"].ToString());
				claim.CanadaAnticipatedPayAmount    = PIn.Double(row["CanadaAnticipatedPayAmount"].ToString());
				claim.PriorAuthorizationNumber      = PIn.String(row["PriorAuthorizationNumber"].ToString());
				claim.SpecialProgramCode            = (OpenDentBusiness.EnumClaimSpecialProgram)PIn.Int(row["SpecialProgramCode"].ToString());
				claim.UniformBillType               = PIn.String(row["UniformBillType"].ToString());
				claim.MedType                       = (OpenDentBusiness.EnumClaimMedType)PIn.Int(row["MedType"].ToString());
				claim.AdmissionTypeCode             = PIn.String(row["AdmissionTypeCode"].ToString());
				claim.AdmissionSourceCode           = PIn.String(row["AdmissionSourceCode"].ToString());
				claim.PatientStatusCode             = PIn.String(row["PatientStatusCode"].ToString());
				claim.CustomTracking                = PIn.Long  (row["CustomTracking"].ToString());
				claim.DateResent                    = PIn.Date  (row["DateResent"].ToString());
				claim.CorrectionType                = (OpenDentBusiness.ClaimCorrectionType)PIn.Int(row["CorrectionType"].ToString());
				claim.ClaimIdentifier               = PIn.String(row["ClaimIdentifier"].ToString());
				claim.OrigRefNum                    = PIn.String(row["OrigRefNum"].ToString());
				claim.ProvOrderOverride             = PIn.Long  (row["ProvOrderOverride"].ToString());
				claim.OrthoTotalM                   = PIn.Byte  (row["OrthoTotalM"].ToString());
				claim.ShareOfCost                   = PIn.Double(row["ShareOfCost"].ToString());
				claim.SecUserNumEntry               = PIn.Long  (row["SecUserNumEntry"].ToString());
				claim.SecDateEntry                  = PIn.Date  (row["SecDateEntry"].ToString());
				claim.SecDateTEdit                  = PIn.DateT (row["SecDateTEdit"].ToString());
				claim.OrderingReferralNum           = PIn.Long  (row["OrderingReferralNum"].ToString());
				claim.DateSentOrig                  = PIn.Date  (row["DateSentOrig"].ToString());
				claim.DateIllnessInjuryPreg         = PIn.Date  (row["DateIllnessInjuryPreg"].ToString());
				claim.DateIllnessInjuryPregQualifier= (OpenDentBusiness.DateIllnessInjuryPregQualifier)PIn.Int(row["DateIllnessInjuryPregQualifier"].ToString());
				claim.DateOther                     = PIn.Date  (row["DateOther"].ToString());
				claim.DateOtherQualifier            = (OpenDentBusiness.DateOtherQualifier)PIn.Int(row["DateOtherQualifier"].ToString());
				claim.IsOutsideLab                  = PIn.Bool  (row["IsOutsideLab"].ToString());
				retVal.Add(claim);
			}
			return retVal;
		}

		///<summary>Converts a list of Claim into a DataTable.</summary>
		public static DataTable ListToTable(List<Claim> listClaims,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Claim";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ClaimNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("DateService");
			table.Columns.Add("DateSent");
			table.Columns.Add("ClaimStatus");
			table.Columns.Add("DateReceived");
			table.Columns.Add("PlanNum");
			table.Columns.Add("ProvTreat");
			table.Columns.Add("ClaimFee");
			table.Columns.Add("InsPayEst");
			table.Columns.Add("InsPayAmt");
			table.Columns.Add("DedApplied");
			table.Columns.Add("PreAuthString");
			table.Columns.Add("IsProsthesis");
			table.Columns.Add("PriorDate");
			table.Columns.Add("ReasonUnderPaid");
			table.Columns.Add("ClaimNote");
			table.Columns.Add("ClaimType");
			table.Columns.Add("ProvBill");
			table.Columns.Add("ReferringProv");
			table.Columns.Add("RefNumString");
			table.Columns.Add("PlaceService");
			table.Columns.Add("AccidentRelated");
			table.Columns.Add("AccidentDate");
			table.Columns.Add("AccidentST");
			table.Columns.Add("EmployRelated");
			table.Columns.Add("IsOrtho");
			table.Columns.Add("OrthoRemainM");
			table.Columns.Add("OrthoDate");
			table.Columns.Add("PatRelat");
			table.Columns.Add("PlanNum2");
			table.Columns.Add("PatRelat2");
			table.Columns.Add("WriteOff");
			table.Columns.Add("Radiographs");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("ClaimForm");
			table.Columns.Add("AttachedImages");
			table.Columns.Add("AttachedModels");
			table.Columns.Add("AttachedFlags");
			table.Columns.Add("AttachmentID");
			table.Columns.Add("CanadianMaterialsForwarded");
			table.Columns.Add("CanadianReferralProviderNum");
			table.Columns.Add("CanadianReferralReason");
			table.Columns.Add("CanadianIsInitialLower");
			table.Columns.Add("CanadianDateInitialLower");
			table.Columns.Add("CanadianMandProsthMaterial");
			table.Columns.Add("CanadianIsInitialUpper");
			table.Columns.Add("CanadianDateInitialUpper");
			table.Columns.Add("CanadianMaxProsthMaterial");
			table.Columns.Add("InsSubNum");
			table.Columns.Add("InsSubNum2");
			table.Columns.Add("CanadaTransRefNum");
			table.Columns.Add("CanadaEstTreatStartDate");
			table.Columns.Add("CanadaInitialPayment");
			table.Columns.Add("CanadaPaymentMode");
			table.Columns.Add("CanadaTreatDuration");
			table.Columns.Add("CanadaNumAnticipatedPayments");
			table.Columns.Add("CanadaAnticipatedPayAmount");
			table.Columns.Add("PriorAuthorizationNumber");
			table.Columns.Add("SpecialProgramCode");
			table.Columns.Add("UniformBillType");
			table.Columns.Add("MedType");
			table.Columns.Add("AdmissionTypeCode");
			table.Columns.Add("AdmissionSourceCode");
			table.Columns.Add("PatientStatusCode");
			table.Columns.Add("CustomTracking");
			table.Columns.Add("DateResent");
			table.Columns.Add("CorrectionType");
			table.Columns.Add("ClaimIdentifier");
			table.Columns.Add("OrigRefNum");
			table.Columns.Add("ProvOrderOverride");
			table.Columns.Add("OrthoTotalM");
			table.Columns.Add("ShareOfCost");
			table.Columns.Add("SecUserNumEntry");
			table.Columns.Add("SecDateEntry");
			table.Columns.Add("SecDateTEdit");
			table.Columns.Add("OrderingReferralNum");
			table.Columns.Add("DateSentOrig");
			table.Columns.Add("DateIllnessInjuryPreg");
			table.Columns.Add("DateIllnessInjuryPregQualifier");
			table.Columns.Add("DateOther");
			table.Columns.Add("DateOtherQualifier");
			table.Columns.Add("IsOutsideLab");
			foreach(Claim claim in listClaims) {
				table.Rows.Add(new object[] {
					POut.Long  (claim.ClaimNum),
					POut.Long  (claim.PatNum),
					POut.DateT (claim.DateService,false),
					POut.DateT (claim.DateSent,false),
					            claim.ClaimStatus,
					POut.DateT (claim.DateReceived,false),
					POut.Long  (claim.PlanNum),
					POut.Long  (claim.ProvTreat),
					POut.Double(claim.ClaimFee),
					POut.Double(claim.InsPayEst),
					POut.Double(claim.InsPayAmt),
					POut.Double(claim.DedApplied),
					            claim.PreAuthString,
					            claim.IsProsthesis,
					POut.DateT (claim.PriorDate,false),
					            claim.ReasonUnderPaid,
					            claim.ClaimNote,
					            claim.ClaimType,
					POut.Long  (claim.ProvBill),
					POut.Long  (claim.ReferringProv),
					            claim.RefNumString,
					POut.Int   ((int)claim.PlaceService),
					            claim.AccidentRelated,
					POut.DateT (claim.AccidentDate,false),
					            claim.AccidentST,
					POut.Int   ((int)claim.EmployRelated),
					POut.Bool  (claim.IsOrtho),
					POut.Byte  (claim.OrthoRemainM),
					POut.DateT (claim.OrthoDate,false),
					POut.Int   ((int)claim.PatRelat),
					POut.Long  (claim.PlanNum2),
					POut.Int   ((int)claim.PatRelat2),
					POut.Double(claim.WriteOff),
					POut.Byte  (claim.Radiographs),
					POut.Long  (claim.ClinicNum),
					POut.Long  (claim.ClaimForm),
					POut.Int   (claim.AttachedImages),
					POut.Int   (claim.AttachedModels),
					            claim.AttachedFlags,
					            claim.AttachmentID,
					            claim.CanadianMaterialsForwarded,
					            claim.CanadianReferralProviderNum,
					POut.Byte  (claim.CanadianReferralReason),
					            claim.CanadianIsInitialLower,
					POut.DateT (claim.CanadianDateInitialLower,false),
					POut.Byte  (claim.CanadianMandProsthMaterial),
					            claim.CanadianIsInitialUpper,
					POut.DateT (claim.CanadianDateInitialUpper,false),
					POut.Byte  (claim.CanadianMaxProsthMaterial),
					POut.Long  (claim.InsSubNum),
					POut.Long  (claim.InsSubNum2),
					            claim.CanadaTransRefNum,
					POut.DateT (claim.CanadaEstTreatStartDate,false),
					POut.Double(claim.CanadaInitialPayment),
					POut.Byte  (claim.CanadaPaymentMode),
					POut.Byte  (claim.CanadaTreatDuration),
					POut.Byte  (claim.CanadaNumAnticipatedPayments),
					POut.Double(claim.CanadaAnticipatedPayAmount),
					            claim.PriorAuthorizationNumber,
					POut.Int   ((int)claim.SpecialProgramCode),
					            claim.UniformBillType,
					POut.Int   ((int)claim.MedType),
					            claim.AdmissionTypeCode,
					            claim.AdmissionSourceCode,
					            claim.PatientStatusCode,
					POut.Long  (claim.CustomTracking),
					POut.DateT (claim.DateResent,false),
					POut.Int   ((int)claim.CorrectionType),
					            claim.ClaimIdentifier,
					            claim.OrigRefNum,
					POut.Long  (claim.ProvOrderOverride),
					POut.Byte  (claim.OrthoTotalM),
					POut.Double(claim.ShareOfCost),
					POut.Long  (claim.SecUserNumEntry),
					POut.DateT (claim.SecDateEntry,false),
					POut.DateT (claim.SecDateTEdit,false),
					POut.Long  (claim.OrderingReferralNum),
					POut.DateT (claim.DateSentOrig,false),
					POut.DateT (claim.DateIllnessInjuryPreg,false),
					POut.Int   ((int)claim.DateIllnessInjuryPregQualifier),
					POut.DateT (claim.DateOther,false),
					POut.Int   ((int)claim.DateOtherQualifier),
					POut.Bool  (claim.IsOutsideLab),
				});
			}
			return table;
		}

		///<summary>Inserts one Claim into the database.  Returns the new priKey.</summary>
		public static long Insert(Claim claim) {
			return Insert(claim,false);
		}

		///<summary>Inserts one Claim into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Claim claim,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				claim.ClaimNum=ReplicationServers.GetKey("claim","ClaimNum");
			}
			string command="INSERT INTO claim (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ClaimNum,";
			}
			command+="PatNum,DateService,DateSent,ClaimStatus,DateReceived,PlanNum,ProvTreat,ClaimFee,InsPayEst,InsPayAmt,DedApplied,PreAuthString,IsProsthesis,PriorDate,ReasonUnderPaid,ClaimNote,ClaimType,ProvBill,ReferringProv,RefNumString,PlaceService,AccidentRelated,AccidentDate,AccidentST,EmployRelated,IsOrtho,OrthoRemainM,OrthoDate,PatRelat,PlanNum2,PatRelat2,WriteOff,Radiographs,ClinicNum,ClaimForm,AttachedImages,AttachedModels,AttachedFlags,AttachmentID,CanadianMaterialsForwarded,CanadianReferralProviderNum,CanadianReferralReason,CanadianIsInitialLower,CanadianDateInitialLower,CanadianMandProsthMaterial,CanadianIsInitialUpper,CanadianDateInitialUpper,CanadianMaxProsthMaterial,InsSubNum,InsSubNum2,CanadaTransRefNum,CanadaEstTreatStartDate,CanadaInitialPayment,CanadaPaymentMode,CanadaTreatDuration,CanadaNumAnticipatedPayments,CanadaAnticipatedPayAmount,PriorAuthorizationNumber,SpecialProgramCode,UniformBillType,MedType,AdmissionTypeCode,AdmissionSourceCode,PatientStatusCode,CustomTracking,DateResent,CorrectionType,ClaimIdentifier,OrigRefNum,ProvOrderOverride,OrthoTotalM,ShareOfCost,SecUserNumEntry,SecDateEntry,OrderingReferralNum,DateSentOrig,DateIllnessInjuryPreg,DateIllnessInjuryPregQualifier,DateOther,DateOtherQualifier,IsOutsideLab) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(claim.ClaimNum)+",";
			}
			command+=
				     POut.Long  (claim.PatNum)+","
				+    POut.Date  (claim.DateService)+","
				+    POut.Date  (claim.DateSent)+","
				+"'"+POut.String(claim.ClaimStatus)+"',"
				+    POut.Date  (claim.DateReceived)+","
				+    POut.Long  (claim.PlanNum)+","
				+    POut.Long  (claim.ProvTreat)+","
				+		 POut.Double(claim.ClaimFee)+","
				+		 POut.Double(claim.InsPayEst)+","
				+		 POut.Double(claim.InsPayAmt)+","
				+		 POut.Double(claim.DedApplied)+","
				+"'"+POut.String(claim.PreAuthString)+"',"
				+"'"+POut.String(claim.IsProsthesis)+"',"
				+    POut.Date  (claim.PriorDate)+","
				+"'"+POut.String(claim.ReasonUnderPaid)+"',"
				+"'"+POut.String(claim.ClaimNote)+"',"
				+"'"+POut.String(claim.ClaimType)+"',"
				+    POut.Long  (claim.ProvBill)+","
				+    POut.Long  (claim.ReferringProv)+","
				+"'"+POut.String(claim.RefNumString)+"',"
				+    POut.Int   ((int)claim.PlaceService)+","
				+"'"+POut.String(claim.AccidentRelated)+"',"
				+    POut.Date  (claim.AccidentDate)+","
				+"'"+POut.String(claim.AccidentST)+"',"
				+    POut.Int   ((int)claim.EmployRelated)+","
				+    POut.Bool  (claim.IsOrtho)+","
				+    POut.Byte  (claim.OrthoRemainM)+","
				+    POut.Date  (claim.OrthoDate)+","
				+    POut.Int   ((int)claim.PatRelat)+","
				+    POut.Long  (claim.PlanNum2)+","
				+    POut.Int   ((int)claim.PatRelat2)+","
				+		 POut.Double(claim.WriteOff)+","
				+    POut.Byte  (claim.Radiographs)+","
				+    POut.Long  (claim.ClinicNum)+","
				+    POut.Long  (claim.ClaimForm)+","
				+    POut.Int   (claim.AttachedImages)+","
				+    POut.Int   (claim.AttachedModels)+","
				+"'"+POut.String(claim.AttachedFlags)+"',"
				+"'"+POut.String(claim.AttachmentID)+"',"
				+"'"+POut.String(claim.CanadianMaterialsForwarded)+"',"
				+"'"+POut.String(claim.CanadianReferralProviderNum)+"',"
				+    POut.Byte  (claim.CanadianReferralReason)+","
				+"'"+POut.String(claim.CanadianIsInitialLower)+"',"
				+    POut.Date  (claim.CanadianDateInitialLower)+","
				+    POut.Byte  (claim.CanadianMandProsthMaterial)+","
				+"'"+POut.String(claim.CanadianIsInitialUpper)+"',"
				+    POut.Date  (claim.CanadianDateInitialUpper)+","
				+    POut.Byte  (claim.CanadianMaxProsthMaterial)+","
				+    POut.Long  (claim.InsSubNum)+","
				+    POut.Long  (claim.InsSubNum2)+","
				+"'"+POut.String(claim.CanadaTransRefNum)+"',"
				+    POut.Date  (claim.CanadaEstTreatStartDate)+","
				+		 POut.Double(claim.CanadaInitialPayment)+","
				+    POut.Byte  (claim.CanadaPaymentMode)+","
				+    POut.Byte  (claim.CanadaTreatDuration)+","
				+    POut.Byte  (claim.CanadaNumAnticipatedPayments)+","
				+		 POut.Double(claim.CanadaAnticipatedPayAmount)+","
				+"'"+POut.String(claim.PriorAuthorizationNumber)+"',"
				+    POut.Int   ((int)claim.SpecialProgramCode)+","
				+"'"+POut.String(claim.UniformBillType)+"',"
				+    POut.Int   ((int)claim.MedType)+","
				+"'"+POut.String(claim.AdmissionTypeCode)+"',"
				+"'"+POut.String(claim.AdmissionSourceCode)+"',"
				+"'"+POut.String(claim.PatientStatusCode)+"',"
				+    POut.Long  (claim.CustomTracking)+","
				+    POut.Date  (claim.DateResent)+","
				+    POut.Int   ((int)claim.CorrectionType)+","
				+"'"+POut.String(claim.ClaimIdentifier)+"',"
				+"'"+POut.String(claim.OrigRefNum)+"',"
				+    POut.Long  (claim.ProvOrderOverride)+","
				+    POut.Byte  (claim.OrthoTotalM)+","
				+		 POut.Double(claim.ShareOfCost)+","
				+    POut.Long  (claim.SecUserNumEntry)+","
				+    DbHelper.Now()+","
				//SecDateTEdit can only be set by MySQL
				+    POut.Long  (claim.OrderingReferralNum)+","
				+    POut.Date  (claim.DateSentOrig)+","
				+    POut.Date  (claim.DateIllnessInjuryPreg)+","
				+    POut.Int   ((int)claim.DateIllnessInjuryPregQualifier)+","
				+    POut.Date  (claim.DateOther)+","
				+    POut.Int   ((int)claim.DateOtherQualifier)+","
				+    POut.Bool  (claim.IsOutsideLab)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				claim.ClaimNum=Db.NonQ(command,true,"ClaimNum","claim");
			}
			return claim.ClaimNum;
		}

		///<summary>Inserts one Claim into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Claim claim) {
			return InsertNoCache(claim,false);
		}

		///<summary>Inserts one Claim into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Claim claim,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO claim (";
			if(!useExistingPK && isRandomKeys) {
				claim.ClaimNum=ReplicationServers.GetKeyNoCache("claim","ClaimNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ClaimNum,";
			}
			command+="PatNum,DateService,DateSent,ClaimStatus,DateReceived,PlanNum,ProvTreat,ClaimFee,InsPayEst,InsPayAmt,DedApplied,PreAuthString,IsProsthesis,PriorDate,ReasonUnderPaid,ClaimNote,ClaimType,ProvBill,ReferringProv,RefNumString,PlaceService,AccidentRelated,AccidentDate,AccidentST,EmployRelated,IsOrtho,OrthoRemainM,OrthoDate,PatRelat,PlanNum2,PatRelat2,WriteOff,Radiographs,ClinicNum,ClaimForm,AttachedImages,AttachedModels,AttachedFlags,AttachmentID,CanadianMaterialsForwarded,CanadianReferralProviderNum,CanadianReferralReason,CanadianIsInitialLower,CanadianDateInitialLower,CanadianMandProsthMaterial,CanadianIsInitialUpper,CanadianDateInitialUpper,CanadianMaxProsthMaterial,InsSubNum,InsSubNum2,CanadaTransRefNum,CanadaEstTreatStartDate,CanadaInitialPayment,CanadaPaymentMode,CanadaTreatDuration,CanadaNumAnticipatedPayments,CanadaAnticipatedPayAmount,PriorAuthorizationNumber,SpecialProgramCode,UniformBillType,MedType,AdmissionTypeCode,AdmissionSourceCode,PatientStatusCode,CustomTracking,DateResent,CorrectionType,ClaimIdentifier,OrigRefNum,ProvOrderOverride,OrthoTotalM,ShareOfCost,SecUserNumEntry,SecDateEntry,OrderingReferralNum,DateSentOrig,DateIllnessInjuryPreg,DateIllnessInjuryPregQualifier,DateOther,DateOtherQualifier,IsOutsideLab) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(claim.ClaimNum)+",";
			}
			command+=
				     POut.Long  (claim.PatNum)+","
				+    POut.Date  (claim.DateService)+","
				+    POut.Date  (claim.DateSent)+","
				+"'"+POut.String(claim.ClaimStatus)+"',"
				+    POut.Date  (claim.DateReceived)+","
				+    POut.Long  (claim.PlanNum)+","
				+    POut.Long  (claim.ProvTreat)+","
				+	   POut.Double(claim.ClaimFee)+","
				+	   POut.Double(claim.InsPayEst)+","
				+	   POut.Double(claim.InsPayAmt)+","
				+	   POut.Double(claim.DedApplied)+","
				+"'"+POut.String(claim.PreAuthString)+"',"
				+"'"+POut.String(claim.IsProsthesis)+"',"
				+    POut.Date  (claim.PriorDate)+","
				+"'"+POut.String(claim.ReasonUnderPaid)+"',"
				+"'"+POut.String(claim.ClaimNote)+"',"
				+"'"+POut.String(claim.ClaimType)+"',"
				+    POut.Long  (claim.ProvBill)+","
				+    POut.Long  (claim.ReferringProv)+","
				+"'"+POut.String(claim.RefNumString)+"',"
				+    POut.Int   ((int)claim.PlaceService)+","
				+"'"+POut.String(claim.AccidentRelated)+"',"
				+    POut.Date  (claim.AccidentDate)+","
				+"'"+POut.String(claim.AccidentST)+"',"
				+    POut.Int   ((int)claim.EmployRelated)+","
				+    POut.Bool  (claim.IsOrtho)+","
				+    POut.Byte  (claim.OrthoRemainM)+","
				+    POut.Date  (claim.OrthoDate)+","
				+    POut.Int   ((int)claim.PatRelat)+","
				+    POut.Long  (claim.PlanNum2)+","
				+    POut.Int   ((int)claim.PatRelat2)+","
				+	   POut.Double(claim.WriteOff)+","
				+    POut.Byte  (claim.Radiographs)+","
				+    POut.Long  (claim.ClinicNum)+","
				+    POut.Long  (claim.ClaimForm)+","
				+    POut.Int   (claim.AttachedImages)+","
				+    POut.Int   (claim.AttachedModels)+","
				+"'"+POut.String(claim.AttachedFlags)+"',"
				+"'"+POut.String(claim.AttachmentID)+"',"
				+"'"+POut.String(claim.CanadianMaterialsForwarded)+"',"
				+"'"+POut.String(claim.CanadianReferralProviderNum)+"',"
				+    POut.Byte  (claim.CanadianReferralReason)+","
				+"'"+POut.String(claim.CanadianIsInitialLower)+"',"
				+    POut.Date  (claim.CanadianDateInitialLower)+","
				+    POut.Byte  (claim.CanadianMandProsthMaterial)+","
				+"'"+POut.String(claim.CanadianIsInitialUpper)+"',"
				+    POut.Date  (claim.CanadianDateInitialUpper)+","
				+    POut.Byte  (claim.CanadianMaxProsthMaterial)+","
				+    POut.Long  (claim.InsSubNum)+","
				+    POut.Long  (claim.InsSubNum2)+","
				+"'"+POut.String(claim.CanadaTransRefNum)+"',"
				+    POut.Date  (claim.CanadaEstTreatStartDate)+","
				+	   POut.Double(claim.CanadaInitialPayment)+","
				+    POut.Byte  (claim.CanadaPaymentMode)+","
				+    POut.Byte  (claim.CanadaTreatDuration)+","
				+    POut.Byte  (claim.CanadaNumAnticipatedPayments)+","
				+	   POut.Double(claim.CanadaAnticipatedPayAmount)+","
				+"'"+POut.String(claim.PriorAuthorizationNumber)+"',"
				+    POut.Int   ((int)claim.SpecialProgramCode)+","
				+"'"+POut.String(claim.UniformBillType)+"',"
				+    POut.Int   ((int)claim.MedType)+","
				+"'"+POut.String(claim.AdmissionTypeCode)+"',"
				+"'"+POut.String(claim.AdmissionSourceCode)+"',"
				+"'"+POut.String(claim.PatientStatusCode)+"',"
				+    POut.Long  (claim.CustomTracking)+","
				+    POut.Date  (claim.DateResent)+","
				+    POut.Int   ((int)claim.CorrectionType)+","
				+"'"+POut.String(claim.ClaimIdentifier)+"',"
				+"'"+POut.String(claim.OrigRefNum)+"',"
				+    POut.Long  (claim.ProvOrderOverride)+","
				+    POut.Byte  (claim.OrthoTotalM)+","
				+	   POut.Double(claim.ShareOfCost)+","
				+    POut.Long  (claim.SecUserNumEntry)+","
				+    DbHelper.Now()+","
				//SecDateTEdit can only be set by MySQL
				+    POut.Long  (claim.OrderingReferralNum)+","
				+    POut.Date  (claim.DateSentOrig)+","
				+    POut.Date  (claim.DateIllnessInjuryPreg)+","
				+    POut.Int   ((int)claim.DateIllnessInjuryPregQualifier)+","
				+    POut.Date  (claim.DateOther)+","
				+    POut.Int   ((int)claim.DateOtherQualifier)+","
				+    POut.Bool  (claim.IsOutsideLab)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				claim.ClaimNum=Db.NonQ(command,true,"ClaimNum","claim");
			}
			return claim.ClaimNum;
		}

		///<summary>Updates one Claim in the database.</summary>
		public static void Update(Claim claim) {
			string command="UPDATE claim SET "
				+"PatNum                        =  "+POut.Long  (claim.PatNum)+", "
				+"DateService                   =  "+POut.Date  (claim.DateService)+", "
				+"DateSent                      =  "+POut.Date  (claim.DateSent)+", "
				+"ClaimStatus                   = '"+POut.String(claim.ClaimStatus)+"', "
				+"DateReceived                  =  "+POut.Date  (claim.DateReceived)+", "
				+"PlanNum                       =  "+POut.Long  (claim.PlanNum)+", "
				+"ProvTreat                     =  "+POut.Long  (claim.ProvTreat)+", "
				+"ClaimFee                      =  "+POut.Double(claim.ClaimFee)+", "
				+"InsPayEst                     =  "+POut.Double(claim.InsPayEst)+", "
				+"InsPayAmt                     =  "+POut.Double(claim.InsPayAmt)+", "
				+"DedApplied                    =  "+POut.Double(claim.DedApplied)+", "
				+"PreAuthString                 = '"+POut.String(claim.PreAuthString)+"', "
				+"IsProsthesis                  = '"+POut.String(claim.IsProsthesis)+"', "
				+"PriorDate                     =  "+POut.Date  (claim.PriorDate)+", "
				+"ReasonUnderPaid               = '"+POut.String(claim.ReasonUnderPaid)+"', "
				+"ClaimNote                     = '"+POut.String(claim.ClaimNote)+"', "
				+"ClaimType                     = '"+POut.String(claim.ClaimType)+"', "
				+"ProvBill                      =  "+POut.Long  (claim.ProvBill)+", "
				+"ReferringProv                 =  "+POut.Long  (claim.ReferringProv)+", "
				+"RefNumString                  = '"+POut.String(claim.RefNumString)+"', "
				+"PlaceService                  =  "+POut.Int   ((int)claim.PlaceService)+", "
				+"AccidentRelated               = '"+POut.String(claim.AccidentRelated)+"', "
				+"AccidentDate                  =  "+POut.Date  (claim.AccidentDate)+", "
				+"AccidentST                    = '"+POut.String(claim.AccidentST)+"', "
				+"EmployRelated                 =  "+POut.Int   ((int)claim.EmployRelated)+", "
				+"IsOrtho                       =  "+POut.Bool  (claim.IsOrtho)+", "
				+"OrthoRemainM                  =  "+POut.Byte  (claim.OrthoRemainM)+", "
				+"OrthoDate                     =  "+POut.Date  (claim.OrthoDate)+", "
				+"PatRelat                      =  "+POut.Int   ((int)claim.PatRelat)+", "
				+"PlanNum2                      =  "+POut.Long  (claim.PlanNum2)+", "
				+"PatRelat2                     =  "+POut.Int   ((int)claim.PatRelat2)+", "
				+"WriteOff                      =  "+POut.Double(claim.WriteOff)+", "
				+"Radiographs                   =  "+POut.Byte  (claim.Radiographs)+", "
				+"ClinicNum                     =  "+POut.Long  (claim.ClinicNum)+", "
				+"ClaimForm                     =  "+POut.Long  (claim.ClaimForm)+", "
				+"AttachedImages                =  "+POut.Int   (claim.AttachedImages)+", "
				+"AttachedModels                =  "+POut.Int   (claim.AttachedModels)+", "
				+"AttachedFlags                 = '"+POut.String(claim.AttachedFlags)+"', "
				+"AttachmentID                  = '"+POut.String(claim.AttachmentID)+"', "
				+"CanadianMaterialsForwarded    = '"+POut.String(claim.CanadianMaterialsForwarded)+"', "
				+"CanadianReferralProviderNum   = '"+POut.String(claim.CanadianReferralProviderNum)+"', "
				+"CanadianReferralReason        =  "+POut.Byte  (claim.CanadianReferralReason)+", "
				+"CanadianIsInitialLower        = '"+POut.String(claim.CanadianIsInitialLower)+"', "
				+"CanadianDateInitialLower      =  "+POut.Date  (claim.CanadianDateInitialLower)+", "
				+"CanadianMandProsthMaterial    =  "+POut.Byte  (claim.CanadianMandProsthMaterial)+", "
				+"CanadianIsInitialUpper        = '"+POut.String(claim.CanadianIsInitialUpper)+"', "
				+"CanadianDateInitialUpper      =  "+POut.Date  (claim.CanadianDateInitialUpper)+", "
				+"CanadianMaxProsthMaterial     =  "+POut.Byte  (claim.CanadianMaxProsthMaterial)+", "
				+"InsSubNum                     =  "+POut.Long  (claim.InsSubNum)+", "
				+"InsSubNum2                    =  "+POut.Long  (claim.InsSubNum2)+", "
				+"CanadaTransRefNum             = '"+POut.String(claim.CanadaTransRefNum)+"', "
				+"CanadaEstTreatStartDate       =  "+POut.Date  (claim.CanadaEstTreatStartDate)+", "
				+"CanadaInitialPayment          =  "+POut.Double(claim.CanadaInitialPayment)+", "
				+"CanadaPaymentMode             =  "+POut.Byte  (claim.CanadaPaymentMode)+", "
				+"CanadaTreatDuration           =  "+POut.Byte  (claim.CanadaTreatDuration)+", "
				+"CanadaNumAnticipatedPayments  =  "+POut.Byte  (claim.CanadaNumAnticipatedPayments)+", "
				+"CanadaAnticipatedPayAmount    =  "+POut.Double(claim.CanadaAnticipatedPayAmount)+", "
				+"PriorAuthorizationNumber      = '"+POut.String(claim.PriorAuthorizationNumber)+"', "
				+"SpecialProgramCode            =  "+POut.Int   ((int)claim.SpecialProgramCode)+", "
				+"UniformBillType               = '"+POut.String(claim.UniformBillType)+"', "
				+"MedType                       =  "+POut.Int   ((int)claim.MedType)+", "
				+"AdmissionTypeCode             = '"+POut.String(claim.AdmissionTypeCode)+"', "
				+"AdmissionSourceCode           = '"+POut.String(claim.AdmissionSourceCode)+"', "
				+"PatientStatusCode             = '"+POut.String(claim.PatientStatusCode)+"', "
				+"CustomTracking                =  "+POut.Long  (claim.CustomTracking)+", "
				+"DateResent                    =  "+POut.Date  (claim.DateResent)+", "
				+"CorrectionType                =  "+POut.Int   ((int)claim.CorrectionType)+", "
				+"ClaimIdentifier               = '"+POut.String(claim.ClaimIdentifier)+"', "
				+"OrigRefNum                    = '"+POut.String(claim.OrigRefNum)+"', "
				+"ProvOrderOverride             =  "+POut.Long  (claim.ProvOrderOverride)+", "
				+"OrthoTotalM                   =  "+POut.Byte  (claim.OrthoTotalM)+", "
				+"ShareOfCost                   =  "+POut.Double(claim.ShareOfCost)+", "
				//SecUserNumEntry excluded from update
				//SecDateEntry not allowed to change
				//SecDateTEdit can only be set by MySQL
				+"OrderingReferralNum           =  "+POut.Long  (claim.OrderingReferralNum)+", "
				+"DateSentOrig                  =  "+POut.Date  (claim.DateSentOrig)+", "
				+"DateIllnessInjuryPreg         =  "+POut.Date  (claim.DateIllnessInjuryPreg)+", "
				+"DateIllnessInjuryPregQualifier=  "+POut.Int   ((int)claim.DateIllnessInjuryPregQualifier)+", "
				+"DateOther                     =  "+POut.Date  (claim.DateOther)+", "
				+"DateOtherQualifier            =  "+POut.Int   ((int)claim.DateOtherQualifier)+", "
				+"IsOutsideLab                  =  "+POut.Bool  (claim.IsOutsideLab)+" "
				+"WHERE ClaimNum = "+POut.Long(claim.ClaimNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Claim in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Claim claim,Claim oldClaim) {
			string command="";
			if(claim.PatNum != oldClaim.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(claim.PatNum)+"";
			}
			if(claim.DateService.Date != oldClaim.DateService.Date) {
				if(command!="") { command+=",";}
				command+="DateService = "+POut.Date(claim.DateService)+"";
			}
			if(claim.DateSent.Date != oldClaim.DateSent.Date) {
				if(command!="") { command+=",";}
				command+="DateSent = "+POut.Date(claim.DateSent)+"";
			}
			if(claim.ClaimStatus != oldClaim.ClaimStatus) {
				if(command!="") { command+=",";}
				command+="ClaimStatus = '"+POut.String(claim.ClaimStatus)+"'";
			}
			if(claim.DateReceived.Date != oldClaim.DateReceived.Date) {
				if(command!="") { command+=",";}
				command+="DateReceived = "+POut.Date(claim.DateReceived)+"";
			}
			if(claim.PlanNum != oldClaim.PlanNum) {
				if(command!="") { command+=",";}
				command+="PlanNum = "+POut.Long(claim.PlanNum)+"";
			}
			if(claim.ProvTreat != oldClaim.ProvTreat) {
				if(command!="") { command+=",";}
				command+="ProvTreat = "+POut.Long(claim.ProvTreat)+"";
			}
			if(claim.ClaimFee != oldClaim.ClaimFee) {
				if(command!="") { command+=",";}
				command+="ClaimFee = "+POut.Double(claim.ClaimFee)+"";
			}
			if(claim.InsPayEst != oldClaim.InsPayEst) {
				if(command!="") { command+=",";}
				command+="InsPayEst = "+POut.Double(claim.InsPayEst)+"";
			}
			if(claim.InsPayAmt != oldClaim.InsPayAmt) {
				if(command!="") { command+=",";}
				command+="InsPayAmt = "+POut.Double(claim.InsPayAmt)+"";
			}
			if(claim.DedApplied != oldClaim.DedApplied) {
				if(command!="") { command+=",";}
				command+="DedApplied = "+POut.Double(claim.DedApplied)+"";
			}
			if(claim.PreAuthString != oldClaim.PreAuthString) {
				if(command!="") { command+=",";}
				command+="PreAuthString = '"+POut.String(claim.PreAuthString)+"'";
			}
			if(claim.IsProsthesis != oldClaim.IsProsthesis) {
				if(command!="") { command+=",";}
				command+="IsProsthesis = '"+POut.String(claim.IsProsthesis)+"'";
			}
			if(claim.PriorDate.Date != oldClaim.PriorDate.Date) {
				if(command!="") { command+=",";}
				command+="PriorDate = "+POut.Date(claim.PriorDate)+"";
			}
			if(claim.ReasonUnderPaid != oldClaim.ReasonUnderPaid) {
				if(command!="") { command+=",";}
				command+="ReasonUnderPaid = '"+POut.String(claim.ReasonUnderPaid)+"'";
			}
			if(claim.ClaimNote != oldClaim.ClaimNote) {
				if(command!="") { command+=",";}
				command+="ClaimNote = '"+POut.String(claim.ClaimNote)+"'";
			}
			if(claim.ClaimType != oldClaim.ClaimType) {
				if(command!="") { command+=",";}
				command+="ClaimType = '"+POut.String(claim.ClaimType)+"'";
			}
			if(claim.ProvBill != oldClaim.ProvBill) {
				if(command!="") { command+=",";}
				command+="ProvBill = "+POut.Long(claim.ProvBill)+"";
			}
			if(claim.ReferringProv != oldClaim.ReferringProv) {
				if(command!="") { command+=",";}
				command+="ReferringProv = "+POut.Long(claim.ReferringProv)+"";
			}
			if(claim.RefNumString != oldClaim.RefNumString) {
				if(command!="") { command+=",";}
				command+="RefNumString = '"+POut.String(claim.RefNumString)+"'";
			}
			if(claim.PlaceService != oldClaim.PlaceService) {
				if(command!="") { command+=",";}
				command+="PlaceService = "+POut.Int   ((int)claim.PlaceService)+"";
			}
			if(claim.AccidentRelated != oldClaim.AccidentRelated) {
				if(command!="") { command+=",";}
				command+="AccidentRelated = '"+POut.String(claim.AccidentRelated)+"'";
			}
			if(claim.AccidentDate.Date != oldClaim.AccidentDate.Date) {
				if(command!="") { command+=",";}
				command+="AccidentDate = "+POut.Date(claim.AccidentDate)+"";
			}
			if(claim.AccidentST != oldClaim.AccidentST) {
				if(command!="") { command+=",";}
				command+="AccidentST = '"+POut.String(claim.AccidentST)+"'";
			}
			if(claim.EmployRelated != oldClaim.EmployRelated) {
				if(command!="") { command+=",";}
				command+="EmployRelated = "+POut.Int   ((int)claim.EmployRelated)+"";
			}
			if(claim.IsOrtho != oldClaim.IsOrtho) {
				if(command!="") { command+=",";}
				command+="IsOrtho = "+POut.Bool(claim.IsOrtho)+"";
			}
			if(claim.OrthoRemainM != oldClaim.OrthoRemainM) {
				if(command!="") { command+=",";}
				command+="OrthoRemainM = "+POut.Byte(claim.OrthoRemainM)+"";
			}
			if(claim.OrthoDate.Date != oldClaim.OrthoDate.Date) {
				if(command!="") { command+=",";}
				command+="OrthoDate = "+POut.Date(claim.OrthoDate)+"";
			}
			if(claim.PatRelat != oldClaim.PatRelat) {
				if(command!="") { command+=",";}
				command+="PatRelat = "+POut.Int   ((int)claim.PatRelat)+"";
			}
			if(claim.PlanNum2 != oldClaim.PlanNum2) {
				if(command!="") { command+=",";}
				command+="PlanNum2 = "+POut.Long(claim.PlanNum2)+"";
			}
			if(claim.PatRelat2 != oldClaim.PatRelat2) {
				if(command!="") { command+=",";}
				command+="PatRelat2 = "+POut.Int   ((int)claim.PatRelat2)+"";
			}
			if(claim.WriteOff != oldClaim.WriteOff) {
				if(command!="") { command+=",";}
				command+="WriteOff = "+POut.Double(claim.WriteOff)+"";
			}
			if(claim.Radiographs != oldClaim.Radiographs) {
				if(command!="") { command+=",";}
				command+="Radiographs = "+POut.Byte(claim.Radiographs)+"";
			}
			if(claim.ClinicNum != oldClaim.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(claim.ClinicNum)+"";
			}
			if(claim.ClaimForm != oldClaim.ClaimForm) {
				if(command!="") { command+=",";}
				command+="ClaimForm = "+POut.Long(claim.ClaimForm)+"";
			}
			if(claim.AttachedImages != oldClaim.AttachedImages) {
				if(command!="") { command+=",";}
				command+="AttachedImages = "+POut.Int(claim.AttachedImages)+"";
			}
			if(claim.AttachedModels != oldClaim.AttachedModels) {
				if(command!="") { command+=",";}
				command+="AttachedModels = "+POut.Int(claim.AttachedModels)+"";
			}
			if(claim.AttachedFlags != oldClaim.AttachedFlags) {
				if(command!="") { command+=",";}
				command+="AttachedFlags = '"+POut.String(claim.AttachedFlags)+"'";
			}
			if(claim.AttachmentID != oldClaim.AttachmentID) {
				if(command!="") { command+=",";}
				command+="AttachmentID = '"+POut.String(claim.AttachmentID)+"'";
			}
			if(claim.CanadianMaterialsForwarded != oldClaim.CanadianMaterialsForwarded) {
				if(command!="") { command+=",";}
				command+="CanadianMaterialsForwarded = '"+POut.String(claim.CanadianMaterialsForwarded)+"'";
			}
			if(claim.CanadianReferralProviderNum != oldClaim.CanadianReferralProviderNum) {
				if(command!="") { command+=",";}
				command+="CanadianReferralProviderNum = '"+POut.String(claim.CanadianReferralProviderNum)+"'";
			}
			if(claim.CanadianReferralReason != oldClaim.CanadianReferralReason) {
				if(command!="") { command+=",";}
				command+="CanadianReferralReason = "+POut.Byte(claim.CanadianReferralReason)+"";
			}
			if(claim.CanadianIsInitialLower != oldClaim.CanadianIsInitialLower) {
				if(command!="") { command+=",";}
				command+="CanadianIsInitialLower = '"+POut.String(claim.CanadianIsInitialLower)+"'";
			}
			if(claim.CanadianDateInitialLower.Date != oldClaim.CanadianDateInitialLower.Date) {
				if(command!="") { command+=",";}
				command+="CanadianDateInitialLower = "+POut.Date(claim.CanadianDateInitialLower)+"";
			}
			if(claim.CanadianMandProsthMaterial != oldClaim.CanadianMandProsthMaterial) {
				if(command!="") { command+=",";}
				command+="CanadianMandProsthMaterial = "+POut.Byte(claim.CanadianMandProsthMaterial)+"";
			}
			if(claim.CanadianIsInitialUpper != oldClaim.CanadianIsInitialUpper) {
				if(command!="") { command+=",";}
				command+="CanadianIsInitialUpper = '"+POut.String(claim.CanadianIsInitialUpper)+"'";
			}
			if(claim.CanadianDateInitialUpper.Date != oldClaim.CanadianDateInitialUpper.Date) {
				if(command!="") { command+=",";}
				command+="CanadianDateInitialUpper = "+POut.Date(claim.CanadianDateInitialUpper)+"";
			}
			if(claim.CanadianMaxProsthMaterial != oldClaim.CanadianMaxProsthMaterial) {
				if(command!="") { command+=",";}
				command+="CanadianMaxProsthMaterial = "+POut.Byte(claim.CanadianMaxProsthMaterial)+"";
			}
			if(claim.InsSubNum != oldClaim.InsSubNum) {
				if(command!="") { command+=",";}
				command+="InsSubNum = "+POut.Long(claim.InsSubNum)+"";
			}
			if(claim.InsSubNum2 != oldClaim.InsSubNum2) {
				if(command!="") { command+=",";}
				command+="InsSubNum2 = "+POut.Long(claim.InsSubNum2)+"";
			}
			if(claim.CanadaTransRefNum != oldClaim.CanadaTransRefNum) {
				if(command!="") { command+=",";}
				command+="CanadaTransRefNum = '"+POut.String(claim.CanadaTransRefNum)+"'";
			}
			if(claim.CanadaEstTreatStartDate.Date != oldClaim.CanadaEstTreatStartDate.Date) {
				if(command!="") { command+=",";}
				command+="CanadaEstTreatStartDate = "+POut.Date(claim.CanadaEstTreatStartDate)+"";
			}
			if(claim.CanadaInitialPayment != oldClaim.CanadaInitialPayment) {
				if(command!="") { command+=",";}
				command+="CanadaInitialPayment = "+POut.Double(claim.CanadaInitialPayment)+"";
			}
			if(claim.CanadaPaymentMode != oldClaim.CanadaPaymentMode) {
				if(command!="") { command+=",";}
				command+="CanadaPaymentMode = "+POut.Byte(claim.CanadaPaymentMode)+"";
			}
			if(claim.CanadaTreatDuration != oldClaim.CanadaTreatDuration) {
				if(command!="") { command+=",";}
				command+="CanadaTreatDuration = "+POut.Byte(claim.CanadaTreatDuration)+"";
			}
			if(claim.CanadaNumAnticipatedPayments != oldClaim.CanadaNumAnticipatedPayments) {
				if(command!="") { command+=",";}
				command+="CanadaNumAnticipatedPayments = "+POut.Byte(claim.CanadaNumAnticipatedPayments)+"";
			}
			if(claim.CanadaAnticipatedPayAmount != oldClaim.CanadaAnticipatedPayAmount) {
				if(command!="") { command+=",";}
				command+="CanadaAnticipatedPayAmount = "+POut.Double(claim.CanadaAnticipatedPayAmount)+"";
			}
			if(claim.PriorAuthorizationNumber != oldClaim.PriorAuthorizationNumber) {
				if(command!="") { command+=",";}
				command+="PriorAuthorizationNumber = '"+POut.String(claim.PriorAuthorizationNumber)+"'";
			}
			if(claim.SpecialProgramCode != oldClaim.SpecialProgramCode) {
				if(command!="") { command+=",";}
				command+="SpecialProgramCode = "+POut.Int   ((int)claim.SpecialProgramCode)+"";
			}
			if(claim.UniformBillType != oldClaim.UniformBillType) {
				if(command!="") { command+=",";}
				command+="UniformBillType = '"+POut.String(claim.UniformBillType)+"'";
			}
			if(claim.MedType != oldClaim.MedType) {
				if(command!="") { command+=",";}
				command+="MedType = "+POut.Int   ((int)claim.MedType)+"";
			}
			if(claim.AdmissionTypeCode != oldClaim.AdmissionTypeCode) {
				if(command!="") { command+=",";}
				command+="AdmissionTypeCode = '"+POut.String(claim.AdmissionTypeCode)+"'";
			}
			if(claim.AdmissionSourceCode != oldClaim.AdmissionSourceCode) {
				if(command!="") { command+=",";}
				command+="AdmissionSourceCode = '"+POut.String(claim.AdmissionSourceCode)+"'";
			}
			if(claim.PatientStatusCode != oldClaim.PatientStatusCode) {
				if(command!="") { command+=",";}
				command+="PatientStatusCode = '"+POut.String(claim.PatientStatusCode)+"'";
			}
			if(claim.CustomTracking != oldClaim.CustomTracking) {
				if(command!="") { command+=",";}
				command+="CustomTracking = "+POut.Long(claim.CustomTracking)+"";
			}
			if(claim.DateResent.Date != oldClaim.DateResent.Date) {
				if(command!="") { command+=",";}
				command+="DateResent = "+POut.Date(claim.DateResent)+"";
			}
			if(claim.CorrectionType != oldClaim.CorrectionType) {
				if(command!="") { command+=",";}
				command+="CorrectionType = "+POut.Int   ((int)claim.CorrectionType)+"";
			}
			if(claim.ClaimIdentifier != oldClaim.ClaimIdentifier) {
				if(command!="") { command+=",";}
				command+="ClaimIdentifier = '"+POut.String(claim.ClaimIdentifier)+"'";
			}
			if(claim.OrigRefNum != oldClaim.OrigRefNum) {
				if(command!="") { command+=",";}
				command+="OrigRefNum = '"+POut.String(claim.OrigRefNum)+"'";
			}
			if(claim.ProvOrderOverride != oldClaim.ProvOrderOverride) {
				if(command!="") { command+=",";}
				command+="ProvOrderOverride = "+POut.Long(claim.ProvOrderOverride)+"";
			}
			if(claim.OrthoTotalM != oldClaim.OrthoTotalM) {
				if(command!="") { command+=",";}
				command+="OrthoTotalM = "+POut.Byte(claim.OrthoTotalM)+"";
			}
			if(claim.ShareOfCost != oldClaim.ShareOfCost) {
				if(command!="") { command+=",";}
				command+="ShareOfCost = "+POut.Double(claim.ShareOfCost)+"";
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(claim.OrderingReferralNum != oldClaim.OrderingReferralNum) {
				if(command!="") { command+=",";}
				command+="OrderingReferralNum = "+POut.Long(claim.OrderingReferralNum)+"";
			}
			if(claim.DateSentOrig.Date != oldClaim.DateSentOrig.Date) {
				if(command!="") { command+=",";}
				command+="DateSentOrig = "+POut.Date(claim.DateSentOrig)+"";
			}
			if(claim.DateIllnessInjuryPreg.Date != oldClaim.DateIllnessInjuryPreg.Date) {
				if(command!="") { command+=",";}
				command+="DateIllnessInjuryPreg = "+POut.Date(claim.DateIllnessInjuryPreg)+"";
			}
			if(claim.DateIllnessInjuryPregQualifier != oldClaim.DateIllnessInjuryPregQualifier) {
				if(command!="") { command+=",";}
				command+="DateIllnessInjuryPregQualifier = "+POut.Int   ((int)claim.DateIllnessInjuryPregQualifier)+"";
			}
			if(claim.DateOther.Date != oldClaim.DateOther.Date) {
				if(command!="") { command+=",";}
				command+="DateOther = "+POut.Date(claim.DateOther)+"";
			}
			if(claim.DateOtherQualifier != oldClaim.DateOtherQualifier) {
				if(command!="") { command+=",";}
				command+="DateOtherQualifier = "+POut.Int   ((int)claim.DateOtherQualifier)+"";
			}
			if(claim.IsOutsideLab != oldClaim.IsOutsideLab) {
				if(command!="") { command+=",";}
				command+="IsOutsideLab = "+POut.Bool(claim.IsOutsideLab)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE claim SET "+command
				+" WHERE ClaimNum = "+POut.Long(claim.ClaimNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(Claim,Claim) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Claim claim,Claim oldClaim) {
			if(claim.PatNum != oldClaim.PatNum) {
				return true;
			}
			if(claim.DateService.Date != oldClaim.DateService.Date) {
				return true;
			}
			if(claim.DateSent.Date != oldClaim.DateSent.Date) {
				return true;
			}
			if(claim.ClaimStatus != oldClaim.ClaimStatus) {
				return true;
			}
			if(claim.DateReceived.Date != oldClaim.DateReceived.Date) {
				return true;
			}
			if(claim.PlanNum != oldClaim.PlanNum) {
				return true;
			}
			if(claim.ProvTreat != oldClaim.ProvTreat) {
				return true;
			}
			if(claim.ClaimFee != oldClaim.ClaimFee) {
				return true;
			}
			if(claim.InsPayEst != oldClaim.InsPayEst) {
				return true;
			}
			if(claim.InsPayAmt != oldClaim.InsPayAmt) {
				return true;
			}
			if(claim.DedApplied != oldClaim.DedApplied) {
				return true;
			}
			if(claim.PreAuthString != oldClaim.PreAuthString) {
				return true;
			}
			if(claim.IsProsthesis != oldClaim.IsProsthesis) {
				return true;
			}
			if(claim.PriorDate.Date != oldClaim.PriorDate.Date) {
				return true;
			}
			if(claim.ReasonUnderPaid != oldClaim.ReasonUnderPaid) {
				return true;
			}
			if(claim.ClaimNote != oldClaim.ClaimNote) {
				return true;
			}
			if(claim.ClaimType != oldClaim.ClaimType) {
				return true;
			}
			if(claim.ProvBill != oldClaim.ProvBill) {
				return true;
			}
			if(claim.ReferringProv != oldClaim.ReferringProv) {
				return true;
			}
			if(claim.RefNumString != oldClaim.RefNumString) {
				return true;
			}
			if(claim.PlaceService != oldClaim.PlaceService) {
				return true;
			}
			if(claim.AccidentRelated != oldClaim.AccidentRelated) {
				return true;
			}
			if(claim.AccidentDate.Date != oldClaim.AccidentDate.Date) {
				return true;
			}
			if(claim.AccidentST != oldClaim.AccidentST) {
				return true;
			}
			if(claim.EmployRelated != oldClaim.EmployRelated) {
				return true;
			}
			if(claim.IsOrtho != oldClaim.IsOrtho) {
				return true;
			}
			if(claim.OrthoRemainM != oldClaim.OrthoRemainM) {
				return true;
			}
			if(claim.OrthoDate.Date != oldClaim.OrthoDate.Date) {
				return true;
			}
			if(claim.PatRelat != oldClaim.PatRelat) {
				return true;
			}
			if(claim.PlanNum2 != oldClaim.PlanNum2) {
				return true;
			}
			if(claim.PatRelat2 != oldClaim.PatRelat2) {
				return true;
			}
			if(claim.WriteOff != oldClaim.WriteOff) {
				return true;
			}
			if(claim.Radiographs != oldClaim.Radiographs) {
				return true;
			}
			if(claim.ClinicNum != oldClaim.ClinicNum) {
				return true;
			}
			if(claim.ClaimForm != oldClaim.ClaimForm) {
				return true;
			}
			if(claim.AttachedImages != oldClaim.AttachedImages) {
				return true;
			}
			if(claim.AttachedModels != oldClaim.AttachedModels) {
				return true;
			}
			if(claim.AttachedFlags != oldClaim.AttachedFlags) {
				return true;
			}
			if(claim.AttachmentID != oldClaim.AttachmentID) {
				return true;
			}
			if(claim.CanadianMaterialsForwarded != oldClaim.CanadianMaterialsForwarded) {
				return true;
			}
			if(claim.CanadianReferralProviderNum != oldClaim.CanadianReferralProviderNum) {
				return true;
			}
			if(claim.CanadianReferralReason != oldClaim.CanadianReferralReason) {
				return true;
			}
			if(claim.CanadianIsInitialLower != oldClaim.CanadianIsInitialLower) {
				return true;
			}
			if(claim.CanadianDateInitialLower.Date != oldClaim.CanadianDateInitialLower.Date) {
				return true;
			}
			if(claim.CanadianMandProsthMaterial != oldClaim.CanadianMandProsthMaterial) {
				return true;
			}
			if(claim.CanadianIsInitialUpper != oldClaim.CanadianIsInitialUpper) {
				return true;
			}
			if(claim.CanadianDateInitialUpper.Date != oldClaim.CanadianDateInitialUpper.Date) {
				return true;
			}
			if(claim.CanadianMaxProsthMaterial != oldClaim.CanadianMaxProsthMaterial) {
				return true;
			}
			if(claim.InsSubNum != oldClaim.InsSubNum) {
				return true;
			}
			if(claim.InsSubNum2 != oldClaim.InsSubNum2) {
				return true;
			}
			if(claim.CanadaTransRefNum != oldClaim.CanadaTransRefNum) {
				return true;
			}
			if(claim.CanadaEstTreatStartDate.Date != oldClaim.CanadaEstTreatStartDate.Date) {
				return true;
			}
			if(claim.CanadaInitialPayment != oldClaim.CanadaInitialPayment) {
				return true;
			}
			if(claim.CanadaPaymentMode != oldClaim.CanadaPaymentMode) {
				return true;
			}
			if(claim.CanadaTreatDuration != oldClaim.CanadaTreatDuration) {
				return true;
			}
			if(claim.CanadaNumAnticipatedPayments != oldClaim.CanadaNumAnticipatedPayments) {
				return true;
			}
			if(claim.CanadaAnticipatedPayAmount != oldClaim.CanadaAnticipatedPayAmount) {
				return true;
			}
			if(claim.PriorAuthorizationNumber != oldClaim.PriorAuthorizationNumber) {
				return true;
			}
			if(claim.SpecialProgramCode != oldClaim.SpecialProgramCode) {
				return true;
			}
			if(claim.UniformBillType != oldClaim.UniformBillType) {
				return true;
			}
			if(claim.MedType != oldClaim.MedType) {
				return true;
			}
			if(claim.AdmissionTypeCode != oldClaim.AdmissionTypeCode) {
				return true;
			}
			if(claim.AdmissionSourceCode != oldClaim.AdmissionSourceCode) {
				return true;
			}
			if(claim.PatientStatusCode != oldClaim.PatientStatusCode) {
				return true;
			}
			if(claim.CustomTracking != oldClaim.CustomTracking) {
				return true;
			}
			if(claim.DateResent.Date != oldClaim.DateResent.Date) {
				return true;
			}
			if(claim.CorrectionType != oldClaim.CorrectionType) {
				return true;
			}
			if(claim.ClaimIdentifier != oldClaim.ClaimIdentifier) {
				return true;
			}
			if(claim.OrigRefNum != oldClaim.OrigRefNum) {
				return true;
			}
			if(claim.ProvOrderOverride != oldClaim.ProvOrderOverride) {
				return true;
			}
			if(claim.OrthoTotalM != oldClaim.OrthoTotalM) {
				return true;
			}
			if(claim.ShareOfCost != oldClaim.ShareOfCost) {
				return true;
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(claim.OrderingReferralNum != oldClaim.OrderingReferralNum) {
				return true;
			}
			if(claim.DateSentOrig.Date != oldClaim.DateSentOrig.Date) {
				return true;
			}
			if(claim.DateIllnessInjuryPreg.Date != oldClaim.DateIllnessInjuryPreg.Date) {
				return true;
			}
			if(claim.DateIllnessInjuryPregQualifier != oldClaim.DateIllnessInjuryPregQualifier) {
				return true;
			}
			if(claim.DateOther.Date != oldClaim.DateOther.Date) {
				return true;
			}
			if(claim.DateOtherQualifier != oldClaim.DateOtherQualifier) {
				return true;
			}
			if(claim.IsOutsideLab != oldClaim.IsOutsideLab) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Claim from the database.</summary>
		public static void Delete(long claimNum) {
			ClearFkey(claimNum);
			string command="DELETE FROM claim "
				+"WHERE ClaimNum = "+POut.Long(claimNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many Claims from the database.</summary>
		public static void DeleteMany(List<long> listClaimNums) {
			if(listClaimNums==null || listClaimNums.Count==0) {
				return;
			}
			ClearFkey(listClaimNums);
			string command="DELETE FROM claim "
				+"WHERE ClaimNum IN("+string.Join(",",listClaimNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching claimNum as FKey and are related to Claim.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Claim table type.</summary>
		public static void ClearFkey(long claimNum) {
			if(claimNum==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey="+POut.Long(claimNum)+" AND PermType IN (95)";
			Db.NonQ(command);
		}

		///<summary>Zeros securitylog FKey column for rows that are using the matching claimNums as FKey and are related to Claim.
		///Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Claim table type.</summary>
		public static void ClearFkey(List<long> listClaimNums) {
			if(listClaimNums==null || listClaimNums.FindAll(x => x != 0).Count==0) {
				return;
			}
			string command="UPDATE securitylog SET FKey=0 WHERE FKey IN("+String.Join(",",listClaimNums.FindAll(x => x != 0))+") AND PermType IN (95)";
			Db.NonQ(command);
		}

	}
}