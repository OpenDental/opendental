//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace OpenDentBusiness.WebServiceMainHQ {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceMainHQSoap", Namespace="https://www.opendental.com/OpenDentalWebServiceHQ/")]
    public partial class WebServiceMainHQ : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdateFHIRAPIKeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadRedactedDataPatientPortalInvitesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPatientPortalXWebResponsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessEConnectorFailoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConnectionDbOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitUnhandledExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EServiceLogUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewHelpKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetManualPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStableManualVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanadaCarrierUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerUpdateCommittedOperationCompleted;
        
        private System.Threading.SendOrPostCallback LicenseAgreementAcceptedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProvisionTenDlcBrandOperationCompleted;
        
        private System.Threading.SendOrPostCallback EServiceSetupOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordValidateDbBackupResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestCloudClientVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SupplementalBackupHandshakeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSupplementalBackupStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSmsPatientPhoneOptInOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMobileSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMobileSettings2FAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertMobileSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformRefreshCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateShortGUIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateWebAppUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIsClosedBetaParticipantOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateWebAppUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildWebLanderUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildWebSchedRecallURLsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildWebSchedNewPatApptURLsOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSchedRecallNotificationsSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSchedAsapSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildWebSchedUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildWebSchedASAPUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildPatientPortalStatementUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildFeaturePortalUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildConfirmationRequestUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildConfirmationRequestUrlQuickOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildOAuthUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCloudMaxSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThinfinityLicenseUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxAtoZSizeGBOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertCloudMaxSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordCloudSessionsInUseOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordCloudStorageSizeUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDropboxAuthorizationUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDropboxAccessTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGoogleAuthorizationUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGoogleAuthorizationUrlLoopbackIpAddressFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGoogleAccessTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCareCreditOAuthTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCareCreditWebTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdvertisingPostcardsAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManageAdvertisingPostcardsAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostcardManiaSSOOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPostcardManiaPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogCareCreditTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmationRequestSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback HandleConfirmationsApptChangedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ThankYouSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewPatThankYouSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveWebFormURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterCalendarEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildApptThankYouIcsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SmsSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestListenerProxyPrefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEConnectorTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEConnectorTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEConnectorStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPaySimpleACHIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaySimpleWebHookUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateEServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsBetaAvailableForThisCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailHostingSignupOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailHostingChangeClinicStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ODXamValidateLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ODXamTwoFactorAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback ODXamSubmitUnhandledExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPushNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeaturesForCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeaturesForEServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableAdditionalFeaturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFHIRAPIKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateFHIRAPIKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignFHIRAPIKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFHIRAPIKeysForOfficeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFHIRKeyStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServiceMainHQ() {
            this.Url = global::OpenDentBusiness.Properties.Settings.Default.OpenDentBusiness_WebServiceMainHQ_WebServiceMainHQ;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateFHIRAPIKeysCompletedEventHandler UpdateFHIRAPIKeysCompleted;
        
        /// <remarks/>
        public event UploadRedactedDataPatientPortalInvitesCompletedEventHandler UploadRedactedDataPatientPortalInvitesCompleted;
        
        /// <remarks/>
        public event UploadPatientPortalXWebResponsesCompletedEventHandler UploadPatientPortalXWebResponsesCompleted;
        
        /// <remarks/>
        public event ProcessEConnectorFailoverCompletedEventHandler ProcessEConnectorFailoverCompleted;
        
        /// <remarks/>
        public event TestConnectionCompletedEventHandler TestConnectionCompleted;
        
        /// <remarks/>
        public event TestConnectionDbCompletedEventHandler TestConnectionDbCompleted;
        
        /// <remarks/>
        public event SubmitUnhandledExceptionCompletedEventHandler SubmitUnhandledExceptionCompleted;
        
        /// <remarks/>
        public event EServiceLogUploadCompletedEventHandler EServiceLogUploadCompleted;
        
        /// <remarks/>
        public event CreateNewHelpKeyCompletedEventHandler CreateNewHelpKeyCompleted;
        
        /// <remarks/>
        public event GetManualPageCompletedEventHandler GetManualPageCompleted;
        
        /// <remarks/>
        public event GetStableManualVersionCompletedEventHandler GetStableManualVersionCompleted;
        
        /// <remarks/>
        public event CanadaCarrierUpdateCompletedEventHandler CanadaCarrierUpdateCompleted;
        
        /// <remarks/>
        public event CustomerUpdateCommittedCompletedEventHandler CustomerUpdateCommittedCompleted;
        
        /// <remarks/>
        public event LicenseAgreementAcceptedCompletedEventHandler LicenseAgreementAcceptedCompleted;
        
        /// <remarks/>
        public event ProvisionTenDlcBrandCompletedEventHandler ProvisionTenDlcBrandCompleted;
        
        /// <remarks/>
        public event EServiceSetupCompletedEventHandler EServiceSetupCompleted;
        
        /// <remarks/>
        public event RecordValidateDbBackupResultsCompletedEventHandler RecordValidateDbBackupResultsCompleted;
        
        /// <remarks/>
        public event GetLatestCloudClientVersionCompletedEventHandler GetLatestCloudClientVersionCompleted;
        
        /// <remarks/>
        public event SupplementalBackupHandshakeCompletedEventHandler SupplementalBackupHandshakeCompleted;
        
        /// <remarks/>
        public event SetSupplementalBackupStatusCompletedEventHandler SetSupplementalBackupStatusCompleted;
        
        /// <remarks/>
        public event SetSmsPatientPhoneOptInCompletedEventHandler SetSmsPatientPhoneOptInCompleted;
        
        /// <remarks/>
        public event GetMobileSettingsCompletedEventHandler GetMobileSettingsCompleted;
        
        /// <remarks/>
        public event GetMobileSettings2FACompletedEventHandler GetMobileSettings2FACompleted;
        
        /// <remarks/>
        public event UpsertMobileSettingsCompletedEventHandler UpsertMobileSettingsCompleted;
        
        /// <remarks/>
        public event PerformRefreshCacheCompletedEventHandler PerformRefreshCacheCompleted;
        
        /// <remarks/>
        public event GenerateShortGUIDsCompletedEventHandler GenerateShortGUIDsCompleted;
        
        /// <remarks/>
        public event GenerateWebAppUrlCompletedEventHandler GenerateWebAppUrlCompleted;
        
        /// <remarks/>
        public event GetIsClosedBetaParticipantCompletedEventHandler GetIsClosedBetaParticipantCompleted;
        
        /// <remarks/>
        public event ValidateWebAppUrlCompletedEventHandler ValidateWebAppUrlCompleted;
        
        /// <remarks/>
        public event BuildWebLanderUrlCompletedEventHandler BuildWebLanderUrlCompleted;
        
        /// <remarks/>
        public event BuildWebSchedRecallURLsCompletedEventHandler BuildWebSchedRecallURLsCompleted;
        
        /// <remarks/>
        public event BuildWebSchedNewPatApptURLsCompletedEventHandler BuildWebSchedNewPatApptURLsCompleted;
        
        /// <remarks/>
        public event WebSchedRecallNotificationsSendCompletedEventHandler WebSchedRecallNotificationsSendCompleted;
        
        /// <remarks/>
        public event WebSchedAsapSendCompletedEventHandler WebSchedAsapSendCompleted;
        
        /// <remarks/>
        public event BuildWebSchedUrlCompletedEventHandler BuildWebSchedUrlCompleted;
        
        /// <remarks/>
        public event BuildWebSchedASAPUrlCompletedEventHandler BuildWebSchedASAPUrlCompleted;
        
        /// <remarks/>
        public event BuildPatientPortalStatementUrlCompletedEventHandler BuildPatientPortalStatementUrlCompleted;
        
        /// <remarks/>
        public event BuildFeaturePortalUrlCompletedEventHandler BuildFeaturePortalUrlCompleted;
        
        /// <remarks/>
        public event BuildConfirmationRequestUrlCompletedEventHandler BuildConfirmationRequestUrlCompleted;
        
        /// <remarks/>
        public event BuildConfirmationRequestUrlQuickCompletedEventHandler BuildConfirmationRequestUrlQuickCompleted;
        
        /// <remarks/>
        public event BuildOAuthUrlCompletedEventHandler BuildOAuthUrlCompleted;
        
        /// <remarks/>
        public event GetCloudMaxSessionsCompletedEventHandler GetCloudMaxSessionsCompleted;
        
        /// <remarks/>
        public event GetThinfinityLicenseUsersCompletedEventHandler GetThinfinityLicenseUsersCompleted;
        
        /// <remarks/>
        public event GetMaxAtoZSizeGBCompletedEventHandler GetMaxAtoZSizeGBCompleted;
        
        /// <remarks/>
        public event UpsertCloudMaxSessionsCompletedEventHandler UpsertCloudMaxSessionsCompleted;
        
        /// <remarks/>
        public event RecordCloudSessionsInUseCompletedEventHandler RecordCloudSessionsInUseCompleted;
        
        /// <remarks/>
        public event RecordCloudStorageSizeUsedCompletedEventHandler RecordCloudStorageSizeUsedCompleted;
        
        /// <remarks/>
        public event GetDropboxAuthorizationUrlCompletedEventHandler GetDropboxAuthorizationUrlCompleted;
        
        /// <remarks/>
        public event GetDropboxAccessTokenCompletedEventHandler GetDropboxAccessTokenCompleted;
        
        /// <remarks/>
        public event GetGoogleAuthorizationUrlCompletedEventHandler GetGoogleAuthorizationUrlCompleted;
        
        /// <remarks/>
        public event GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompletedEventHandler GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompleted;
        
        /// <remarks/>
        public event GetGoogleAccessTokenCompletedEventHandler GetGoogleAccessTokenCompleted;
        
        /// <remarks/>
        public event GetCareCreditOAuthTokenCompletedEventHandler GetCareCreditOAuthTokenCompleted;
        
        /// <remarks/>
        public event GetCareCreditWebTokenCompletedEventHandler GetCareCreditWebTokenCompleted;
        
        /// <remarks/>
        public event GetAdvertisingPostcardsAccountsCompletedEventHandler GetAdvertisingPostcardsAccountsCompleted;
        
        /// <remarks/>
        public event ManageAdvertisingPostcardsAccountCompletedEventHandler ManageAdvertisingPostcardsAccountCompleted;
        
        /// <remarks/>
        public event GetPostcardManiaSSOCompletedEventHandler GetPostcardManiaSSOCompleted;
        
        /// <remarks/>
        public event UploadPostcardManiaPatientListCompletedEventHandler UploadPostcardManiaPatientListCompleted;
        
        /// <remarks/>
        public event LogCareCreditTransactionCompletedEventHandler LogCareCreditTransactionCompleted;
        
        /// <remarks/>
        public event ValidateVersionCompletedEventHandler ValidateVersionCompleted;
        
        /// <remarks/>
        public event ConfirmationRequestSendCompletedEventHandler ConfirmationRequestSendCompleted;
        
        /// <remarks/>
        public event HandleConfirmationsApptChangedCompletedEventHandler HandleConfirmationsApptChangedCompleted;
        
        /// <remarks/>
        public event ThankYouSendCompletedEventHandler ThankYouSendCompleted;
        
        /// <remarks/>
        public event NewPatThankYouSendCompletedEventHandler NewPatThankYouSendCompleted;
        
        /// <remarks/>
        public event RetrieveWebFormURLCompletedEventHandler RetrieveWebFormURLCompleted;
        
        /// <remarks/>
        public event RegisterCalendarEventCompletedEventHandler RegisterCalendarEventCompleted;
        
        /// <remarks/>
        public event BuildApptThankYouIcsCompletedEventHandler BuildApptThankYouIcsCompleted;
        
        /// <remarks/>
        public event SmsSendCompletedEventHandler SmsSendCompleted;
        
        /// <remarks/>
        public event RequestListenerProxyPrefsCompletedEventHandler RequestListenerProxyPrefsCompleted;
        
        /// <remarks/>
        public event GetEConnectorTypeCompletedEventHandler GetEConnectorTypeCompleted;
        
        /// <remarks/>
        public event SetEConnectorTypeCompletedEventHandler SetEConnectorTypeCompleted;
        
        /// <remarks/>
        public event SetEConnectorStatsCompletedEventHandler SetEConnectorStatsCompleted;
        
        /// <remarks/>
        public event InsertPaySimpleACHIdCompletedEventHandler InsertPaySimpleACHIdCompleted;
        
        /// <remarks/>
        public event GetPaySimpleWebHookUrlCompletedEventHandler GetPaySimpleWebHookUrlCompleted;
        
        /// <remarks/>
        public event ValidateEServiceCompletedEventHandler ValidateEServiceCompleted;
        
        /// <remarks/>
        public event IsBetaAvailableForThisCustomerCompletedEventHandler IsBetaAvailableForThisCustomerCompleted;
        
        /// <remarks/>
        public event EmailHostingSignupCompletedEventHandler EmailHostingSignupCompleted;
        
        /// <remarks/>
        public event EmailHostingChangeClinicStatusCompletedEventHandler EmailHostingChangeClinicStatusCompleted;
        
        /// <remarks/>
        public event ODXamValidateLoginCompletedEventHandler ODXamValidateLoginCompleted;
        
        /// <remarks/>
        public event ODXamTwoFactorAuthCompletedEventHandler ODXamTwoFactorAuthCompleted;
        
        /// <remarks/>
        public event ODXamSubmitUnhandledExceptionCompletedEventHandler ODXamSubmitUnhandledExceptionCompleted;
        
        /// <remarks/>
        public event SendPushNotificationCompletedEventHandler SendPushNotificationCompleted;
        
        /// <remarks/>
        public event GetFeaturesForCustomerCompletedEventHandler GetFeaturesForCustomerCompleted;
        
        /// <remarks/>
        public event GetFeaturesForEServiceCompletedEventHandler GetFeaturesForEServiceCompleted;
        
        /// <remarks/>
        public event EnableAdditionalFeaturesCompletedEventHandler EnableAdditionalFeaturesCompleted;
        
        /// <remarks/>
        public event CheckFHIRAPIKeyCompletedEventHandler CheckFHIRAPIKeyCompleted;
        
        /// <remarks/>
        public event GenerateFHIRAPIKeyCompletedEventHandler GenerateFHIRAPIKeyCompleted;
        
        /// <remarks/>
        public event AssignFHIRAPIKeyCompletedEventHandler AssignFHIRAPIKeyCompleted;
        
        /// <remarks/>
        public event GetFHIRAPIKeysForOfficeCompletedEventHandler GetFHIRAPIKeysForOfficeCompleted;
        
        /// <remarks/>
        public event UpdateFHIRKeyStatusCompletedEventHandler UpdateFHIRKeyStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UpdateFHIRAPIKeys", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFHIRAPIKeys(string officeData) {
            object[] results = this.Invoke("UpdateFHIRAPIKeys", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UploadRedactedDataPatientPortal" +
            "Invites", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadRedactedDataPatientPortalInvites(string officeData) {
            object[] results = this.Invoke("UploadRedactedDataPatientPortalInvites", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadRedactedDataPatientPortalInvitesAsync(string officeData) {
            this.UploadRedactedDataPatientPortalInvitesAsync(officeData, null);
        }
        
        /// <remarks/>
        public void UploadRedactedDataPatientPortalInvitesAsync(string officeData, object userState) {
            if ((this.UploadRedactedDataPatientPortalInvitesOperationCompleted == null)) {
                this.UploadRedactedDataPatientPortalInvitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRedactedDataPatientPortalInvitesOperationCompleted);
            }
            this.InvokeAsync("UploadRedactedDataPatientPortalInvites", new object[] {
                        officeData}, this.UploadRedactedDataPatientPortalInvitesOperationCompleted, userState);
        }
        
        private void OnUploadRedactedDataPatientPortalInvitesOperationCompleted(object arg) {
            if ((this.UploadRedactedDataPatientPortalInvitesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadRedactedDataPatientPortalInvitesCompleted(this, new UploadRedactedDataPatientPortalInvitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public void UpdateFHIRAPIKeysAsync(string officeData, object userState) {
            if ((this.UpdateFHIRAPIKeysOperationCompleted == null)) {
                this.UpdateFHIRAPIKeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFHIRAPIKeysOperationCompleted);
            }
            this.InvokeAsync("UpdateFHIRAPIKeys", new object[] {
                        officeData}, this.UpdateFHIRAPIKeysOperationCompleted, userState);
        }
        
        private void OnUpdateFHIRAPIKeysOperationCompleted(object arg) {
            if ((this.UpdateFHIRAPIKeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFHIRAPIKeysCompleted(this, new UpdateFHIRAPIKeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UploadPatientPortalXWebResponse" +
            "s", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadPatientPortalXWebResponses(string officeData) {
            object[] results = this.Invoke("UploadPatientPortalXWebResponses", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPatientPortalXWebResponsesAsync(string officeData) {
            this.UploadPatientPortalXWebResponsesAsync(officeData, null);
        }
        
        /// <remarks/>
        public void UploadPatientPortalXWebResponsesAsync(string officeData, object userState) {
            if ((this.UploadPatientPortalXWebResponsesOperationCompleted == null)) {
                this.UploadPatientPortalXWebResponsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPatientPortalXWebResponsesOperationCompleted);
            }
            this.InvokeAsync("UploadPatientPortalXWebResponses", new object[] {
                        officeData}, this.UploadPatientPortalXWebResponsesOperationCompleted, userState);
        }
        
        private void OnUploadPatientPortalXWebResponsesOperationCompleted(object arg) {
            if ((this.UploadPatientPortalXWebResponsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPatientPortalXWebResponsesCompleted(this, new UploadPatientPortalXWebResponsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ProcessEConnectorFailover", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessEConnectorFailover(string officeData) {
            object[] results = this.Invoke("ProcessEConnectorFailover", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessEConnectorFailoverAsync(string officeData) {
            this.ProcessEConnectorFailoverAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ProcessEConnectorFailoverAsync(string officeData, object userState) {
            if ((this.ProcessEConnectorFailoverOperationCompleted == null)) {
                this.ProcessEConnectorFailoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessEConnectorFailoverOperationCompleted);
            }
            this.InvokeAsync("ProcessEConnectorFailover", new object[] {
                        officeData}, this.ProcessEConnectorFailoverOperationCompleted, userState);
        }
        
        private void OnProcessEConnectorFailoverOperationCompleted(object arg) {
            if ((this.ProcessEConnectorFailoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessEConnectorFailoverCompleted(this, new ProcessEConnectorFailoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/TestConnection", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestConnection(string officeData) {
            object[] results = this.Invoke("TestConnection", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string officeData) {
            this.TestConnectionAsync(officeData, null);
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string officeData, object userState) {
            if ((this.TestConnectionOperationCompleted == null)) {
                this.TestConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionOperationCompleted);
            }
            this.InvokeAsync("TestConnection", new object[] {
                        officeData}, this.TestConnectionOperationCompleted, userState);
        }
        
        private void OnTestConnectionOperationCompleted(object arg) {
            if ((this.TestConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/TestConnectionDb", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestConnectionDb(string officeData) {
            object[] results = this.Invoke("TestConnectionDb", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionDbAsync(string officeData) {
            this.TestConnectionDbAsync(officeData, null);
        }
        
        /// <remarks/>
        public void TestConnectionDbAsync(string officeData, object userState) {
            if ((this.TestConnectionDbOperationCompleted == null)) {
                this.TestConnectionDbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionDbOperationCompleted);
            }
            this.InvokeAsync("TestConnectionDb", new object[] {
                        officeData}, this.TestConnectionDbOperationCompleted, userState);
        }
        
        private void OnTestConnectionDbOperationCompleted(object arg) {
            if ((this.TestConnectionDbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionDbCompleted(this, new TestConnectionDbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SubmitUnhandledException", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitUnhandledException(string officeData) {
            object[] results = this.Invoke("SubmitUnhandledException", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitUnhandledExceptionAsync(string officeData) {
            this.SubmitUnhandledExceptionAsync(officeData, null);
        }
        
        /// <remarks/>
        public void SubmitUnhandledExceptionAsync(string officeData, object userState) {
            if ((this.SubmitUnhandledExceptionOperationCompleted == null)) {
                this.SubmitUnhandledExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitUnhandledExceptionOperationCompleted);
            }
            this.InvokeAsync("SubmitUnhandledException", new object[] {
                        officeData}, this.SubmitUnhandledExceptionOperationCompleted, userState);
        }
        
        private void OnSubmitUnhandledExceptionOperationCompleted(object arg) {
            if ((this.SubmitUnhandledExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitUnhandledExceptionCompleted(this, new SubmitUnhandledExceptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/EServiceLogUpload", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EServiceLogUpload(string officeData) {
            object[] results = this.Invoke("EServiceLogUpload", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EServiceLogUploadAsync(string officeData) {
            this.EServiceLogUploadAsync(officeData, null);
        }
        
        /// <remarks/>
        public void EServiceLogUploadAsync(string officeData, object userState) {
            if ((this.EServiceLogUploadOperationCompleted == null)) {
                this.EServiceLogUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEServiceLogUploadOperationCompleted);
            }
            this.InvokeAsync("EServiceLogUpload", new object[] {
                        officeData}, this.EServiceLogUploadOperationCompleted, userState);
        }
        
        private void OnEServiceLogUploadOperationCompleted(object arg) {
            if ((this.EServiceLogUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EServiceLogUploadCompleted(this, new EServiceLogUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/CreateNewHelpKey", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewHelpKey(string officeData) {
            object[] results = this.Invoke("CreateNewHelpKey", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewHelpKeyAsync(string officeData) {
            this.CreateNewHelpKeyAsync(officeData, null);
        }
        
        /// <remarks/>
        public void CreateNewHelpKeyAsync(string officeData, object userState) {
            if ((this.CreateNewHelpKeyOperationCompleted == null)) {
                this.CreateNewHelpKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewHelpKeyOperationCompleted);
            }
            this.InvokeAsync("CreateNewHelpKey", new object[] {
                        officeData}, this.CreateNewHelpKeyOperationCompleted, userState);
        }
        
        private void OnCreateNewHelpKeyOperationCompleted(object arg) {
            if ((this.CreateNewHelpKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewHelpKeyCompleted(this, new CreateNewHelpKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetManualPage", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetManualPage(string formName, string programVersion) {
            object[] results = this.Invoke("GetManualPage", new object[] {
                        formName,
                        programVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetManualPageAsync(string formName, string programVersion) {
            this.GetManualPageAsync(formName, programVersion, null);
        }
        
        /// <remarks/>
        public void GetManualPageAsync(string formName, string programVersion, object userState) {
            if ((this.GetManualPageOperationCompleted == null)) {
                this.GetManualPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetManualPageOperationCompleted);
            }
            this.InvokeAsync("GetManualPage", new object[] {
                        formName,
                        programVersion}, this.GetManualPageOperationCompleted, userState);
        }
        
        private void OnGetManualPageOperationCompleted(object arg) {
            if ((this.GetManualPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetManualPageCompleted(this, new GetManualPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetStableManualVersion", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStableManualVersion() {
            object[] results = this.Invoke("GetStableManualVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStableManualVersionAsync() {
            this.GetStableManualVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetStableManualVersionAsync(object userState) {
            if ((this.GetStableManualVersionOperationCompleted == null)) {
                this.GetStableManualVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStableManualVersionOperationCompleted);
            }
            this.InvokeAsync("GetStableManualVersion", new object[0], this.GetStableManualVersionOperationCompleted, userState);
        }
        
        private void OnGetStableManualVersionOperationCompleted(object arg) {
            if ((this.GetStableManualVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStableManualVersionCompleted(this, new GetStableManualVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/CanadaCarrierUpdate", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CanadaCarrierUpdate(string officeData) {
            object[] results = this.Invoke("CanadaCarrierUpdate", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CanadaCarrierUpdateAsync(string officeData) {
            this.CanadaCarrierUpdateAsync(officeData, null);
        }
        
        /// <remarks/>
        public void CanadaCarrierUpdateAsync(string officeData, object userState) {
            if ((this.CanadaCarrierUpdateOperationCompleted == null)) {
                this.CanadaCarrierUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanadaCarrierUpdateOperationCompleted);
            }
            this.InvokeAsync("CanadaCarrierUpdate", new object[] {
                        officeData}, this.CanadaCarrierUpdateOperationCompleted, userState);
        }
        
        private void OnCanadaCarrierUpdateOperationCompleted(object arg) {
            if ((this.CanadaCarrierUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanadaCarrierUpdateCompleted(this, new CanadaCarrierUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/CustomerUpdateCommitted", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerUpdateCommitted(string officeData) {
            object[] results = this.Invoke("CustomerUpdateCommitted", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerUpdateCommittedAsync(string officeData) {
            this.CustomerUpdateCommittedAsync(officeData, null);
        }
        
        /// <remarks/>
        public void CustomerUpdateCommittedAsync(string officeData, object userState) {
            if ((this.CustomerUpdateCommittedOperationCompleted == null)) {
                this.CustomerUpdateCommittedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerUpdateCommittedOperationCompleted);
            }
            this.InvokeAsync("CustomerUpdateCommitted", new object[] {
                        officeData}, this.CustomerUpdateCommittedOperationCompleted, userState);
        }
        
        private void OnCustomerUpdateCommittedOperationCompleted(object arg) {
            if ((this.CustomerUpdateCommittedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerUpdateCommittedCompleted(this, new CustomerUpdateCommittedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/LicenseAgreementAccepted", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LicenseAgreementAccepted(string officeData) {
            object[] results = this.Invoke("LicenseAgreementAccepted", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LicenseAgreementAcceptedAsync(string officeData) {
            this.LicenseAgreementAcceptedAsync(officeData, null);
        }
        
        /// <remarks/>
        public void LicenseAgreementAcceptedAsync(string officeData, object userState) {
            if ((this.LicenseAgreementAcceptedOperationCompleted == null)) {
                this.LicenseAgreementAcceptedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicenseAgreementAcceptedOperationCompleted);
            }
            this.InvokeAsync("LicenseAgreementAccepted", new object[] {
                        officeData}, this.LicenseAgreementAcceptedOperationCompleted, userState);
        }
        
        private void OnLicenseAgreementAcceptedOperationCompleted(object arg) {
            if ((this.LicenseAgreementAcceptedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LicenseAgreementAcceptedCompleted(this, new LicenseAgreementAcceptedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ProvisionTenDlcBrand", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProvisionTenDlcBrand(string officeData) {
            object[] results = this.Invoke("ProvisionTenDlcBrand", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProvisionTenDlcBrandAsync(string officeData) {
            this.ProvisionTenDlcBrandAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ProvisionTenDlcBrandAsync(string officeData, object userState) {
            if ((this.ProvisionTenDlcBrandOperationCompleted == null)) {
                this.ProvisionTenDlcBrandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProvisionTenDlcBrandOperationCompleted);
            }
            this.InvokeAsync("ProvisionTenDlcBrand", new object[] {
                        officeData}, this.ProvisionTenDlcBrandOperationCompleted, userState);
        }
        
        private void OnProvisionTenDlcBrandOperationCompleted(object arg) {
            if ((this.ProvisionTenDlcBrandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProvisionTenDlcBrandCompleted(this, new ProvisionTenDlcBrandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/EServiceSetup", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EServiceSetup(string officeData) {
            object[] results = this.Invoke("EServiceSetup", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EServiceSetupAsync(string officeData) {
            this.EServiceSetupAsync(officeData, null);
        }
        
        /// <remarks/>
        public void EServiceSetupAsync(string officeData, object userState) {
            if ((this.EServiceSetupOperationCompleted == null)) {
                this.EServiceSetupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEServiceSetupOperationCompleted);
            }
            this.InvokeAsync("EServiceSetup", new object[] {
                        officeData}, this.EServiceSetupOperationCompleted, userState);
        }
        
        private void OnEServiceSetupOperationCompleted(object arg) {
            if ((this.EServiceSetupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EServiceSetupCompleted(this, new EServiceSetupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/RecordValidateDbBackupResults", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecordValidateDbBackupResults(string officeData) {
            object[] results = this.Invoke("RecordValidateDbBackupResults", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecordValidateDbBackupResultsAsync(string officeData) {
            this.RecordValidateDbBackupResultsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void RecordValidateDbBackupResultsAsync(string officeData, object userState) {
            if ((this.RecordValidateDbBackupResultsOperationCompleted == null)) {
                this.RecordValidateDbBackupResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordValidateDbBackupResultsOperationCompleted);
            }
            this.InvokeAsync("RecordValidateDbBackupResults", new object[] {
                        officeData}, this.RecordValidateDbBackupResultsOperationCompleted, userState);
        }
        
        private void OnRecordValidateDbBackupResultsOperationCompleted(object arg) {
            if ((this.RecordValidateDbBackupResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordValidateDbBackupResultsCompleted(this, new RecordValidateDbBackupResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetLatestCloudClientVersion", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLatestCloudClientVersion() {
            object[] results = this.Invoke("GetLatestCloudClientVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestCloudClientVersionAsync() {
            this.GetLatestCloudClientVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetLatestCloudClientVersionAsync(object userState) {
            if ((this.GetLatestCloudClientVersionOperationCompleted == null)) {
                this.GetLatestCloudClientVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestCloudClientVersionOperationCompleted);
            }
            this.InvokeAsync("GetLatestCloudClientVersion", new object[0], this.GetLatestCloudClientVersionOperationCompleted, userState);
        }
        
        private void OnGetLatestCloudClientVersionOperationCompleted(object arg) {
            if ((this.GetLatestCloudClientVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestCloudClientVersionCompleted(this, new GetLatestCloudClientVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SupplementalBackupHandshake", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SupplementalBackupHandshake(string officeData) {
            object[] results = this.Invoke("SupplementalBackupHandshake", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SupplementalBackupHandshakeAsync(string officeData) {
            this.SupplementalBackupHandshakeAsync(officeData, null);
        }
        
        /// <remarks/>
        public void SupplementalBackupHandshakeAsync(string officeData, object userState) {
            if ((this.SupplementalBackupHandshakeOperationCompleted == null)) {
                this.SupplementalBackupHandshakeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSupplementalBackupHandshakeOperationCompleted);
            }
            this.InvokeAsync("SupplementalBackupHandshake", new object[] {
                        officeData}, this.SupplementalBackupHandshakeOperationCompleted, userState);
        }
        
        private void OnSupplementalBackupHandshakeOperationCompleted(object arg) {
            if ((this.SupplementalBackupHandshakeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SupplementalBackupHandshakeCompleted(this, new SupplementalBackupHandshakeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SetSupplementalBackupStatus", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetSupplementalBackupStatus(string officeData) {
            object[] results = this.Invoke("SetSupplementalBackupStatus", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetSupplementalBackupStatusAsync(string officeData) {
            this.SetSupplementalBackupStatusAsync(officeData, null);
        }
        
        /// <remarks/>
        public void SetSupplementalBackupStatusAsync(string officeData, object userState) {
            if ((this.SetSupplementalBackupStatusOperationCompleted == null)) {
                this.SetSupplementalBackupStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSupplementalBackupStatusOperationCompleted);
            }
            this.InvokeAsync("SetSupplementalBackupStatus", new object[] {
                        officeData}, this.SetSupplementalBackupStatusOperationCompleted, userState);
        }
        
        private void OnSetSupplementalBackupStatusOperationCompleted(object arg) {
            if ((this.SetSupplementalBackupStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSupplementalBackupStatusCompleted(this, new SetSupplementalBackupStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SetSmsPatientPhoneOptIn", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetSmsPatientPhoneOptIn(string officeData) {
            object[] results = this.Invoke("SetSmsPatientPhoneOptIn", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetSmsPatientPhoneOptInAsync(string officeData) {
            this.SetSmsPatientPhoneOptInAsync(officeData, null);
        }
        
        /// <remarks/>
        public void SetSmsPatientPhoneOptInAsync(string officeData, object userState) {
            if ((this.SetSmsPatientPhoneOptInOperationCompleted == null)) {
                this.SetSmsPatientPhoneOptInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSmsPatientPhoneOptInOperationCompleted);
            }
            this.InvokeAsync("SetSmsPatientPhoneOptIn", new object[] {
                        officeData}, this.SetSmsPatientPhoneOptInOperationCompleted, userState);
        }
        
        private void OnSetSmsPatientPhoneOptInOperationCompleted(object arg) {
            if ((this.SetSmsPatientPhoneOptInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSmsPatientPhoneOptInCompleted(this, new SetSmsPatientPhoneOptInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetMobileSettings", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMobileSettings(string officeData) {
            object[] results = this.Invoke("GetMobileSettings", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMobileSettingsAsync(string officeData) {
            this.GetMobileSettingsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetMobileSettingsAsync(string officeData, object userState) {
            if ((this.GetMobileSettingsOperationCompleted == null)) {
                this.GetMobileSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMobileSettingsOperationCompleted);
            }
            this.InvokeAsync("GetMobileSettings", new object[] {
                        officeData}, this.GetMobileSettingsOperationCompleted, userState);
        }
        
        private void OnGetMobileSettingsOperationCompleted(object arg) {
            if ((this.GetMobileSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMobileSettingsCompleted(this, new GetMobileSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetMobileSettings2FA", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMobileSettings2FA(string officeData) {
            object[] results = this.Invoke("GetMobileSettings2FA", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMobileSettings2FAAsync(string officeData) {
            this.GetMobileSettings2FAAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetMobileSettings2FAAsync(string officeData, object userState) {
            if ((this.GetMobileSettings2FAOperationCompleted == null)) {
                this.GetMobileSettings2FAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMobileSettings2FAOperationCompleted);
            }
            this.InvokeAsync("GetMobileSettings2FA", new object[] {
                        officeData}, this.GetMobileSettings2FAOperationCompleted, userState);
        }
        
        private void OnGetMobileSettings2FAOperationCompleted(object arg) {
            if ((this.GetMobileSettings2FACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMobileSettings2FACompleted(this, new GetMobileSettings2FACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UpsertMobileSettings", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertMobileSettings(string officeData) {
            object[] results = this.Invoke("UpsertMobileSettings", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertMobileSettingsAsync(string officeData) {
            this.UpsertMobileSettingsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void UpsertMobileSettingsAsync(string officeData, object userState) {
            if ((this.UpsertMobileSettingsOperationCompleted == null)) {
                this.UpsertMobileSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertMobileSettingsOperationCompleted);
            }
            this.InvokeAsync("UpsertMobileSettings", new object[] {
                        officeData}, this.UpsertMobileSettingsOperationCompleted, userState);
        }
        
        private void OnUpsertMobileSettingsOperationCompleted(object arg) {
            if ((this.UpsertMobileSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertMobileSettingsCompleted(this, new UpsertMobileSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/PerformRefreshCache", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PerformRefreshCache(string officeData) {
            object[] results = this.Invoke("PerformRefreshCache", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PerformRefreshCacheAsync(string officeData) {
            this.PerformRefreshCacheAsync(officeData, null);
        }
        
        /// <remarks/>
        public void PerformRefreshCacheAsync(string officeData, object userState) {
            if ((this.PerformRefreshCacheOperationCompleted == null)) {
                this.PerformRefreshCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformRefreshCacheOperationCompleted);
            }
            this.InvokeAsync("PerformRefreshCache", new object[] {
                        officeData}, this.PerformRefreshCacheOperationCompleted, userState);
        }
        
        private void OnPerformRefreshCacheOperationCompleted(object arg) {
            if ((this.PerformRefreshCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformRefreshCacheCompleted(this, new PerformRefreshCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GenerateShortGUIDs", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateShortGUIDs(string officeData) {
            object[] results = this.Invoke("GenerateShortGUIDs", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateShortGUIDsAsync(string officeData) {
            this.GenerateShortGUIDsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GenerateShortGUIDsAsync(string officeData, object userState) {
            if ((this.GenerateShortGUIDsOperationCompleted == null)) {
                this.GenerateShortGUIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateShortGUIDsOperationCompleted);
            }
            this.InvokeAsync("GenerateShortGUIDs", new object[] {
                        officeData}, this.GenerateShortGUIDsOperationCompleted, userState);
        }
        
        private void OnGenerateShortGUIDsOperationCompleted(object arg) {
            if ((this.GenerateShortGUIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateShortGUIDsCompleted(this, new GenerateShortGUIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GenerateWebAppUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateWebAppUrl(string officeData) {
            object[] results = this.Invoke("GenerateWebAppUrl", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateWebAppUrlAsync(string officeData) {
            this.GenerateWebAppUrlAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GenerateWebAppUrlAsync(string officeData, object userState) {
            if ((this.GenerateWebAppUrlOperationCompleted == null)) {
                this.GenerateWebAppUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateWebAppUrlOperationCompleted);
            }
            this.InvokeAsync("GenerateWebAppUrl", new object[] {
                        officeData}, this.GenerateWebAppUrlOperationCompleted, userState);
        }
        
        private void OnGenerateWebAppUrlOperationCompleted(object arg) {
            if ((this.GenerateWebAppUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateWebAppUrlCompleted(this, new GenerateWebAppUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetIsClosedBetaParticipant", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIsClosedBetaParticipant(string registrationKey) {
            object[] results = this.Invoke("GetIsClosedBetaParticipant", new object[] {
                        registrationKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIsClosedBetaParticipantAsync(string registrationKey) {
            this.GetIsClosedBetaParticipantAsync(registrationKey, null);
        }
        
        /// <remarks/>
        public void GetIsClosedBetaParticipantAsync(string registrationKey, object userState) {
            if ((this.GetIsClosedBetaParticipantOperationCompleted == null)) {
                this.GetIsClosedBetaParticipantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIsClosedBetaParticipantOperationCompleted);
            }
            this.InvokeAsync("GetIsClosedBetaParticipant", new object[] {
                        registrationKey}, this.GetIsClosedBetaParticipantOperationCompleted, userState);
        }
        
        private void OnGetIsClosedBetaParticipantOperationCompleted(object arg) {
            if ((this.GetIsClosedBetaParticipantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIsClosedBetaParticipantCompleted(this, new GetIsClosedBetaParticipantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ValidateWebAppUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateWebAppUrl(string officeData) {
            object[] results = this.Invoke("ValidateWebAppUrl", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateWebAppUrlAsync(string officeData) {
            this.ValidateWebAppUrlAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ValidateWebAppUrlAsync(string officeData, object userState) {
            if ((this.ValidateWebAppUrlOperationCompleted == null)) {
                this.ValidateWebAppUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateWebAppUrlOperationCompleted);
            }
            this.InvokeAsync("ValidateWebAppUrl", new object[] {
                        officeData}, this.ValidateWebAppUrlOperationCompleted, userState);
        }
        
        private void OnValidateWebAppUrlOperationCompleted(object arg) {
            if ((this.ValidateWebAppUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateWebAppUrlCompleted(this, new ValidateWebAppUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildWebLanderUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildWebLanderUrl(string registrationKey, string eService) {
            object[] results = this.Invoke("BuildWebLanderUrl", new object[] {
                        registrationKey,
                        eService});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildWebLanderUrlAsync(string registrationKey, string eService) {
            this.BuildWebLanderUrlAsync(registrationKey, eService, null);
        }
        
        /// <remarks/>
        public void BuildWebLanderUrlAsync(string registrationKey, string eService, object userState) {
            if ((this.BuildWebLanderUrlOperationCompleted == null)) {
                this.BuildWebLanderUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildWebLanderUrlOperationCompleted);
            }
            this.InvokeAsync("BuildWebLanderUrl", new object[] {
                        registrationKey,
                        eService}, this.BuildWebLanderUrlOperationCompleted, userState);
        }
        
        private void OnBuildWebLanderUrlOperationCompleted(object arg) {
            if ((this.BuildWebLanderUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildWebLanderUrlCompleted(this, new BuildWebLanderUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildWebSchedRecallURLs", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildWebSchedRecallURLs(string registrationKey, string recallNums) {
            object[] results = this.Invoke("BuildWebSchedRecallURLs", new object[] {
                        registrationKey,
                        recallNums});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildWebSchedRecallURLsAsync(string registrationKey, string recallNums) {
            this.BuildWebSchedRecallURLsAsync(registrationKey, recallNums, null);
        }
        
        /// <remarks/>
        public void BuildWebSchedRecallURLsAsync(string registrationKey, string recallNums, object userState) {
            if ((this.BuildWebSchedRecallURLsOperationCompleted == null)) {
                this.BuildWebSchedRecallURLsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildWebSchedRecallURLsOperationCompleted);
            }
            this.InvokeAsync("BuildWebSchedRecallURLs", new object[] {
                        registrationKey,
                        recallNums}, this.BuildWebSchedRecallURLsOperationCompleted, userState);
        }
        
        private void OnBuildWebSchedRecallURLsOperationCompleted(object arg) {
            if ((this.BuildWebSchedRecallURLsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildWebSchedRecallURLsCompleted(this, new BuildWebSchedRecallURLsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildWebSchedNewPatApptURLs", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildWebSchedNewPatApptURLs(string registrationKey, string clinicNums) {
            object[] results = this.Invoke("BuildWebSchedNewPatApptURLs", new object[] {
                        registrationKey,
                        clinicNums});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildWebSchedNewPatApptURLsAsync(string registrationKey, string clinicNums) {
            this.BuildWebSchedNewPatApptURLsAsync(registrationKey, clinicNums, null);
        }
        
        /// <remarks/>
        public void BuildWebSchedNewPatApptURLsAsync(string registrationKey, string clinicNums, object userState) {
            if ((this.BuildWebSchedNewPatApptURLsOperationCompleted == null)) {
                this.BuildWebSchedNewPatApptURLsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildWebSchedNewPatApptURLsOperationCompleted);
            }
            this.InvokeAsync("BuildWebSchedNewPatApptURLs", new object[] {
                        registrationKey,
                        clinicNums}, this.BuildWebSchedNewPatApptURLsOperationCompleted, userState);
        }
        
        private void OnBuildWebSchedNewPatApptURLsOperationCompleted(object arg) {
            if ((this.BuildWebSchedNewPatApptURLsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildWebSchedNewPatApptURLsCompleted(this, new BuildWebSchedNewPatApptURLsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/WebSchedRecallNotificationsSend" +
            "", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WebSchedRecallNotificationsSend(string officeData) {
            object[] results = this.Invoke("WebSchedRecallNotificationsSend", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WebSchedRecallNotificationsSendAsync(string officeData) {
            this.WebSchedRecallNotificationsSendAsync(officeData, null);
        }
        
        /// <remarks/>
        public void WebSchedRecallNotificationsSendAsync(string officeData, object userState) {
            if ((this.WebSchedRecallNotificationsSendOperationCompleted == null)) {
                this.WebSchedRecallNotificationsSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSchedRecallNotificationsSendOperationCompleted);
            }
            this.InvokeAsync("WebSchedRecallNotificationsSend", new object[] {
                        officeData}, this.WebSchedRecallNotificationsSendOperationCompleted, userState);
        }
        
        private void OnWebSchedRecallNotificationsSendOperationCompleted(object arg) {
            if ((this.WebSchedRecallNotificationsSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSchedRecallNotificationsSendCompleted(this, new WebSchedRecallNotificationsSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/WebSchedAsapSend", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WebSchedAsapSend(string officeData) {
            object[] results = this.Invoke("WebSchedAsapSend", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WebSchedAsapSendAsync(string officeData) {
            this.WebSchedAsapSendAsync(officeData, null);
        }
        
        /// <remarks/>
        public void WebSchedAsapSendAsync(string officeData, object userState) {
            if ((this.WebSchedAsapSendOperationCompleted == null)) {
                this.WebSchedAsapSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSchedAsapSendOperationCompleted);
            }
            this.InvokeAsync("WebSchedAsapSend", new object[] {
                        officeData}, this.WebSchedAsapSendOperationCompleted, userState);
        }
        
        private void OnWebSchedAsapSendOperationCompleted(object arg) {
            if ((this.WebSchedAsapSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSchedAsapSendCompleted(this, new WebSchedAsapSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildWebSchedUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildWebSchedUrl(string shortGuid) {
            object[] results = this.Invoke("BuildWebSchedUrl", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildWebSchedUrlAsync(string shortGuid) {
            this.BuildWebSchedUrlAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void BuildWebSchedUrlAsync(string shortGuid, object userState) {
            if ((this.BuildWebSchedUrlOperationCompleted == null)) {
                this.BuildWebSchedUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildWebSchedUrlOperationCompleted);
            }
            this.InvokeAsync("BuildWebSchedUrl", new object[] {
                        shortGuid}, this.BuildWebSchedUrlOperationCompleted, userState);
        }
        
        private void OnBuildWebSchedUrlOperationCompleted(object arg) {
            if ((this.BuildWebSchedUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildWebSchedUrlCompleted(this, new BuildWebSchedUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildWebSchedASAPUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildWebSchedASAPUrl(string shortGuid) {
            object[] results = this.Invoke("BuildWebSchedASAPUrl", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildWebSchedASAPUrlAsync(string shortGuid) {
            this.BuildWebSchedASAPUrlAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void BuildWebSchedASAPUrlAsync(string shortGuid, object userState) {
            if ((this.BuildWebSchedASAPUrlOperationCompleted == null)) {
                this.BuildWebSchedASAPUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildWebSchedASAPUrlOperationCompleted);
            }
            this.InvokeAsync("BuildWebSchedASAPUrl", new object[] {
                        shortGuid}, this.BuildWebSchedASAPUrlOperationCompleted, userState);
        }
        
        private void OnBuildWebSchedASAPUrlOperationCompleted(object arg) {
            if ((this.BuildWebSchedASAPUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildWebSchedASAPUrlCompleted(this, new BuildWebSchedASAPUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildPatientPortalStatementUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildPatientPortalStatementUrl(string shortGuid) {
            object[] results = this.Invoke("BuildPatientPortalStatementUrl", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildPatientPortalStatementUrlAsync(string shortGuid) {
            this.BuildPatientPortalStatementUrlAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void BuildPatientPortalStatementUrlAsync(string shortGuid, object userState) {
            if ((this.BuildPatientPortalStatementUrlOperationCompleted == null)) {
                this.BuildPatientPortalStatementUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildPatientPortalStatementUrlOperationCompleted);
            }
            this.InvokeAsync("BuildPatientPortalStatementUrl", new object[] {
                        shortGuid}, this.BuildPatientPortalStatementUrlOperationCompleted, userState);
        }
        
        private void OnBuildPatientPortalStatementUrlOperationCompleted(object arg) {
            if ((this.BuildPatientPortalStatementUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildPatientPortalStatementUrlCompleted(this, new BuildPatientPortalStatementUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildFeaturePortalUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildFeaturePortalUrl(string registrationKey, string eService) {
            object[] results = this.Invoke("BuildFeaturePortalUrl", new object[] {
                        registrationKey,
                        eService});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildFeaturePortalUrlAsync(string registrationKey, string eService) {
            this.BuildFeaturePortalUrlAsync(registrationKey, eService, null);
        }
        
        /// <remarks/>
        public void BuildFeaturePortalUrlAsync(string registrationKey, string eService, object userState) {
            if ((this.BuildFeaturePortalUrlOperationCompleted == null)) {
                this.BuildFeaturePortalUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildFeaturePortalUrlOperationCompleted);
            }
            this.InvokeAsync("BuildFeaturePortalUrl", new object[] {
                        registrationKey,
                        eService}, this.BuildFeaturePortalUrlOperationCompleted, userState);
        }
        
        private void OnBuildFeaturePortalUrlOperationCompleted(object arg) {
            if ((this.BuildFeaturePortalUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildFeaturePortalUrlCompleted(this, new BuildFeaturePortalUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildConfirmationRequestUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildConfirmationRequestUrl(string shortGuid) {
            object[] results = this.Invoke("BuildConfirmationRequestUrl", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildConfirmationRequestUrlAsync(string shortGuid) {
            this.BuildConfirmationRequestUrlAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void BuildConfirmationRequestUrlAsync(string shortGuid, object userState) {
            if ((this.BuildConfirmationRequestUrlOperationCompleted == null)) {
                this.BuildConfirmationRequestUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildConfirmationRequestUrlOperationCompleted);
            }
            this.InvokeAsync("BuildConfirmationRequestUrl", new object[] {
                        shortGuid}, this.BuildConfirmationRequestUrlOperationCompleted, userState);
        }
        
        private void OnBuildConfirmationRequestUrlOperationCompleted(object arg) {
            if ((this.BuildConfirmationRequestUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildConfirmationRequestUrlCompleted(this, new BuildConfirmationRequestUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildConfirmationRequestUrlQuic" +
            "k", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildConfirmationRequestUrlQuick(string shortGuid) {
            object[] results = this.Invoke("BuildConfirmationRequestUrlQuick", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildConfirmationRequestUrlQuickAsync(string shortGuid) {
            this.BuildConfirmationRequestUrlQuickAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void BuildConfirmationRequestUrlQuickAsync(string shortGuid, object userState) {
            if ((this.BuildConfirmationRequestUrlQuickOperationCompleted == null)) {
                this.BuildConfirmationRequestUrlQuickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildConfirmationRequestUrlQuickOperationCompleted);
            }
            this.InvokeAsync("BuildConfirmationRequestUrlQuick", new object[] {
                        shortGuid}, this.BuildConfirmationRequestUrlQuickOperationCompleted, userState);
        }
        
        private void OnBuildConfirmationRequestUrlQuickOperationCompleted(object arg) {
            if ((this.BuildConfirmationRequestUrlQuickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildConfirmationRequestUrlQuickCompleted(this, new BuildConfirmationRequestUrlQuickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildOAuthUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildOAuthUrl(string registrationKey, string appName) {
            object[] results = this.Invoke("BuildOAuthUrl", new object[] {
                        registrationKey,
                        appName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildOAuthUrlAsync(string registrationKey, string appName) {
            this.BuildOAuthUrlAsync(registrationKey, appName, null);
        }
        
        /// <remarks/>
        public void BuildOAuthUrlAsync(string registrationKey, string appName, object userState) {
            if ((this.BuildOAuthUrlOperationCompleted == null)) {
                this.BuildOAuthUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildOAuthUrlOperationCompleted);
            }
            this.InvokeAsync("BuildOAuthUrl", new object[] {
                        registrationKey,
                        appName}, this.BuildOAuthUrlOperationCompleted, userState);
        }
        
        private void OnBuildOAuthUrlOperationCompleted(object arg) {
            if ((this.BuildOAuthUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildOAuthUrlCompleted(this, new BuildOAuthUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetCloudMaxSessions", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCloudMaxSessions(string officeData) {
            object[] results = this.Invoke("GetCloudMaxSessions", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCloudMaxSessionsAsync(string officeData) {
            this.GetCloudMaxSessionsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetCloudMaxSessionsAsync(string officeData, object userState) {
            if ((this.GetCloudMaxSessionsOperationCompleted == null)) {
                this.GetCloudMaxSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCloudMaxSessionsOperationCompleted);
            }
            this.InvokeAsync("GetCloudMaxSessions", new object[] {
                        officeData}, this.GetCloudMaxSessionsOperationCompleted, userState);
        }
        
        private void OnGetCloudMaxSessionsOperationCompleted(object arg) {
            if ((this.GetCloudMaxSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCloudMaxSessionsCompleted(this, new GetCloudMaxSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetThinfinityLicenseUsers", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetThinfinityLicenseUsers(string officeData) {
            object[] results = this.Invoke("GetThinfinityLicenseUsers", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetThinfinityLicenseUsersAsync(string officeData) {
            this.GetThinfinityLicenseUsersAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetThinfinityLicenseUsersAsync(string officeData, object userState) {
            if ((this.GetThinfinityLicenseUsersOperationCompleted == null)) {
                this.GetThinfinityLicenseUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThinfinityLicenseUsersOperationCompleted);
            }
            this.InvokeAsync("GetThinfinityLicenseUsers", new object[] {
                        officeData}, this.GetThinfinityLicenseUsersOperationCompleted, userState);
        }
        
        private void OnGetThinfinityLicenseUsersOperationCompleted(object arg) {
            if ((this.GetThinfinityLicenseUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThinfinityLicenseUsersCompleted(this, new GetThinfinityLicenseUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetMaxAtoZSizeGB", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMaxAtoZSizeGB(string officeData) {
            object[] results = this.Invoke("GetMaxAtoZSizeGB", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxAtoZSizeGBAsync(string officeData) {
            this.GetMaxAtoZSizeGBAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetMaxAtoZSizeGBAsync(string officeData, object userState) {
            if ((this.GetMaxAtoZSizeGBOperationCompleted == null)) {
                this.GetMaxAtoZSizeGBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxAtoZSizeGBOperationCompleted);
            }
            this.InvokeAsync("GetMaxAtoZSizeGB", new object[] {
                        officeData}, this.GetMaxAtoZSizeGBOperationCompleted, userState);
        }
        
        private void OnGetMaxAtoZSizeGBOperationCompleted(object arg) {
            if ((this.GetMaxAtoZSizeGBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxAtoZSizeGBCompleted(this, new GetMaxAtoZSizeGBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UpsertCloudMaxSessions", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertCloudMaxSessions(string officeData) {
            object[] results = this.Invoke("UpsertCloudMaxSessions", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertCloudMaxSessionsAsync(string officeData) {
            this.UpsertCloudMaxSessionsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void UpsertCloudMaxSessionsAsync(string officeData, object userState) {
            if ((this.UpsertCloudMaxSessionsOperationCompleted == null)) {
                this.UpsertCloudMaxSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertCloudMaxSessionsOperationCompleted);
            }
            this.InvokeAsync("UpsertCloudMaxSessions", new object[] {
                        officeData}, this.UpsertCloudMaxSessionsOperationCompleted, userState);
        }
        
        private void OnUpsertCloudMaxSessionsOperationCompleted(object arg) {
            if ((this.UpsertCloudMaxSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertCloudMaxSessionsCompleted(this, new UpsertCloudMaxSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/RecordCloudSessionsInUse", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecordCloudSessionsInUse(string officeData) {
            object[] results = this.Invoke("RecordCloudSessionsInUse", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecordCloudSessionsInUseAsync(string officeData) {
            this.RecordCloudSessionsInUseAsync(officeData, null);
        }
        
        /// <remarks/>
        public void RecordCloudSessionsInUseAsync(string officeData, object userState) {
            if ((this.RecordCloudSessionsInUseOperationCompleted == null)) {
                this.RecordCloudSessionsInUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordCloudSessionsInUseOperationCompleted);
            }
            this.InvokeAsync("RecordCloudSessionsInUse", new object[] {
                        officeData}, this.RecordCloudSessionsInUseOperationCompleted, userState);
        }
        
        private void OnRecordCloudSessionsInUseOperationCompleted(object arg) {
            if ((this.RecordCloudSessionsInUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordCloudSessionsInUseCompleted(this, new RecordCloudSessionsInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/RecordCloudStorageSizeUsed", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecordCloudStorageSizeUsed(string officeData) {
            object[] results = this.Invoke("RecordCloudStorageSizeUsed", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecordCloudStorageSizeUsedAsync(string officeData) {
            this.RecordCloudStorageSizeUsedAsync(officeData, null);
        }
        
        /// <remarks/>
        public void RecordCloudStorageSizeUsedAsync(string officeData, object userState) {
            if ((this.RecordCloudStorageSizeUsedOperationCompleted == null)) {
                this.RecordCloudStorageSizeUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordCloudStorageSizeUsedOperationCompleted);
            }
            this.InvokeAsync("RecordCloudStorageSizeUsed", new object[] {
                        officeData}, this.RecordCloudStorageSizeUsedOperationCompleted, userState);
        }
        
        private void OnRecordCloudStorageSizeUsedOperationCompleted(object arg) {
            if ((this.RecordCloudStorageSizeUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordCloudStorageSizeUsedCompleted(this, new RecordCloudStorageSizeUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetDropboxAuthorizationUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDropboxAuthorizationUrl(long registrationKeyNum) {
            object[] results = this.Invoke("GetDropboxAuthorizationUrl", new object[] {
                        registrationKeyNum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDropboxAuthorizationUrlAsync(long registrationKeyNum) {
            this.GetDropboxAuthorizationUrlAsync(registrationKeyNum, null);
        }
        
        /// <remarks/>
        public void GetDropboxAuthorizationUrlAsync(long registrationKeyNum, object userState) {
            if ((this.GetDropboxAuthorizationUrlOperationCompleted == null)) {
                this.GetDropboxAuthorizationUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDropboxAuthorizationUrlOperationCompleted);
            }
            this.InvokeAsync("GetDropboxAuthorizationUrl", new object[] {
                        registrationKeyNum}, this.GetDropboxAuthorizationUrlOperationCompleted, userState);
        }
        
        private void OnGetDropboxAuthorizationUrlOperationCompleted(object arg) {
            if ((this.GetDropboxAuthorizationUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDropboxAuthorizationUrlCompleted(this, new GetDropboxAuthorizationUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetDropboxAccessToken", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDropboxAccessToken(string code) {
            object[] results = this.Invoke("GetDropboxAccessToken", new object[] {
                        code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDropboxAccessTokenAsync(string code) {
            this.GetDropboxAccessTokenAsync(code, null);
        }
        
        /// <remarks/>
        public void GetDropboxAccessTokenAsync(string code, object userState) {
            if ((this.GetDropboxAccessTokenOperationCompleted == null)) {
                this.GetDropboxAccessTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDropboxAccessTokenOperationCompleted);
            }
            this.InvokeAsync("GetDropboxAccessToken", new object[] {
                        code}, this.GetDropboxAccessTokenOperationCompleted, userState);
        }
        
        private void OnGetDropboxAccessTokenOperationCompleted(object arg) {
            if ((this.GetDropboxAccessTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDropboxAccessTokenCompleted(this, new GetDropboxAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetGoogleAuthorizationUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGoogleAuthorizationUrl(long registrationKeyNum) {
            object[] results = this.Invoke("GetGoogleAuthorizationUrl", new object[] {
                        registrationKeyNum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGoogleAuthorizationUrlAsync(long registrationKeyNum) {
            this.GetGoogleAuthorizationUrlAsync(registrationKeyNum, null);
        }
        
        /// <remarks/>
        public void GetGoogleAuthorizationUrlAsync(long registrationKeyNum, object userState) {
            if ((this.GetGoogleAuthorizationUrlOperationCompleted == null)) {
                this.GetGoogleAuthorizationUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGoogleAuthorizationUrlOperationCompleted);
            }
            this.InvokeAsync("GetGoogleAuthorizationUrl", new object[] {
                        registrationKeyNum}, this.GetGoogleAuthorizationUrlOperationCompleted, userState);
        }
        
        private void OnGetGoogleAuthorizationUrlOperationCompleted(object arg) {
            if ((this.GetGoogleAuthorizationUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGoogleAuthorizationUrlCompleted(this, new GetGoogleAuthorizationUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetGoogleAuthorizationUrlLoopba" +
            "ckIpAddressFlow", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGoogleAuthorizationUrlLoopbackIpAddressFlow(long registrationKeyNum) {
            object[] results = this.Invoke("GetGoogleAuthorizationUrlLoopbackIpAddressFlow", new object[] {
                        registrationKeyNum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGoogleAuthorizationUrlLoopbackIpAddressFlowAsync(long registrationKeyNum) {
            this.GetGoogleAuthorizationUrlLoopbackIpAddressFlowAsync(registrationKeyNum, null);
        }
        
        /// <remarks/>
        public void GetGoogleAuthorizationUrlLoopbackIpAddressFlowAsync(long registrationKeyNum, object userState) {
            if ((this.GetGoogleAuthorizationUrlLoopbackIpAddressFlowOperationCompleted == null)) {
                this.GetGoogleAuthorizationUrlLoopbackIpAddressFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGoogleAuthorizationUrlLoopbackIpAddressFlowOperationCompleted);
            }
            this.InvokeAsync("GetGoogleAuthorizationUrlLoopbackIpAddressFlow", new object[] {
                        registrationKeyNum}, this.GetGoogleAuthorizationUrlLoopbackIpAddressFlowOperationCompleted, userState);
        }
        
        private void OnGetGoogleAuthorizationUrlLoopbackIpAddressFlowOperationCompleted(object arg) {
            if ((this.GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompleted(this, new GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetGoogleAccessToken", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGoogleAccessToken(string officeData) {
            object[] results = this.Invoke("GetGoogleAccessToken", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGoogleAccessTokenAsync(string officeData) {
            this.GetGoogleAccessTokenAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetGoogleAccessTokenAsync(string officeData, object userState) {
            if ((this.GetGoogleAccessTokenOperationCompleted == null)) {
                this.GetGoogleAccessTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGoogleAccessTokenOperationCompleted);
            }
            this.InvokeAsync("GetGoogleAccessToken", new object[] {
                        officeData}, this.GetGoogleAccessTokenOperationCompleted, userState);
        }
        
        private void OnGetGoogleAccessTokenOperationCompleted(object arg) {
            if ((this.GetGoogleAccessTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGoogleAccessTokenCompleted(this, new GetGoogleAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetCareCreditOAuthToken", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCareCreditOAuthToken(string officeData) {
            object[] results = this.Invoke("GetCareCreditOAuthToken", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCareCreditOAuthTokenAsync(string officeData) {
            this.GetCareCreditOAuthTokenAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetCareCreditOAuthTokenAsync(string officeData, object userState) {
            if ((this.GetCareCreditOAuthTokenOperationCompleted == null)) {
                this.GetCareCreditOAuthTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCareCreditOAuthTokenOperationCompleted);
            }
            this.InvokeAsync("GetCareCreditOAuthToken", new object[] {
                        officeData}, this.GetCareCreditOAuthTokenOperationCompleted, userState);
        }
        
        private void OnGetCareCreditOAuthTokenOperationCompleted(object arg) {
            if ((this.GetCareCreditOAuthTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCareCreditOAuthTokenCompleted(this, new GetCareCreditOAuthTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetCareCreditWebToken", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCareCreditWebToken(string officeData) {
            object[] results = this.Invoke("GetCareCreditWebToken", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCareCreditWebTokenAsync(string officeData) {
            this.GetCareCreditWebTokenAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetCareCreditWebTokenAsync(string officeData, object userState) {
            if ((this.GetCareCreditWebTokenOperationCompleted == null)) {
                this.GetCareCreditWebTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCareCreditWebTokenOperationCompleted);
            }
            this.InvokeAsync("GetCareCreditWebToken", new object[] {
                        officeData}, this.GetCareCreditWebTokenOperationCompleted, userState);
        }
        
        private void OnGetCareCreditWebTokenOperationCompleted(object arg) {
            if ((this.GetCareCreditWebTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCareCreditWebTokenCompleted(this, new GetCareCreditWebTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetAdvertisingPostcardsAccounts" +
            "", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAdvertisingPostcardsAccounts(string officeData) {
            object[] results = this.Invoke("GetAdvertisingPostcardsAccounts", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdvertisingPostcardsAccountsAsync(string officeData) {
            this.GetAdvertisingPostcardsAccountsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetAdvertisingPostcardsAccountsAsync(string officeData, object userState) {
            if ((this.GetAdvertisingPostcardsAccountsOperationCompleted == null)) {
                this.GetAdvertisingPostcardsAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdvertisingPostcardsAccountsOperationCompleted);
            }
            this.InvokeAsync("GetAdvertisingPostcardsAccounts", new object[] {
                        officeData}, this.GetAdvertisingPostcardsAccountsOperationCompleted, userState);
        }
        
        private void OnGetAdvertisingPostcardsAccountsOperationCompleted(object arg) {
            if ((this.GetAdvertisingPostcardsAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdvertisingPostcardsAccountsCompleted(this, new GetAdvertisingPostcardsAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ManageAdvertisingPostcardsAccou" +
            "nt", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ManageAdvertisingPostcardsAccount(string officeData) {
            object[] results = this.Invoke("ManageAdvertisingPostcardsAccount", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ManageAdvertisingPostcardsAccountAsync(string officeData) {
            this.ManageAdvertisingPostcardsAccountAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ManageAdvertisingPostcardsAccountAsync(string officeData, object userState) {
            if ((this.ManageAdvertisingPostcardsAccountOperationCompleted == null)) {
                this.ManageAdvertisingPostcardsAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManageAdvertisingPostcardsAccountOperationCompleted);
            }
            this.InvokeAsync("ManageAdvertisingPostcardsAccount", new object[] {
                        officeData}, this.ManageAdvertisingPostcardsAccountOperationCompleted, userState);
        }
        
        private void OnManageAdvertisingPostcardsAccountOperationCompleted(object arg) {
            if ((this.ManageAdvertisingPostcardsAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManageAdvertisingPostcardsAccountCompleted(this, new ManageAdvertisingPostcardsAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetPostcardManiaSSO", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPostcardManiaSSO(string officeData) {
            object[] results = this.Invoke("GetPostcardManiaSSO", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostcardManiaSSOAsync(string officeData) {
            this.GetPostcardManiaSSOAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetPostcardManiaSSOAsync(string officeData, object userState) {
            if ((this.GetPostcardManiaSSOOperationCompleted == null)) {
                this.GetPostcardManiaSSOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostcardManiaSSOOperationCompleted);
            }
            this.InvokeAsync("GetPostcardManiaSSO", new object[] {
                        officeData}, this.GetPostcardManiaSSOOperationCompleted, userState);
        }
        
        private void OnGetPostcardManiaSSOOperationCompleted(object arg) {
            if ((this.GetPostcardManiaSSOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostcardManiaSSOCompleted(this, new GetPostcardManiaSSOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UploadPostcardManiaPatientList", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadPostcardManiaPatientList(string officeData) {
            object[] results = this.Invoke("UploadPostcardManiaPatientList", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPostcardManiaPatientListAsync(string officeData) {
            this.UploadPostcardManiaPatientListAsync(officeData, null);
        }
        
        /// <remarks/>
        public void UploadPostcardManiaPatientListAsync(string officeData, object userState) {
            if ((this.UploadPostcardManiaPatientListOperationCompleted == null)) {
                this.UploadPostcardManiaPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPostcardManiaPatientListOperationCompleted);
            }
            this.InvokeAsync("UploadPostcardManiaPatientList", new object[] {
                        officeData}, this.UploadPostcardManiaPatientListOperationCompleted, userState);
        }
        
        private void OnUploadPostcardManiaPatientListOperationCompleted(object arg) {
            if ((this.UploadPostcardManiaPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPostcardManiaPatientListCompleted(this, new UploadPostcardManiaPatientListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/LogCareCreditTransaction", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogCareCreditTransaction(string officeData) {
            object[] results = this.Invoke("LogCareCreditTransaction", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogCareCreditTransactionAsync(string officeData) {
            this.LogCareCreditTransactionAsync(officeData, null);
        }
        
        /// <remarks/>
        public void LogCareCreditTransactionAsync(string officeData, object userState) {
            if ((this.LogCareCreditTransactionOperationCompleted == null)) {
                this.LogCareCreditTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogCareCreditTransactionOperationCompleted);
            }
            this.InvokeAsync("LogCareCreditTransaction", new object[] {
                        officeData}, this.LogCareCreditTransactionOperationCompleted, userState);
        }
        
        private void OnLogCareCreditTransactionOperationCompleted(object arg) {
            if ((this.LogCareCreditTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogCareCreditTransactionCompleted(this, new LogCareCreditTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ValidateVersion", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateVersion(string officeData) {
            object[] results = this.Invoke("ValidateVersion", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateVersionAsync(string officeData) {
            this.ValidateVersionAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ValidateVersionAsync(string officeData, object userState) {
            if ((this.ValidateVersionOperationCompleted == null)) {
                this.ValidateVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateVersionOperationCompleted);
            }
            this.InvokeAsync("ValidateVersion", new object[] {
                        officeData}, this.ValidateVersionOperationCompleted, userState);
        }
        
        private void OnValidateVersionOperationCompleted(object arg) {
            if ((this.ValidateVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateVersionCompleted(this, new ValidateVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ConfirmationRequestSend", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmationRequestSend(string officeData) {
            object[] results = this.Invoke("ConfirmationRequestSend", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmationRequestSendAsync(string officeData) {
            this.ConfirmationRequestSendAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ConfirmationRequestSendAsync(string officeData, object userState) {
            if ((this.ConfirmationRequestSendOperationCompleted == null)) {
                this.ConfirmationRequestSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmationRequestSendOperationCompleted);
            }
            this.InvokeAsync("ConfirmationRequestSend", new object[] {
                        officeData}, this.ConfirmationRequestSendOperationCompleted, userState);
        }
        
        private void OnConfirmationRequestSendOperationCompleted(object arg) {
            if ((this.ConfirmationRequestSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmationRequestSendCompleted(this, new ConfirmationRequestSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/HandleConfirmationsApptChanged", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HandleConfirmationsApptChanged(string officeData) {
            object[] results = this.Invoke("HandleConfirmationsApptChanged", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HandleConfirmationsApptChangedAsync(string officeData) {
            this.HandleConfirmationsApptChangedAsync(officeData, null);
        }
        
        /// <remarks/>
        public void HandleConfirmationsApptChangedAsync(string officeData, object userState) {
            if ((this.HandleConfirmationsApptChangedOperationCompleted == null)) {
                this.HandleConfirmationsApptChangedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHandleConfirmationsApptChangedOperationCompleted);
            }
            this.InvokeAsync("HandleConfirmationsApptChanged", new object[] {
                        officeData}, this.HandleConfirmationsApptChangedOperationCompleted, userState);
        }
        
        private void OnHandleConfirmationsApptChangedOperationCompleted(object arg) {
            if ((this.HandleConfirmationsApptChangedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HandleConfirmationsApptChangedCompleted(this, new HandleConfirmationsApptChangedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ThankYouSend", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ThankYouSend(string officeData) {
            object[] results = this.Invoke("ThankYouSend", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ThankYouSendAsync(string officeData) {
            this.ThankYouSendAsync(officeData, null);
        }
        
        /// <remarks/>
        public void ThankYouSendAsync(string officeData, object userState) {
            if ((this.ThankYouSendOperationCompleted == null)) {
                this.ThankYouSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnThankYouSendOperationCompleted);
            }
            this.InvokeAsync("ThankYouSend", new object[] {
                        officeData}, this.ThankYouSendOperationCompleted, userState);
        }
        
        private void OnThankYouSendOperationCompleted(object arg) {
            if ((this.ThankYouSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ThankYouSendCompleted(this, new ThankYouSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/NewPatThankYouSend", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewPatThankYouSend(string officeData) {
            object[] results = this.Invoke("NewPatThankYouSend", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewPatThankYouSendAsync(string officeData) {
            this.NewPatThankYouSendAsync(officeData, null);
        }
        
        /// <remarks/>
        public void NewPatThankYouSendAsync(string officeData, object userState) {
            if ((this.NewPatThankYouSendOperationCompleted == null)) {
                this.NewPatThankYouSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewPatThankYouSendOperationCompleted);
            }
            this.InvokeAsync("NewPatThankYouSend", new object[] {
                        officeData}, this.NewPatThankYouSendOperationCompleted, userState);
        }
        
        private void OnNewPatThankYouSendOperationCompleted(object arg) {
            if ((this.NewPatThankYouSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewPatThankYouSendCompleted(this, new NewPatThankYouSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/RetrieveWebFormURL", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveWebFormURL(string shortGuid) {
            object[] results = this.Invoke("RetrieveWebFormURL", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveWebFormURLAsync(string shortGuid) {
            this.RetrieveWebFormURLAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void RetrieveWebFormURLAsync(string shortGuid, object userState) {
            if ((this.RetrieveWebFormURLOperationCompleted == null)) {
                this.RetrieveWebFormURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveWebFormURLOperationCompleted);
            }
            this.InvokeAsync("RetrieveWebFormURL", new object[] {
                        shortGuid}, this.RetrieveWebFormURLOperationCompleted, userState);
        }
        
        private void OnRetrieveWebFormURLOperationCompleted(object arg) {
            if ((this.RetrieveWebFormURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveWebFormURLCompleted(this, new RetrieveWebFormURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/RegisterCalendarEvent", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterCalendarEvent(string officeData) {
            object[] results = this.Invoke("RegisterCalendarEvent", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterCalendarEventAsync(string officeData) {
            this.RegisterCalendarEventAsync(officeData, null);
        }
        
        /// <remarks/>
        public void RegisterCalendarEventAsync(string officeData, object userState) {
            if ((this.RegisterCalendarEventOperationCompleted == null)) {
                this.RegisterCalendarEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterCalendarEventOperationCompleted);
            }
            this.InvokeAsync("RegisterCalendarEvent", new object[] {
                        officeData}, this.RegisterCalendarEventOperationCompleted, userState);
        }
        
        private void OnRegisterCalendarEventOperationCompleted(object arg) {
            if ((this.RegisterCalendarEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCalendarEventCompleted(this, new RegisterCalendarEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/BuildApptThankYouIcs", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildApptThankYouIcs(string shortGuid) {
            object[] results = this.Invoke("BuildApptThankYouIcs", new object[] {
                        shortGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildApptThankYouIcsAsync(string shortGuid) {
            this.BuildApptThankYouIcsAsync(shortGuid, null);
        }
        
        /// <remarks/>
        public void BuildApptThankYouIcsAsync(string shortGuid, object userState) {
            if ((this.BuildApptThankYouIcsOperationCompleted == null)) {
                this.BuildApptThankYouIcsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildApptThankYouIcsOperationCompleted);
            }
            this.InvokeAsync("BuildApptThankYouIcs", new object[] {
                        shortGuid}, this.BuildApptThankYouIcsOperationCompleted, userState);
        }
        
        private void OnBuildApptThankYouIcsOperationCompleted(object arg) {
            if ((this.BuildApptThankYouIcsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildApptThankYouIcsCompleted(this, new BuildApptThankYouIcsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SmsSend", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SmsSend(string officeData) {
            object[] results = this.Invoke("SmsSend", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SmsSendAsync(string officeData) {
            this.SmsSendAsync(officeData, null);
        }
        
        /// <remarks/>
        public void SmsSendAsync(string officeData, object userState) {
            if ((this.SmsSendOperationCompleted == null)) {
                this.SmsSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSmsSendOperationCompleted);
            }
            this.InvokeAsync("SmsSend", new object[] {
                        officeData}, this.SmsSendOperationCompleted, userState);
        }
        
        private void OnSmsSendOperationCompleted(object arg) {
            if ((this.SmsSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SmsSendCompleted(this, new SmsSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/RequestListenerProxyPrefs", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RequestListenerProxyPrefs(string officeData) {
            object[] results = this.Invoke("RequestListenerProxyPrefs", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequestListenerProxyPrefsAsync(string officeData) {
            this.RequestListenerProxyPrefsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void RequestListenerProxyPrefsAsync(string officeData, object userState) {
            if ((this.RequestListenerProxyPrefsOperationCompleted == null)) {
                this.RequestListenerProxyPrefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestListenerProxyPrefsOperationCompleted);
            }
            this.InvokeAsync("RequestListenerProxyPrefs", new object[] {
                        officeData}, this.RequestListenerProxyPrefsOperationCompleted, userState);
        }
        
        private void OnRequestListenerProxyPrefsOperationCompleted(object arg) {
            if ((this.RequestListenerProxyPrefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestListenerProxyPrefsCompleted(this, new RequestListenerProxyPrefsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetEConnectorType", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEConnectorType(string officeData) {
            object[] results = this.Invoke("GetEConnectorType", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEConnectorTypeAsync(string officeData) {
            this.GetEConnectorTypeAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetEConnectorTypeAsync(string officeData, object userState) {
            if ((this.GetEConnectorTypeOperationCompleted == null)) {
                this.GetEConnectorTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEConnectorTypeOperationCompleted);
            }
            this.InvokeAsync("GetEConnectorType", new object[] {
                        officeData}, this.GetEConnectorTypeOperationCompleted, userState);
        }
        
        private void OnGetEConnectorTypeOperationCompleted(object arg) {
            if ((this.GetEConnectorTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEConnectorTypeCompleted(this, new GetEConnectorTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SetEConnectorType", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetEConnectorType(string officeData, bool isListening) {
            object[] results = this.Invoke("SetEConnectorType", new object[] {
                        officeData,
                        isListening});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetEConnectorTypeAsync(string officeData, bool isListening) {
            this.SetEConnectorTypeAsync(officeData, isListening, null);
        }
        
        /// <remarks/>
        public void SetEConnectorTypeAsync(string officeData, bool isListening, object userState) {
            if ((this.SetEConnectorTypeOperationCompleted == null)) {
                this.SetEConnectorTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEConnectorTypeOperationCompleted);
            }
            this.InvokeAsync("SetEConnectorType", new object[] {
                        officeData,
                        isListening}, this.SetEConnectorTypeOperationCompleted, userState);
        }
        
        private void OnSetEConnectorTypeOperationCompleted(object arg) {
            if ((this.SetEConnectorTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEConnectorTypeCompleted(this, new SetEConnectorTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SetEConnectorStats", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetEConnectorStats(string officeData) {
            object[] results = this.Invoke("SetEConnectorStats", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetEConnectorStatsAsync(string officeData) {
            this.SetEConnectorStatsAsync(officeData, null);
        }
        
        /// <remarks/>
        public void SetEConnectorStatsAsync(string officeData, object userState) {
            if ((this.SetEConnectorStatsOperationCompleted == null)) {
                this.SetEConnectorStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEConnectorStatsOperationCompleted);
            }
            this.InvokeAsync("SetEConnectorStats", new object[] {
                        officeData}, this.SetEConnectorStatsOperationCompleted, userState);
        }
        
        private void OnSetEConnectorStatsOperationCompleted(object arg) {
            if ((this.SetEConnectorStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEConnectorStatsCompleted(this, new SetEConnectorStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/InsertPaySimpleACHId", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPaySimpleACHId(string officeData) {
            object[] results = this.Invoke("InsertPaySimpleACHId", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPaySimpleACHIdAsync(string officeData) {
            this.InsertPaySimpleACHIdAsync(officeData, null);
        }
        
        /// <remarks/>
        public void InsertPaySimpleACHIdAsync(string officeData, object userState) {
            if ((this.InsertPaySimpleACHIdOperationCompleted == null)) {
                this.InsertPaySimpleACHIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPaySimpleACHIdOperationCompleted);
            }
            this.InvokeAsync("InsertPaySimpleACHId", new object[] {
                        officeData}, this.InsertPaySimpleACHIdOperationCompleted, userState);
        }
        
        private void OnInsertPaySimpleACHIdOperationCompleted(object arg) {
            if ((this.InsertPaySimpleACHIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPaySimpleACHIdCompleted(this, new InsertPaySimpleACHIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetPaySimpleWebHookUrl", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPaySimpleWebHookUrl() {
            object[] results = this.Invoke("GetPaySimpleWebHookUrl", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaySimpleWebHookUrlAsync() {
            this.GetPaySimpleWebHookUrlAsync(null);
        }
        
        /// <remarks/>
        public void GetPaySimpleWebHookUrlAsync(object userState) {
            if ((this.GetPaySimpleWebHookUrlOperationCompleted == null)) {
                this.GetPaySimpleWebHookUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaySimpleWebHookUrlOperationCompleted);
            }
            this.InvokeAsync("GetPaySimpleWebHookUrl", new object[0], this.GetPaySimpleWebHookUrlOperationCompleted, userState);
        }
        
        private void OnGetPaySimpleWebHookUrlOperationCompleted(object arg) {
            if ((this.GetPaySimpleWebHookUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaySimpleWebHookUrlCompleted(this, new GetPaySimpleWebHookUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ValidateEService", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateEService(string registrationKey, string eService) {
            object[] results = this.Invoke("ValidateEService", new object[] {
                        registrationKey,
                        eService});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateEServiceAsync(string registrationKey, string eService) {
            this.ValidateEServiceAsync(registrationKey, eService, null);
        }
        
        /// <remarks/>
        public void ValidateEServiceAsync(string registrationKey, string eService, object userState) {
            if ((this.ValidateEServiceOperationCompleted == null)) {
                this.ValidateEServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateEServiceOperationCompleted);
            }
            this.InvokeAsync("ValidateEService", new object[] {
                        registrationKey,
                        eService}, this.ValidateEServiceOperationCompleted, userState);
        }
        
        private void OnValidateEServiceOperationCompleted(object arg) {
            if ((this.ValidateEServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateEServiceCompleted(this, new ValidateEServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/IsBetaAvailableForThisCustomer", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsBetaAvailableForThisCustomer(string registrationKey, string proposedBetaVersion) {
            object[] results = this.Invoke("IsBetaAvailableForThisCustomer", new object[] {
                        registrationKey,
                        proposedBetaVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsBetaAvailableForThisCustomerAsync(string registrationKey, string proposedBetaVersion) {
            this.IsBetaAvailableForThisCustomerAsync(registrationKey, proposedBetaVersion, null);
        }
        
        /// <remarks/>
        public void IsBetaAvailableForThisCustomerAsync(string registrationKey, string proposedBetaVersion, object userState) {
            if ((this.IsBetaAvailableForThisCustomerOperationCompleted == null)) {
                this.IsBetaAvailableForThisCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsBetaAvailableForThisCustomerOperationCompleted);
            }
            this.InvokeAsync("IsBetaAvailableForThisCustomer", new object[] {
                        registrationKey,
                        proposedBetaVersion}, this.IsBetaAvailableForThisCustomerOperationCompleted, userState);
        }
        
        private void OnIsBetaAvailableForThisCustomerOperationCompleted(object arg) {
            if ((this.IsBetaAvailableForThisCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsBetaAvailableForThisCustomerCompleted(this, new IsBetaAvailableForThisCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/EmailHostingSignup", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmailHostingSignup(string officeData) {
            object[] results = this.Invoke("EmailHostingSignup", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmailHostingSignupAsync(string officeData) {
            this.EmailHostingSignupAsync(officeData, null);
        }
        
        /// <remarks/>
        public void EmailHostingSignupAsync(string officeData, object userState) {
            if ((this.EmailHostingSignupOperationCompleted == null)) {
                this.EmailHostingSignupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailHostingSignupOperationCompleted);
            }
            this.InvokeAsync("EmailHostingSignup", new object[] {
                        officeData}, this.EmailHostingSignupOperationCompleted, userState);
        }
        
        private void OnEmailHostingSignupOperationCompleted(object arg) {
            if ((this.EmailHostingSignupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailHostingSignupCompleted(this, new EmailHostingSignupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/EmailHostingChangeClinicStatus", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmailHostingChangeClinicStatus(string officeData) {
            object[] results = this.Invoke("EmailHostingChangeClinicStatus", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmailHostingChangeClinicStatusAsync(string officeData) {
            this.EmailHostingChangeClinicStatusAsync(officeData, null);
        }
        
        /// <remarks/>
        public void EmailHostingChangeClinicStatusAsync(string officeData, object userState) {
            if ((this.EmailHostingChangeClinicStatusOperationCompleted == null)) {
                this.EmailHostingChangeClinicStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailHostingChangeClinicStatusOperationCompleted);
            }
            this.InvokeAsync("EmailHostingChangeClinicStatus", new object[] {
                        officeData}, this.EmailHostingChangeClinicStatusOperationCompleted, userState);
        }
        
        private void OnEmailHostingChangeClinicStatusOperationCompleted(object arg) {
            if ((this.EmailHostingChangeClinicStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailHostingChangeClinicStatusCompleted(this, new EmailHostingChangeClinicStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ODXamValidateLogin", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ODXamValidateLogin(string appDetails) {
            object[] results = this.Invoke("ODXamValidateLogin", new object[] {
                        appDetails});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ODXamValidateLoginAsync(string appDetails) {
            this.ODXamValidateLoginAsync(appDetails, null);
        }
        
        /// <remarks/>
        public void ODXamValidateLoginAsync(string appDetails, object userState) {
            if ((this.ODXamValidateLoginOperationCompleted == null)) {
                this.ODXamValidateLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnODXamValidateLoginOperationCompleted);
            }
            this.InvokeAsync("ODXamValidateLogin", new object[] {
                        appDetails}, this.ODXamValidateLoginOperationCompleted, userState);
        }
        
        private void OnODXamValidateLoginOperationCompleted(object arg) {
            if ((this.ODXamValidateLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ODXamValidateLoginCompleted(this, new ODXamValidateLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ODXamTwoFactorAuth", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ODXamTwoFactorAuth(string twoFactorAuthRequestJSON) {
            object[] results = this.Invoke("ODXamTwoFactorAuth", new object[] {
                        twoFactorAuthRequestJSON});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ODXamTwoFactorAuthAsync(string twoFactorAuthRequestJSON) {
            this.ODXamTwoFactorAuthAsync(twoFactorAuthRequestJSON, null);
        }
        
        /// <remarks/>
        public void ODXamTwoFactorAuthAsync(string twoFactorAuthRequestJSON, object userState) {
            if ((this.ODXamTwoFactorAuthOperationCompleted == null)) {
                this.ODXamTwoFactorAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnODXamTwoFactorAuthOperationCompleted);
            }
            this.InvokeAsync("ODXamTwoFactorAuth", new object[] {
                        twoFactorAuthRequestJSON}, this.ODXamTwoFactorAuthOperationCompleted, userState);
        }
        
        private void OnODXamTwoFactorAuthOperationCompleted(object arg) {
            if ((this.ODXamTwoFactorAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ODXamTwoFactorAuthCompleted(this, new ODXamTwoFactorAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/ODXamSubmitUnhandledException", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ODXamSubmitUnhandledException(string bugSubmissionJSON) {
            object[] results = this.Invoke("ODXamSubmitUnhandledException", new object[] {
                        bugSubmissionJSON});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ODXamSubmitUnhandledExceptionAsync(string bugSubmissionJSON) {
            this.ODXamSubmitUnhandledExceptionAsync(bugSubmissionJSON, null);
        }
        
        /// <remarks/>
        public void ODXamSubmitUnhandledExceptionAsync(string bugSubmissionJSON, object userState) {
            if ((this.ODXamSubmitUnhandledExceptionOperationCompleted == null)) {
                this.ODXamSubmitUnhandledExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnODXamSubmitUnhandledExceptionOperationCompleted);
            }
            this.InvokeAsync("ODXamSubmitUnhandledException", new object[] {
                        bugSubmissionJSON}, this.ODXamSubmitUnhandledExceptionOperationCompleted, userState);
        }
        
        private void OnODXamSubmitUnhandledExceptionOperationCompleted(object arg) {
            if ((this.ODXamSubmitUnhandledExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ODXamSubmitUnhandledExceptionCompleted(this, new ODXamSubmitUnhandledExceptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/SendPushNotification", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendPushNotification(string officeData, string pushPayloadJson) {
            object[] results = this.Invoke("SendPushNotification", new object[] {
                        officeData,
                        pushPayloadJson});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendPushNotificationAsync(string officeData, string pushPayloadJson) {
            this.SendPushNotificationAsync(officeData, pushPayloadJson, null);
        }
        
        /// <remarks/>
        public void SendPushNotificationAsync(string officeData, string pushPayloadJson, object userState) {
            if ((this.SendPushNotificationOperationCompleted == null)) {
                this.SendPushNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPushNotificationOperationCompleted);
            }
            this.InvokeAsync("SendPushNotification", new object[] {
                        officeData,
                        pushPayloadJson}, this.SendPushNotificationOperationCompleted, userState);
        }
        
        private void OnSendPushNotificationOperationCompleted(object arg) {
            if ((this.SendPushNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPushNotificationCompleted(this, new SendPushNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetFeaturesForCustomer", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFeaturesForCustomer(string registrationKey) {
            object[] results = this.Invoke("GetFeaturesForCustomer", new object[] {
                        registrationKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFeaturesForCustomerAsync(string registrationKey) {
            this.GetFeaturesForCustomerAsync(registrationKey, null);
        }
        
        /// <remarks/>
        public void GetFeaturesForCustomerAsync(string registrationKey, object userState) {
            if ((this.GetFeaturesForCustomerOperationCompleted == null)) {
                this.GetFeaturesForCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeaturesForCustomerOperationCompleted);
            }
            this.InvokeAsync("GetFeaturesForCustomer", new object[] {
                        registrationKey}, this.GetFeaturesForCustomerOperationCompleted, userState);
        }
        
        private void OnGetFeaturesForCustomerOperationCompleted(object arg) {
            if ((this.GetFeaturesForCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeaturesForCustomerCompleted(this, new GetFeaturesForCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetFeaturesForEService", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFeaturesForEService(string registrationKey, string eService) {
            object[] results = this.Invoke("GetFeaturesForEService", new object[] {
                        registrationKey,
                        eService});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFeaturesForEServiceAsync(string registrationKey, string eService) {
            this.GetFeaturesForEServiceAsync(registrationKey, eService, null);
        }
        
        /// <remarks/>
        public void GetFeaturesForEServiceAsync(string registrationKey, string eService, object userState) {
            if ((this.GetFeaturesForEServiceOperationCompleted == null)) {
                this.GetFeaturesForEServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeaturesForEServiceOperationCompleted);
            }
            this.InvokeAsync("GetFeaturesForEService", new object[] {
                        registrationKey,
                        eService}, this.GetFeaturesForEServiceOperationCompleted, userState);
        }
        
        private void OnGetFeaturesForEServiceOperationCompleted(object arg) {
            if ((this.GetFeaturesForEServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeaturesForEServiceCompleted(this, new GetFeaturesForEServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/EnableAdditionalFeatures", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EnableAdditionalFeatures(string officeData) {
            object[] results = this.Invoke("EnableAdditionalFeatures", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnableAdditionalFeaturesAsync(string officeData) {
            this.EnableAdditionalFeaturesAsync(officeData, null);
        }
        
        /// <remarks/>
        public void EnableAdditionalFeaturesAsync(string officeData, object userState) {
            if ((this.EnableAdditionalFeaturesOperationCompleted == null)) {
                this.EnableAdditionalFeaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableAdditionalFeaturesOperationCompleted);
            }
            this.InvokeAsync("EnableAdditionalFeatures", new object[] {
                        officeData}, this.EnableAdditionalFeaturesOperationCompleted, userState);
        }
        
        private void OnEnableAdditionalFeaturesOperationCompleted(object arg) {
            if ((this.EnableAdditionalFeaturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableAdditionalFeaturesCompleted(this, new EnableAdditionalFeaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/CheckFHIRAPIKey", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFHIRAPIKey(string officeData) {
            object[] results = this.Invoke("CheckFHIRAPIKey", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFHIRAPIKeyAsync(string officeData) {
            this.CheckFHIRAPIKeyAsync(officeData, null);
        }
        
        /// <remarks/>
        public void CheckFHIRAPIKeyAsync(string officeData, object userState) {
            if ((this.CheckFHIRAPIKeyOperationCompleted == null)) {
                this.CheckFHIRAPIKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFHIRAPIKeyOperationCompleted);
            }
            this.InvokeAsync("CheckFHIRAPIKey", new object[] {
                        officeData}, this.CheckFHIRAPIKeyOperationCompleted, userState);
        }
        
        private void OnCheckFHIRAPIKeyOperationCompleted(object arg) {
            if ((this.CheckFHIRAPIKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFHIRAPIKeyCompleted(this, new CheckFHIRAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GenerateFHIRAPIKey", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateFHIRAPIKey(string officeData) {
            object[] results = this.Invoke("GenerateFHIRAPIKey", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateFHIRAPIKeyAsync(string officeData) {
            this.GenerateFHIRAPIKeyAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GenerateFHIRAPIKeyAsync(string officeData, object userState) {
            if ((this.GenerateFHIRAPIKeyOperationCompleted == null)) {
                this.GenerateFHIRAPIKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateFHIRAPIKeyOperationCompleted);
            }
            this.InvokeAsync("GenerateFHIRAPIKey", new object[] {
                        officeData}, this.GenerateFHIRAPIKeyOperationCompleted, userState);
        }
        
        private void OnGenerateFHIRAPIKeyOperationCompleted(object arg) {
            if ((this.GenerateFHIRAPIKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateFHIRAPIKeyCompleted(this, new GenerateFHIRAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/AssignFHIRAPIKey", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AssignFHIRAPIKey(string officeData) {
            object[] results = this.Invoke("AssignFHIRAPIKey", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AssignFHIRAPIKeyAsync(string officeData) {
            this.AssignFHIRAPIKeyAsync(officeData, null);
        }
        
        /// <remarks/>
        public void AssignFHIRAPIKeyAsync(string officeData, object userState) {
            if ((this.AssignFHIRAPIKeyOperationCompleted == null)) {
                this.AssignFHIRAPIKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignFHIRAPIKeyOperationCompleted);
            }
            this.InvokeAsync("AssignFHIRAPIKey", new object[] {
                        officeData}, this.AssignFHIRAPIKeyOperationCompleted, userState);
        }
        
        private void OnAssignFHIRAPIKeyOperationCompleted(object arg) {
            if ((this.AssignFHIRAPIKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignFHIRAPIKeyCompleted(this, new AssignFHIRAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/GetFHIRAPIKeysForOffice", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFHIRAPIKeysForOffice(string officeData) {
            object[] results = this.Invoke("GetFHIRAPIKeysForOffice", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFHIRAPIKeysForOfficeAsync(string officeData) {
            this.GetFHIRAPIKeysForOfficeAsync(officeData, null);
        }
        
        /// <remarks/>
        public void GetFHIRAPIKeysForOfficeAsync(string officeData, object userState) {
            if ((this.GetFHIRAPIKeysForOfficeOperationCompleted == null)) {
                this.GetFHIRAPIKeysForOfficeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFHIRAPIKeysForOfficeOperationCompleted);
            }
            this.InvokeAsync("GetFHIRAPIKeysForOffice", new object[] {
                        officeData}, this.GetFHIRAPIKeysForOfficeOperationCompleted, userState);
        }
        
        private void OnGetFHIRAPIKeysForOfficeOperationCompleted(object arg) {
            if ((this.GetFHIRAPIKeysForOfficeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFHIRAPIKeysForOfficeCompleted(this, new GetFHIRAPIKeysForOfficeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.opendental.com/OpenDentalWebServiceHQ/UpdateFHIRKeyStatus", RequestNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", ResponseNamespace="https://www.opendental.com/OpenDentalWebServiceHQ/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateFHIRKeyStatus(string officeData) {
            object[] results = this.Invoke("UpdateFHIRKeyStatus", new object[] {
                        officeData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFHIRKeyStatusAsync(string officeData) {
            this.UpdateFHIRKeyStatusAsync(officeData, null);
        }
        
        /// <remarks/>
        public void UpdateFHIRKeyStatusAsync(string officeData, object userState) {
            if ((this.UpdateFHIRKeyStatusOperationCompleted == null)) {
                this.UpdateFHIRKeyStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFHIRKeyStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateFHIRKeyStatus", new object[] {
                        officeData}, this.UpdateFHIRKeyStatusOperationCompleted, userState);
        }
        
        private void OnUpdateFHIRKeyStatusOperationCompleted(object arg) {
            if ((this.UpdateFHIRKeyStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFHIRKeyStatusCompleted(this, new UpdateFHIRKeyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }

    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadRedactedDataPatientPortalInvitesCompletedEventHandler(object sender, UploadRedactedDataPatientPortalInvitesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadRedactedDataPatientPortalInvitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadRedactedDataPatientPortalInvitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadPatientPortalXWebResponsesCompletedEventHandler(object sender, UploadPatientPortalXWebResponsesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPatientPortalXWebResponsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPatientPortalXWebResponsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProcessEConnectorFailoverCompletedEventHandler(object sender, ProcessEConnectorFailoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessEConnectorFailoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessEConnectorFailoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TestConnectionCompletedEventHandler(object sender, TestConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TestConnectionDbCompletedEventHandler(object sender, TestConnectionDbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionDbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionDbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SubmitUnhandledExceptionCompletedEventHandler(object sender, SubmitUnhandledExceptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitUnhandledExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitUnhandledExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void EServiceLogUploadCompletedEventHandler(object sender, EServiceLogUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EServiceLogUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EServiceLogUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreateNewHelpKeyCompletedEventHandler(object sender, CreateNewHelpKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewHelpKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewHelpKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetManualPageCompletedEventHandler(object sender, GetManualPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetManualPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetManualPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStableManualVersionCompletedEventHandler(object sender, GetStableManualVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStableManualVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStableManualVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CanadaCarrierUpdateCompletedEventHandler(object sender, CanadaCarrierUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanadaCarrierUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanadaCarrierUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CustomerUpdateCommittedCompletedEventHandler(object sender, CustomerUpdateCommittedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerUpdateCommittedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerUpdateCommittedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LicenseAgreementAcceptedCompletedEventHandler(object sender, LicenseAgreementAcceptedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LicenseAgreementAcceptedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LicenseAgreementAcceptedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProvisionTenDlcBrandCompletedEventHandler(object sender, ProvisionTenDlcBrandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProvisionTenDlcBrandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProvisionTenDlcBrandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void EServiceSetupCompletedEventHandler(object sender, EServiceSetupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EServiceSetupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EServiceSetupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RecordValidateDbBackupResultsCompletedEventHandler(object sender, RecordValidateDbBackupResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordValidateDbBackupResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordValidateDbBackupResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLatestCloudClientVersionCompletedEventHandler(object sender, GetLatestCloudClientVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestCloudClientVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestCloudClientVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SupplementalBackupHandshakeCompletedEventHandler(object sender, SupplementalBackupHandshakeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SupplementalBackupHandshakeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SupplementalBackupHandshakeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetSupplementalBackupStatusCompletedEventHandler(object sender, SetSupplementalBackupStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSupplementalBackupStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSupplementalBackupStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetSmsPatientPhoneOptInCompletedEventHandler(object sender, SetSmsPatientPhoneOptInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSmsPatientPhoneOptInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSmsPatientPhoneOptInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMobileSettingsCompletedEventHandler(object sender, GetMobileSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMobileSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMobileSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMobileSettings2FACompletedEventHandler(object sender, GetMobileSettings2FACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMobileSettings2FACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMobileSettings2FACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpsertMobileSettingsCompletedEventHandler(object sender, UpsertMobileSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertMobileSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertMobileSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PerformRefreshCacheCompletedEventHandler(object sender, PerformRefreshCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerformRefreshCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformRefreshCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateShortGUIDsCompletedEventHandler(object sender, GenerateShortGUIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateShortGUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateShortGUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateWebAppUrlCompletedEventHandler(object sender, GenerateWebAppUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateWebAppUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateWebAppUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetIsClosedBetaParticipantCompletedEventHandler(object sender, GetIsClosedBetaParticipantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIsClosedBetaParticipantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIsClosedBetaParticipantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateWebAppUrlCompletedEventHandler(object sender, ValidateWebAppUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateWebAppUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateWebAppUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildWebLanderUrlCompletedEventHandler(object sender, BuildWebLanderUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildWebLanderUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildWebLanderUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildWebSchedRecallURLsCompletedEventHandler(object sender, BuildWebSchedRecallURLsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildWebSchedRecallURLsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildWebSchedRecallURLsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildWebSchedNewPatApptURLsCompletedEventHandler(object sender, BuildWebSchedNewPatApptURLsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildWebSchedNewPatApptURLsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildWebSchedNewPatApptURLsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void WebSchedRecallNotificationsSendCompletedEventHandler(object sender, WebSchedRecallNotificationsSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSchedRecallNotificationsSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSchedRecallNotificationsSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void WebSchedAsapSendCompletedEventHandler(object sender, WebSchedAsapSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSchedAsapSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSchedAsapSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildWebSchedUrlCompletedEventHandler(object sender, BuildWebSchedUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildWebSchedUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildWebSchedUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildWebSchedASAPUrlCompletedEventHandler(object sender, BuildWebSchedASAPUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildWebSchedASAPUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildWebSchedASAPUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildPatientPortalStatementUrlCompletedEventHandler(object sender, BuildPatientPortalStatementUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildPatientPortalStatementUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildPatientPortalStatementUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildFeaturePortalUrlCompletedEventHandler(object sender, BuildFeaturePortalUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildFeaturePortalUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildFeaturePortalUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildConfirmationRequestUrlCompletedEventHandler(object sender, BuildConfirmationRequestUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildConfirmationRequestUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildConfirmationRequestUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildConfirmationRequestUrlQuickCompletedEventHandler(object sender, BuildConfirmationRequestUrlQuickCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildConfirmationRequestUrlQuickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildConfirmationRequestUrlQuickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildOAuthUrlCompletedEventHandler(object sender, BuildOAuthUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildOAuthUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildOAuthUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCloudMaxSessionsCompletedEventHandler(object sender, GetCloudMaxSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCloudMaxSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCloudMaxSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetThinfinityLicenseUsersCompletedEventHandler(object sender, GetThinfinityLicenseUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThinfinityLicenseUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThinfinityLicenseUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMaxAtoZSizeGBCompletedEventHandler(object sender, GetMaxAtoZSizeGBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxAtoZSizeGBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxAtoZSizeGBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpsertCloudMaxSessionsCompletedEventHandler(object sender, UpsertCloudMaxSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertCloudMaxSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertCloudMaxSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RecordCloudSessionsInUseCompletedEventHandler(object sender, RecordCloudSessionsInUseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordCloudSessionsInUseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordCloudSessionsInUseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RecordCloudStorageSizeUsedCompletedEventHandler(object sender, RecordCloudStorageSizeUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordCloudStorageSizeUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordCloudStorageSizeUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDropboxAuthorizationUrlCompletedEventHandler(object sender, GetDropboxAuthorizationUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDropboxAuthorizationUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDropboxAuthorizationUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDropboxAccessTokenCompletedEventHandler(object sender, GetDropboxAccessTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDropboxAccessTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDropboxAccessTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetGoogleAuthorizationUrlCompletedEventHandler(object sender, GetGoogleAuthorizationUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGoogleAuthorizationUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGoogleAuthorizationUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompletedEventHandler(object sender, GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGoogleAuthorizationUrlLoopbackIpAddressFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetGoogleAccessTokenCompletedEventHandler(object sender, GetGoogleAccessTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGoogleAccessTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGoogleAccessTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCareCreditOAuthTokenCompletedEventHandler(object sender, GetCareCreditOAuthTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCareCreditOAuthTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCareCreditOAuthTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCareCreditWebTokenCompletedEventHandler(object sender, GetCareCreditWebTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCareCreditWebTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCareCreditWebTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAdvertisingPostcardsAccountsCompletedEventHandler(object sender, GetAdvertisingPostcardsAccountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdvertisingPostcardsAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdvertisingPostcardsAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ManageAdvertisingPostcardsAccountCompletedEventHandler(object sender, ManageAdvertisingPostcardsAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManageAdvertisingPostcardsAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManageAdvertisingPostcardsAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPostcardManiaSSOCompletedEventHandler(object sender, GetPostcardManiaSSOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostcardManiaSSOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostcardManiaSSOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadPostcardManiaPatientListCompletedEventHandler(object sender, UploadPostcardManiaPatientListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPostcardManiaPatientListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPostcardManiaPatientListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LogCareCreditTransactionCompletedEventHandler(object sender, LogCareCreditTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogCareCreditTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogCareCreditTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateVersionCompletedEventHandler(object sender, ValidateVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ConfirmationRequestSendCompletedEventHandler(object sender, ConfirmationRequestSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmationRequestSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmationRequestSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HandleConfirmationsApptChangedCompletedEventHandler(object sender, HandleConfirmationsApptChangedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HandleConfirmationsApptChangedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HandleConfirmationsApptChangedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ThankYouSendCompletedEventHandler(object sender, ThankYouSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThankYouSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ThankYouSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NewPatThankYouSendCompletedEventHandler(object sender, NewPatThankYouSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewPatThankYouSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewPatThankYouSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RetrieveWebFormURLCompletedEventHandler(object sender, RetrieveWebFormURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveWebFormURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveWebFormURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RegisterCalendarEventCompletedEventHandler(object sender, RegisterCalendarEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterCalendarEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterCalendarEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BuildApptThankYouIcsCompletedEventHandler(object sender, BuildApptThankYouIcsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildApptThankYouIcsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildApptThankYouIcsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SmsSendCompletedEventHandler(object sender, SmsSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SmsSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SmsSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RequestListenerProxyPrefsCompletedEventHandler(object sender, RequestListenerProxyPrefsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestListenerProxyPrefsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestListenerProxyPrefsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetEConnectorTypeCompletedEventHandler(object sender, GetEConnectorTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEConnectorTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEConnectorTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetEConnectorTypeCompletedEventHandler(object sender, SetEConnectorTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEConnectorTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEConnectorTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetEConnectorStatsCompletedEventHandler(object sender, SetEConnectorStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEConnectorStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEConnectorStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertPaySimpleACHIdCompletedEventHandler(object sender, InsertPaySimpleACHIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPaySimpleACHIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPaySimpleACHIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPaySimpleWebHookUrlCompletedEventHandler(object sender, GetPaySimpleWebHookUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaySimpleWebHookUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaySimpleWebHookUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ValidateEServiceCompletedEventHandler(object sender, ValidateEServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateEServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateEServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsBetaAvailableForThisCustomerCompletedEventHandler(object sender, IsBetaAvailableForThisCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsBetaAvailableForThisCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsBetaAvailableForThisCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void EmailHostingSignupCompletedEventHandler(object sender, EmailHostingSignupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailHostingSignupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailHostingSignupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void EmailHostingChangeClinicStatusCompletedEventHandler(object sender, EmailHostingChangeClinicStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailHostingChangeClinicStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailHostingChangeClinicStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ODXamValidateLoginCompletedEventHandler(object sender, ODXamValidateLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ODXamValidateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ODXamValidateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ODXamTwoFactorAuthCompletedEventHandler(object sender, ODXamTwoFactorAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ODXamTwoFactorAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ODXamTwoFactorAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ODXamSubmitUnhandledExceptionCompletedEventHandler(object sender, ODXamSubmitUnhandledExceptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ODXamSubmitUnhandledExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ODXamSubmitUnhandledExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendPushNotificationCompletedEventHandler(object sender, SendPushNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendPushNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPushNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFeaturesForCustomerCompletedEventHandler(object sender, GetFeaturesForCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeaturesForCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeaturesForCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFeaturesForEServiceCompletedEventHandler(object sender, GetFeaturesForEServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeaturesForEServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeaturesForEServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void EnableAdditionalFeaturesCompletedEventHandler(object sender, EnableAdditionalFeaturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableAdditionalFeaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableAdditionalFeaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckFHIRAPIKeyCompletedEventHandler(object sender, CheckFHIRAPIKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFHIRAPIKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFHIRAPIKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateFHIRAPIKeyCompletedEventHandler(object sender, GenerateFHIRAPIKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateFHIRAPIKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateFHIRAPIKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AssignFHIRAPIKeyCompletedEventHandler(object sender, AssignFHIRAPIKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignFHIRAPIKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignFHIRAPIKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetFHIRAPIKeysForOfficeCompletedEventHandler(object sender, GetFHIRAPIKeysForOfficeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFHIRAPIKeysForOfficeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFHIRAPIKeysForOfficeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateFHIRKeyStatusCompletedEventHandler(object sender, UpdateFHIRKeyStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFHIRKeyStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFHIRKeyStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateFHIRAPIKeysCompletedEventHandler(object sender, UpdateFHIRAPIKeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFHIRAPIKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFHIRAPIKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591