using System;
using System.Data;
using System.Drawing;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;
using OpenDentBusiness;

namespace OpenDental{
	/// <summary>
	/// Deprecated as of 4/13/2016. Deemed too time-consuming to upkeep the complexity of importing patient info through XML.
	/// </summary>
	public partial class FormImportXML : FormODBase {
		///<summary></summary>
		private Patient _patient;
		private Patient _patientGuarantor;
		private Patient _patientSubscriber;
		private InsPlan _insPlan;
		private InsSub _insSub;
		private Carrier _carrier;
		private string _targetVersion="";
		private string _warnings="";
		///<summary>self, parent, or other</summary>
		private string _guarRelat;
		private string _guarEmp;
		private string _insEmp;
		///<summary>self, parent, spouse, or guardian</summary>
		private string _insRelat;
		private string _noteMedicalComplete;
		private bool _isInsPresent;
		private double _annualMax;
		private double _deductible;
		private Patient _patientExisting;

		///<summary></summary>
		public FormImportXML()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();
			InitializeLayoutManager();
			Lan.F(this);
		}

		private void FormImportXML_Load(object sender, System.EventArgs e) {
			
		}

		///<summary></summary>
		private void butOK_Click(object sender, System.EventArgs e) {
			if(textMain.Text==""){
				MsgBox.Show(this,"Please paste the text generated by the other program into the large box first.");
				return;
			}
			_patient=new Patient();
			_patient.PriProv=PrefC.GetLong(PrefName.PracticeDefaultProv);
			_patient.BillingType=PIn.Long(ClinicPrefs.GetPrefValue(PrefName.PracticeDefaultBillType,Clinics.ClinicNum));
			_patientGuarantor=new Patient();
			_patientGuarantor.PriProv=PrefC.GetLong(PrefName.PracticeDefaultProv);
			_patientGuarantor.BillingType=PIn.Long(ClinicPrefs.GetPrefValue(PrefName.PracticeDefaultBillType,Clinics.ClinicNum));
			_patientSubscriber=new Patient();
			_patientSubscriber.PriProv=PrefC.GetLong(PrefName.PracticeDefaultProv);
			_patientSubscriber.BillingType=PIn.Long(ClinicPrefs.GetPrefValue(PrefName.PracticeDefaultBillType,Clinics.ClinicNum));
			_insSub=new InsSub();
			_insSub.ReleaseInfo=true;
			_insSub.AssignBen=PrefC.GetBool(PrefName.InsDefaultAssignBen);
			_insPlan=new InsPlan();
			_carrier=new Carrier();
			_insRelat="self";//this is the default if not included
			_guarRelat="self";
			_insEmp="";
			_guarEmp="";
			_noteMedicalComplete="";
			_isInsPresent=false;
			_annualMax=-1;
			_deductible=-1;
			XmlTextReader xmlTextReader=new XmlTextReader(new StringReader(textMain.Text));
			xmlTextReader.WhitespaceHandling=WhitespaceHandling.None;
			string element="";
			string textValue="";
			string rootElement="";
			string segment="";//eg PatientIdentification
			string field="";//eg NameLast
			string endelement="";
			_warnings="";
			try{
				while(xmlTextReader.Read()){
					switch(xmlTextReader.NodeType){
						case XmlNodeType.Element:
							element=xmlTextReader.Name;
							if(rootElement==""){//should be the first node
								if(element=="Message"){
									rootElement="Message";
								}
								else{
									throw new Exception(element+" should not be the first element.");
								}
							}
							else if(segment==""){//expecting a new segment
								segment=element;
								if(segment!="MessageHeader"
									&& segment!="PatientIdentification"
									&& segment!="Guarantor"
									&& segment!="Insurance")
								{
									throw new Exception(segment+" is not a recognized segment.");							
								}
							}
							else{//expecting a new field
								field=element;
							}
							if(segment=="Insurance"){
								_isInsPresent=true;
							}
							break;
						case XmlNodeType.Text:
							textValue=xmlTextReader.Value;
							if(field==""){
								throw new Exception("Unexpected text: "+textValue);	
							}
							break;
						case XmlNodeType.EndElement:
							endelement=xmlTextReader.Name;
							if(field==""){//we're not in a field, so we must be closing a segment or rootelement
								if(segment==""){//we're not in a segment, so we must be closing the rootelement
									if(rootElement=="Message"){
										rootElement="";
									}
									else{
										throw new Exception("Message closing element expected.");
									}
								}
								else{//must be closing a segment
									segment="";
								}
							}
							else{//closing a field
								field="";
								textValue="";
							}
							break;
					}//switch 
					if(rootElement==""){
						break;//this will ignore anything after the message endelement
					}
					if(field!="" && textValue!=""){
						if(segment=="MessageHeader"){
							ProcessMSH(field,textValue);
						}
						else if(segment=="PatientIdentification"){
							ProcessPID(field,textValue);
						}
						else if(segment=="Guarantor"){
							ProcessGT(field,textValue);
						}
						else if(segment=="Insurance"){
							ProcessINS(field,textValue);
						}
					}
				}//while
			}
			catch(Exception ex){
				MessageBox.Show(ex.Message);
				//MsgBox.Show(this,"Error in the XML format.");
				xmlTextReader.Close();
				return;
			}
			finally{
				xmlTextReader.Close();
			}
			//Warnings and errors-----------------------------------------------------------------------------
			if(_patient.LName=="" || _patient.FName=="" || _patient.Birthdate.Year<1880){
				MsgBox.Show(this,"Patient first and last name and birthdate are required.  Could not import.");
				return;
			}
			//if guarRelat is not self, and name and birthdate not supplied, no error.  Just make guar self.
			if(_guarRelat!="self"){
				if(_patientGuarantor.LName=="" || _patientGuarantor.FName=="" || _patientGuarantor.Birthdate.Year<1880){
					_warnings+="Guarantor information incomplete.  Guarantor will be self.\r\n";
					_guarRelat="self";
				}
			}
			if(_isInsPresent){
				if(_carrier.CarrierName==""){
					_warnings+="Insurance CompanyName is missing. No insurance info will be imported.\r\n";
					_isInsPresent=false;
				}
				else if(_insRelat!="self"){
					if(_patientSubscriber.LName=="" || _patientSubscriber.FName=="" || _patientSubscriber.Birthdate.Year<1880){
						_warnings+="Subscriber name or birthdate is missing. No insurance info will be imported.\r\n";
						_isInsPresent=false;
					}
				}
				else if(_insSub.SubscriberID==""){
					_warnings+="PolicyNumber/SubscriberID missing.\r\n";
					_insSub.SubscriberID=" ";
				}
			}
			if(_warnings!=""){
				if(MessageBox.Show("It's safe to import, but you should be aware of the following issues:\r\n"+_warnings+"\r\nContinue with Import?","Warnings",MessageBoxButtons.OKCancel)!=DialogResult.OK){
					return;
				}
			}
			
			//Patient-------------------------------------------------------------------------------------
			//DataTable table;
			long patNum=Patients.GetPatNumByNameAndBirthday(_patient.LName,_patient.FName,_patient.Birthdate);
			Patient patientExisting=null;
			_patientExisting=null;//we will need this to do an update.
			if(patNum != 0){//a patient already exists, so only add missing fields
				patientExisting=Patients.GetPat(patNum);
				_patientExisting=patientExisting.Copy();
				if(patientExisting.MiddleI==""){//only alter existing if blank
					patientExisting.MiddleI=_patient.MiddleI;
				}
				if(_patient.Gender!=PatientGender.Unknown){
					patientExisting.Gender=_patient.Gender;
				}
				if(patientExisting.Preferred==""){
					patientExisting.Preferred=_patient.Preferred;
				}
				if(patientExisting.Address==""){
					patientExisting.Address=_patient.Address;
				}
				if(patientExisting.Address2==""){
					patientExisting.Address2=_patient.Address2;
				}
				if(patientExisting.City==""){
					patientExisting.City=_patient.City;
				}
				if(patientExisting.State==""){
					patientExisting.State=_patient.State;
				}
				if(patientExisting.Zip==""){
					patientExisting.Zip=_patient.Zip;
				}
				if(patientExisting.HmPhone==""){
					patientExisting.HmPhone=_patient.HmPhone;
				}
				if(patientExisting.Email==""){
					patientExisting.Email=_patient.Email;
				}
				if(patientExisting.WkPhone==""){
					patientExisting.WkPhone=_patient.WkPhone;
				}
				if(patientExisting.Position==PatientPosition.Single){
					patientExisting.Position=_patient.Position;
				}
				if(patientExisting.SSN==""){
					patientExisting.SSN=_patient.SSN;
				}
				patientExisting.AddrNote+=_patient.AddrNote;//concat
				Patients.Update(patientExisting,_patientExisting);
				PatientNote patientNote=PatientNotes.Refresh(patientExisting.PatNum,patientExisting.Guarantor);
				patientNote.MedicalComp+=_noteMedicalComplete;
				PatientNotes.Update(patientNote,patientExisting.Guarantor);
				//guarantor will not be altered in any way
			}//if patient already exists
			else{//patient is new, so insert
				Patients.Insert(_patient,false);
				SecurityLogs.MakeLogEntry(Permissions.PatientCreate,_patient.PatNum,"Created from Import Patient XML tool.");
				_patientExisting=_patient.Copy();
				_patient.Guarantor=_patient.PatNum;//this can be changed later.
				Patients.Update(_patient,_patientExisting);
				PatientNote patientNote=PatientNotes.Refresh(_patient.PatNum,_patient.Guarantor);
				patientNote.MedicalComp+=_noteMedicalComplete;
				PatientNotes.Update(patientNote,_patient.Guarantor);
			}
			//guar-----------------------------------------------------------------------------------------------------
			if(patientExisting==null){//only add or alter guarantor for new patients
				if(_guarRelat=="self"){
					//pat is already set with guar as self
					//ignore all guar fields except EmployerName
					_patientExisting=_patient.Copy();
					_patient.EmployerNum=Employers.GetEmployerNum(_guarEmp);
					Patients.Update(_patient,_patientExisting);
				}
				else{
					//if guarRelat is not self, and name and birthdate not supplied, a warning was issued, and relat was changed to self.
					//add guarantor or attach to an existing guarantor
					long guarantorNum=Patients.GetPatNumByNameAndBirthday(_patientGuarantor.LName,_patientGuarantor.FName,_patientGuarantor.Birthdate);
					if(guarantorNum != 0){//a guar already exists, so simply attach. Make no other changes
						_patientExisting=_patient.Copy();
						_patient.Guarantor=guarantorNum;
						if(_guarRelat=="parent"){
							_patient.Position=PatientPosition.Child;
						}
						Patients.Update(_patient,_patientExisting);
					}
					else{//we need to completely create guar, then attach
						Patients.Insert(_patientGuarantor,false);
						SecurityLogs.MakeLogEntry(Permissions.PatientCreate,_patientGuarantor.PatNum,"Created from Import Patient XML tool.");
						//set guar for guar
						_patientExisting=_patientGuarantor.Copy();
						_patientGuarantor.Guarantor=_patientGuarantor.PatNum;
						_patientGuarantor.EmployerNum=Employers.GetEmployerNum(_guarEmp);
						Patients.Update(_patientGuarantor,_patientExisting);
						//set guar for pat
						_patientExisting=_patient.Copy();
						_patient.Guarantor=_patientGuarantor.PatNum;
						if(_guarRelat=="parent"){
							_patient.Position=PatientPosition.Child;
						}
						Patients.Update(_patient,_patientExisting);
					}
				}
			}
			//subsc--------------------------------------------------------------------------------------------------
			if(!_isInsPresent){
				//this takes care of missing carrier name or subscriber info.
				MsgBox.Show(this,"Done");
				DialogResult=DialogResult.OK;
			}
			if(_insRelat=="self"){
				_insSub.Subscriber=_patient.PatNum;
			}
			else{//we need to find or add the subscriber
				patNum=Patients.GetPatNumByNameAndBirthday(_patientSubscriber.LName,_patientSubscriber.FName,_patientSubscriber.Birthdate);
				if(patNum != 0){//a subsc already exists, so simply attach. Make no other changes
					_insSub.Subscriber=patNum;
				}
				else{//need to create and attach a subscriber
					Patients.Insert(_patientSubscriber,false);
					SecurityLogs.MakeLogEntry(Permissions.PatientCreate,_patientSubscriber.PatNum,"Created from Import Patient XML tool.");
					//set guar to same guar as patient
					_patientExisting=_patientSubscriber.Copy();
					_patientSubscriber.Guarantor=_patient.Guarantor;
					Patients.Update(_patientSubscriber,_patientExisting);
					_insSub.Subscriber=_patientSubscriber.PatNum;
				}
			}
			//carrier-------------------------------------------------------------------------------------------------
			//Carriers.Cur=carrier;
			_carrier=Carriers.GetIdentical(_carrier);//this automatically finds or creates a carrier
			//plan------------------------------------------------------------------------------------------------------			
			_insPlan.EmployerNum=Employers.GetEmployerNum(_insEmp);
			_insPlan.CarrierNum=_carrier.CarrierNum;
			InsPlans.Insert(_insPlan);
			//Attach plan to subscriber
			_insSub.PlanNum=_insPlan.PlanNum;
			InsSubs.Insert(_insSub);
			//Then attach plan
			List <PatPlan> listPatPlan=PatPlans.Refresh(_patient.PatNum);
			PatPlan patplan=new PatPlan();
			patplan.Ordinal=(byte)(listPatPlan.Count+1);//so the ordinal of the first entry will be 1, NOT 0.
			patplan.PatNum=_patient.PatNum;
			patplan.InsSubNum=_insSub.InsSubNum;
			switch(_insRelat){
			  case "self":
					patplan.Relationship=Relat.Self;
					break;
				case "parent":
					patplan.Relationship=Relat.Child;
					break;
				case "spouse":
					patplan.Relationship=Relat.Spouse;
					break;
				case "guardian":
					patplan.Relationship=Relat.Dependent;
					break;
			}
			PatPlans.Insert(patplan);
			//benefits
			if(_annualMax!=-1 && CovCats.GetCount(true) > 0){
				Benefit benefit=new Benefit();
				benefit.BenefitType=InsBenefitType.Limitations;
				benefit.CovCatNum=CovCats.GetFirst(true).CovCatNum;
				benefit.MonetaryAmt=_annualMax;
				benefit.PlanNum=_insPlan.PlanNum;
				benefit.TimePeriod=BenefitTimePeriod.CalendarYear;
				Benefits.Insert(benefit);
			}
			if(_deductible!=-1 && CovCats.GetCount(true) > 0) {
				Benefit benefit=new Benefit();
				benefit.BenefitType=InsBenefitType.Deductible;
				benefit.CovCatNum=CovCats.GetFirst(true).CovCatNum;
				benefit.MonetaryAmt=_deductible;
				benefit.PlanNum=_insPlan.PlanNum;
				benefit.TimePeriod=BenefitTimePeriod.CalendarYear;
				Benefits.Insert(benefit);
			}
			MsgBox.Show(this,"Done");
			DialogResult=DialogResult.OK;
		}

		private void ProcessMSH(string field,string textValue){
			//MessageBox.Show("MSH, "+field+", "+textValue);
			switch(field){
			  case "DateTimeOfMessage"://ignore
					break;
				case "MessageType":
					if(textValue!="AdmitPatient"){
						throw new Exception("MessageType must be AdmitPatient");
					}
					break;
				case "OpenDentalVersion":
					_targetVersion=textValue;
					break;
				default:
					_warnings+="Unrecognized field: "+field+"\r\n";
					break;
			}
		}

		private void ProcessPID(string field,string textValue){
			//MessageBox.Show("PID, "+field+", "+textValue);
			switch(field){
				case "NameLast":
					_patient.LName=textValue;
					break;
				case "NameFirst":
					_patient.FName=textValue;
					break;
				case "NameMiddle":
					_patient.MiddleI=textValue;
					break;
				case "DateOfBirth":
					_patient.Birthdate=DateTime.MinValue;
					if(textValue.Length>0){
						try{
							_patient.Birthdate=DateTime.Parse(textValue);
						}
						catch{
							_warnings+="Invalid DateOfBirth\r\n";
						}
					}
					break;
				case "Sex":
					_patient.Gender=PatientGender.Unknown;
					if(textValue.Length>0){
						switch(textValue.Substring(0,1).ToUpper()){
							case "M":
								_patient.Gender=PatientGender.Male;
								break;
							case "F":
								_patient.Gender=PatientGender.Female;
								break;
							case "U":
								_patient.Gender=PatientGender.Unknown;
								break;
							default:
								_warnings+="Invalid Sex\r\n";
								break;
						}
					}
					break;
				case "AliasFirst":
					_patient.Preferred=textValue;
					break;
				case "AddressStreet":
					_patient.Address=textValue;
					break;				
				case "AddressOtherDesignation":
					_patient.Address2=textValue;
					break;				
				case "AddressCity":
					_patient.City=textValue;
					break;				
				case "AddressStateOrProvince":
					_patient.State=textValue;//we won't enforce two letters
					break;				
				case "AddressZipOrPostalCode":
					_patient.Zip=textValue;
					break;				
				case "PhoneHome":
					_patient.HmPhone=TelephoneNumbers.ReFormat(textValue);
					break;				
				case "EmailAddressHome":
					_patient.Email=textValue;
					break;				
				case "PhoneBusiness":
					_patient.WkPhone=TelephoneNumbers.ReFormat(textValue);
					break;
				case "MaritalStatus":
					_patient.Position=PatientPosition.Single;
					if(textValue.Length>0){
						switch(textValue.Substring(0,1).ToUpper()){
							case "M":
								_patient.Position=PatientPosition.Married;
								break;
							case "S":
								_patient.Position=PatientPosition.Single;
								break;
							case "W":
								_patient.Position=PatientPosition.Widowed;
								break;
							default:
								_warnings+="Invalid MaritalStatus\r\n";
								break;
						}
					}
					break;				
				case "SSN":
					_patient.SSN=textValue;
					if(CultureInfo.CurrentCulture.Name=="en-US"){
						if(Regex.IsMatch(_patient.SSN,@"^\d\d\d-\d\d-\d\d\d\d$")){
							_patient.SSN=_patient.SSN.Replace("-","");
						}
						if(!Regex.IsMatch(_patient.SSN,@"^\d{9}$")){//if not exactly 9 digits
							_warnings+="Invalid SSN\r\n";
						}
					}
					break;				
				case "NotePhoneAddress":
					_patient.AddrNote=textValue;
					break;
				case "NoteMedicalComplete":
					_noteMedicalComplete=textValue;
					break;
				default:
					_warnings+="Unrecognized field: "+field+"\r\n";
					break;
			}
		}

		private void ProcessGT(string field,string textValue){
			//MessageBox.Show("GT, "+field+", "+textValue);
			switch(field){
				case "NameLast":
					_patientGuarantor.LName=textValue;
					break;
				case "NameFirst":
					_patientGuarantor.FName=textValue;
					break;
				case "NameMiddle":
					_patientGuarantor.MiddleI=textValue;
					break;
				case "AddressStreet":
					_patientGuarantor.Address=textValue;
					break;				
				case "AddressOtherDesignation":
					_patientGuarantor.Address2=textValue;
					break;				
				case "AddressCity":
					_patientGuarantor.City=textValue;
					break;				
				case "AddressStateOrProvince":
					_patientGuarantor.State=textValue;//we won't enforce two letters
					break;				
				case "AddressZipOrPostalCode":
					_patientGuarantor.Zip=textValue;
					break;				
				case "PhoneHome":
					_patientGuarantor.HmPhone=TelephoneNumbers.ReFormat(textValue);
					break;		
				case "EmailAddressHome":
					_patientGuarantor.Email=textValue;
					break;	
				case "PhoneBusiness":
					_patientGuarantor.WkPhone=TelephoneNumbers.ReFormat(textValue);
					break;
				case "DateOfBirth":
					_patientGuarantor.Birthdate=DateTime.MinValue;
					if(textValue.Length>0){
						try{
							_patientGuarantor.Birthdate=DateTime.Parse(textValue);
						}
						catch{
							_warnings+="Invalid DateOfBirth\r\n";
						}
					}
					break;
				case "Sex":
					_patientGuarantor.Gender=PatientGender.Unknown;
					if(textValue.Length>0){
						switch(textValue.Substring(0,1).ToUpper()){
							case "M":
								_patientGuarantor.Gender=PatientGender.Male;
								break;
							case "F":
								_patientGuarantor.Gender=PatientGender.Female;
								break;
							case "U":
								_patientGuarantor.Gender=PatientGender.Unknown;
								break;
							default:
								_warnings+="Invalid Sex\r\n";
								break;
						}
					}
					break;
				case "GuarantorRelationship":
					switch(textValue.ToLower()){
						case "self":
							_guarRelat="self";
							break;
						case "parent":
							_guarRelat="parent";
							break;
						case "other":
							_guarRelat="other";
							break;
						case "":
							_guarRelat="self";
							break;
						default:
							_guarRelat="self";
							_warnings+="Invalid GuarantorRelationship\r\n";
							break;
					}
					break;
				case "SSN":
					_patientGuarantor.SSN=textValue;
					if(CultureInfo.CurrentCulture.Name=="en-US"){
						if(Regex.IsMatch(_patientGuarantor.SSN,@"^\d\d\d-\d\d-\d\d\d\d$")){
							_patientGuarantor.SSN=_patientGuarantor.SSN.Replace("-","");
						}
						if(!Regex.IsMatch(_patientGuarantor.SSN,@"^\d{9}$")){//if not exactly 9 digits
							_warnings+="Invalid SSN\r\n";
						}
					}
					break;		
				case "EmployerName":
					_guarEmp=textValue;
					break;
				case "MaritalStatus":
					_patientGuarantor.Position=PatientPosition.Single;
					if(textValue.Length>0){
						switch(textValue.Substring(0,1).ToUpper()){
							case "M":
								_patientGuarantor.Position=PatientPosition.Married;
								break;
							case "S":
								_patientGuarantor.Position=PatientPosition.Single;
								break;
							case "W":
								_patientGuarantor.Position=PatientPosition.Widowed;
								break;
							default:
								_warnings+="Invalid MaritalStatus\r\n";
								break;
						}
					}
					break;				
				default:
					_warnings+="Unrecognized field: "+field+"\r\n";
					break;
			}
		}

		private void ProcessINS(string field,string textValue){
			//MessageBox.Show("INS, "+field+", "+textValue);
			switch(field){
				case "CompanyName":
					_carrier.CarrierName=textValue;
					break;
				case "AddressStreet":
					_carrier.Address=textValue;
					break;
				case "AddressOtherDesignation":
					_carrier.Address2=textValue;
					break;
				case "AddressCity":
					_carrier.City=textValue;
					break;
				case "AddressStateOrProvince":
					_carrier.State=textValue;//we won't enforce two letters
					break;
				case "AddressZipOrPostalCode":
					_carrier.Zip=textValue;
					break;
				case "PhoneNumber":
					_carrier.Phone=TelephoneNumbers.ReFormat(textValue);
					break;
				case "GroupNumber":
					_insPlan.GroupNum=textValue;
					break;
				case "GroupName":
					_insPlan.GroupName=textValue;
					break;
				case "InsuredGroupEmpName":
					_insEmp=textValue;
					break;
				case "PlanEffectiveDate":
					_insSub.DateEffective=DateTime.MinValue;
					if(textValue.Length>0){
						try{
							_insSub.DateEffective=DateTime.Parse(textValue);
						}
						catch{
							_warnings+="Invalid PlanEffectiveDate\r\n";
						}
					}
					break;
				case "PlanExpirationDate":
					_insSub.DateTerm=DateTime.MinValue;
					if(textValue.Length>0){
						try{
							_insSub.DateTerm=DateTime.Parse(textValue);
						}
						catch{
							_warnings+="Invalid PlanExpirationDate\r\n";
						}
					}
					break;
				case "InsuredsNameLast":
					_patientSubscriber.LName=textValue;
					break;
				case "InsuredsNameFirst":
					_patientSubscriber.FName=textValue;
					break;
				case "InsuredsNameMiddle":
					_patientSubscriber.MiddleI=textValue;
					break;
				case "InsuredsRelationToPat"://Self, Parent, Spouse, or Guardian
					switch(textValue.ToLower()){
						case "self":
							_insRelat="self";
							break;
						case "parent":
							_insRelat="parent";
							break;
						case "spouse":
							_insRelat="spouse";
							break;
						case "guardian":
							_insRelat="guardian";
							break;
						case "":
							_insRelat="self";
							break;
						default:
							_insRelat="self";
							_warnings+="Invalid InsuredsRelationToPat\r\n";
							break;
					}
					break;
				case "InsuredsDateOfBirth":
					_patientSubscriber.Birthdate=DateTime.MinValue;
					if(textValue.Length>0){
						try{
							_patientSubscriber.Birthdate=DateTime.Parse(textValue);
						}
						catch{
							_warnings+="Invalid InsuredsDateOfBirth\r\n";
						}
					}
					break;
				case "InsuredsAddressStreet":
					_patientSubscriber.Address=textValue;
					break;
				case "InsuredsAddressOtherDesignation":
					_patientSubscriber.Address2=textValue;
					break;
				case "InsuredsAddressCity":
					_patientSubscriber.City=textValue;
					break;
				case "InsuredsAddressStateOrProvince":
					_patientSubscriber.State=textValue;//we won't enforce two letters
					break;
				case "InsuredsAddressZipOrPostalCode":
					_patientSubscriber.Zip=textValue;
					break;
				case "AssignmentOfBenefits":
					switch(textValue.ToUpper()){
						case "Y":
							_insSub.AssignBen=true;
							break;
						case "N":
							_insSub.AssignBen=false;
							break;
						case "":
							_insSub.AssignBen=PrefC.GetBool(PrefName.InsDefaultAssignBen);
							break;
						default:
							_insSub.AssignBen=PrefC.GetBool(PrefName.InsDefaultAssignBen);
							_warnings+="Invalid AssignmentOfBenefits\r\n";
							break;
					}
					break;
				case "ReleaseInformationCode":
					switch(textValue.ToUpper()){
						case "Y":
							_insSub.ReleaseInfo=true;
							break;
						case "N":
							_insSub.ReleaseInfo=false;
							break;
						case "":
							_insSub.ReleaseInfo=true;
							break;
						default:
							_insSub.ReleaseInfo=true;
							_warnings+="Invalid ReleaseInformationCode\r\n";
							break;
					}
					break;
				case "PolicyNumber":
					_insSub.SubscriberID=textValue;
					break;
				case "PolicyDeductible":
					_deductible=-1;//unknown
					if(textValue.Length>0){
						try{
							_deductible=System.Convert.ToInt32(textValue);
						}
						catch{
							_warnings+="Invalid PolicyDeductible\r\n";
						}
					}
					break;
				case "PolicyLimitAmount":
					_annualMax=-1;//unknown
					if(textValue.Length>0){
						try{
							_annualMax=System.Convert.ToInt32(textValue);
						}
						catch{
							_warnings+="Invalid PolicyLimitAmount\r\n";
						}
					}
					break;
				case "InsuredsSex":
					_patientSubscriber.Gender=PatientGender.Unknown;
					if(textValue.Length>0){
						switch(textValue.Substring(0,1).ToUpper()){
							case "M":
								_patientSubscriber.Gender=PatientGender.Male;
								break;
							case "F":
								_patientSubscriber.Gender=PatientGender.Female;
								break;
							case "U":
								_patientSubscriber.Gender=PatientGender.Unknown;
								break;
							default:
								_warnings+="Invalid InsuredsSex\r\n";
								break;
						}
					}
					break;
				case "InsuredsSSN":
					_patientSubscriber.SSN=textValue;
					if(CultureInfo.CurrentCulture.Name=="en-US"){
						if(Regex.IsMatch(_patientSubscriber.SSN,@"^\d\d\d-\d\d-\d\d\d\d$")){
							_patientSubscriber.SSN=_patientSubscriber.SSN.Replace("-","");
						}
						if(!Regex.IsMatch(_patientSubscriber.SSN,@"^\d{9}$")){//if not exactly 9 digits
							_warnings+="Invalid InsuredsSSN\r\n";
						}
					}
					break;
				case "InsuredsPhoneHome":
					_patientSubscriber.HmPhone=TelephoneNumbers.ReFormat(textValue);
					break;
				case "NotePlan":
					_insSub.BenefitNotes=textValue;
					break;
				default:
					_warnings+="Unrecognized field: "+field+"\r\n";
					break;
			}
		}

		private void butCancel_Click(object sender, System.EventArgs e) {
			DialogResult=DialogResult.Cancel;
		}

		


	}
}





















