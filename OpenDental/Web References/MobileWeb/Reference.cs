//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace OpenDental.MobileWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MobileSoap", Namespace="http://opendental.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TableBase))]
    public partial class Mobile : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ServiceExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPaidCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteObjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchPatientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAppointmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchPrescriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchPharmaciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMobileWebUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPracticeTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPreferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientPortalAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchLabPanelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchLabResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchMedicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchMedicationPatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAllergiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAllergyDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDiseasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDiseaseDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchICD9sOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchStatementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchRecallsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePatientsRecordsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Mobile() {
            this.Url = global::OpenDental.Properties.Settings.Default.OpenDental_MobileWeb_Mobile;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ServiceExistsCompletedEventHandler ServiceExistsCompleted;
        
        /// <remarks/>
        public event GetCustomerNumCompletedEventHandler GetCustomerNumCompleted;
        
        /// <remarks/>
        public event IsPaidCustomerCompletedEventHandler IsPaidCustomerCompleted;
        
        /// <remarks/>
        public event DeleteObjectsCompletedEventHandler DeleteObjectsCompleted;
        
        /// <remarks/>
        public event DeleteAllRecordsCompletedEventHandler DeleteAllRecordsCompleted;
        
        /// <remarks/>
        public event SynchPatientsCompletedEventHandler SynchPatientsCompleted;
        
        /// <remarks/>
        public event SynchAppointmentsCompletedEventHandler SynchAppointmentsCompleted;
        
        /// <remarks/>
        public event SynchPrescriptionsCompletedEventHandler SynchPrescriptionsCompleted;
        
        /// <remarks/>
        public event SynchProvidersCompletedEventHandler SynchProvidersCompleted;
        
        /// <remarks/>
        public event SynchPharmaciesCompletedEventHandler SynchPharmaciesCompleted;
        
        /// <remarks/>
        public event GetUserNameCompletedEventHandler GetUserNameCompleted;
        
        /// <remarks/>
        public event SetMobileWebUserPasswordCompletedEventHandler SetMobileWebUserPasswordCompleted;
        
        /// <remarks/>
        public event SetPracticeTitleCompletedEventHandler SetPracticeTitleCompleted;
        
        /// <remarks/>
        public event SetPreferenceCompletedEventHandler SetPreferenceCompleted;
        
        /// <remarks/>
        public event GetPatientPortalAddressCompletedEventHandler GetPatientPortalAddressCompleted;
        
        /// <remarks/>
        public event SynchLabPanelsCompletedEventHandler SynchLabPanelsCompleted;
        
        /// <remarks/>
        public event SynchLabResultsCompletedEventHandler SynchLabResultsCompleted;
        
        /// <remarks/>
        public event SynchMedicationsCompletedEventHandler SynchMedicationsCompleted;
        
        /// <remarks/>
        public event SynchMedicationPatsCompletedEventHandler SynchMedicationPatsCompleted;
        
        /// <remarks/>
        public event SynchAllergiesCompletedEventHandler SynchAllergiesCompleted;
        
        /// <remarks/>
        public event SynchAllergyDefsCompletedEventHandler SynchAllergyDefsCompleted;
        
        /// <remarks/>
        public event SynchDiseasesCompletedEventHandler SynchDiseasesCompleted;
        
        /// <remarks/>
        public event SynchDiseaseDefsCompletedEventHandler SynchDiseaseDefsCompleted;
        
        /// <remarks/>
        public event SynchICD9sCompletedEventHandler SynchICD9sCompleted;
        
        /// <remarks/>
        public event SynchStatementsCompletedEventHandler SynchStatementsCompleted;
        
        /// <remarks/>
        public event SynchDocumentsCompletedEventHandler SynchDocumentsCompleted;
        
        /// <remarks/>
        public event SynchRecallsCompletedEventHandler SynchRecallsCompleted;
        
        /// <remarks/>
        public event DeletePatientsRecordsCompletedEventHandler DeletePatientsRecordsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/ServiceExists", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ServiceExists() {
            object[] results = this.Invoke("ServiceExists", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceExistsAsync() {
            this.ServiceExistsAsync(null);
        }
        
        /// <remarks/>
        public void ServiceExistsAsync(object userState) {
            if ((this.ServiceExistsOperationCompleted == null)) {
                this.ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceExistsOperationCompleted);
            }
            this.InvokeAsync("ServiceExists", new object[0], this.ServiceExistsOperationCompleted, userState);
        }
        
        private void OnServiceExistsOperationCompleted(object arg) {
            if ((this.ServiceExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceExistsCompleted(this, new ServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetCustomerNum", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetCustomerNum(string RegistrationKeyFromDentalOffice) {
            object[] results = this.Invoke("GetCustomerNum", new object[] {
                        RegistrationKeyFromDentalOffice});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerNumAsync(string RegistrationKeyFromDentalOffice) {
            this.GetCustomerNumAsync(RegistrationKeyFromDentalOffice, null);
        }
        
        /// <remarks/>
        public void GetCustomerNumAsync(string RegistrationKeyFromDentalOffice, object userState) {
            if ((this.GetCustomerNumOperationCompleted == null)) {
                this.GetCustomerNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNumOperationCompleted);
            }
            this.InvokeAsync("GetCustomerNum", new object[] {
                        RegistrationKeyFromDentalOffice}, this.GetCustomerNumOperationCompleted, userState);
        }
        
        private void OnGetCustomerNumOperationCompleted(object arg) {
            if ((this.GetCustomerNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerNumCompleted(this, new GetCustomerNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/IsPaidCustomer", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPaidCustomer(string RegistrationKey) {
            object[] results = this.Invoke("IsPaidCustomer", new object[] {
                        RegistrationKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPaidCustomerAsync(string RegistrationKey) {
            this.IsPaidCustomerAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void IsPaidCustomerAsync(string RegistrationKey, object userState) {
            if ((this.IsPaidCustomerOperationCompleted == null)) {
                this.IsPaidCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPaidCustomerOperationCompleted);
            }
            this.InvokeAsync("IsPaidCustomer", new object[] {
                        RegistrationKey}, this.IsPaidCustomerOperationCompleted, userState);
        }
        
        private void OnIsPaidCustomerOperationCompleted(object arg) {
            if ((this.IsPaidCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPaidCustomerCompleted(this, new IsPaidCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeleteObjects", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteObjects(string RegistrationKey, DeletedObject[] dOList) {
            this.Invoke("DeleteObjects", new object[] {
                        RegistrationKey,
                        dOList});
        }
        
        /// <remarks/>
        public void DeleteObjectsAsync(string RegistrationKey, DeletedObject[] dOList) {
            this.DeleteObjectsAsync(RegistrationKey, dOList, null);
        }
        
        /// <remarks/>
        public void DeleteObjectsAsync(string RegistrationKey, DeletedObject[] dOList, object userState) {
            if ((this.DeleteObjectsOperationCompleted == null)) {
                this.DeleteObjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteObjectsOperationCompleted);
            }
            this.InvokeAsync("DeleteObjects", new object[] {
                        RegistrationKey,
                        dOList}, this.DeleteObjectsOperationCompleted, userState);
        }
        
        private void OnDeleteObjectsOperationCompleted(object arg) {
            if ((this.DeleteObjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteObjectsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeleteAllRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllRecords(string RegistrationKey) {
            this.Invoke("DeleteAllRecords", new object[] {
                        RegistrationKey});
        }
        
        /// <remarks/>
        public void DeleteAllRecordsAsync(string RegistrationKey) {
            this.DeleteAllRecordsAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void DeleteAllRecordsAsync(string RegistrationKey, object userState) {
            if ((this.DeleteAllRecordsOperationCompleted == null)) {
                this.DeleteAllRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllRecordsOperationCompleted);
            }
            this.InvokeAsync("DeleteAllRecords", new object[] {
                        RegistrationKey}, this.DeleteAllRecordsOperationCompleted, userState);
        }
        
        private void OnDeleteAllRecordsOperationCompleted(object arg) {
            if ((this.DeleteAllRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchPatients", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchPatients(string RegistrationKey, Patientm[] patientmList) {
            this.Invoke("SynchPatients", new object[] {
                        RegistrationKey,
                        patientmList});
        }
        
        /// <remarks/>
        public void SynchPatientsAsync(string RegistrationKey, Patientm[] patientmList) {
            this.SynchPatientsAsync(RegistrationKey, patientmList, null);
        }
        
        /// <remarks/>
        public void SynchPatientsAsync(string RegistrationKey, Patientm[] patientmList, object userState) {
            if ((this.SynchPatientsOperationCompleted == null)) {
                this.SynchPatientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPatientsOperationCompleted);
            }
            this.InvokeAsync("SynchPatients", new object[] {
                        RegistrationKey,
                        patientmList}, this.SynchPatientsOperationCompleted, userState);
        }
        
        private void OnSynchPatientsOperationCompleted(object arg) {
            if ((this.SynchPatientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPatientsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAppointments", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAppointments(string RegistrationKey, Appointmentm[] appointmentList) {
            this.Invoke("SynchAppointments", new object[] {
                        RegistrationKey,
                        appointmentList});
        }
        
        /// <remarks/>
        public void SynchAppointmentsAsync(string RegistrationKey, Appointmentm[] appointmentList) {
            this.SynchAppointmentsAsync(RegistrationKey, appointmentList, null);
        }
        
        /// <remarks/>
        public void SynchAppointmentsAsync(string RegistrationKey, Appointmentm[] appointmentList, object userState) {
            if ((this.SynchAppointmentsOperationCompleted == null)) {
                this.SynchAppointmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAppointmentsOperationCompleted);
            }
            this.InvokeAsync("SynchAppointments", new object[] {
                        RegistrationKey,
                        appointmentList}, this.SynchAppointmentsOperationCompleted, userState);
        }
        
        private void OnSynchAppointmentsOperationCompleted(object arg) {
            if ((this.SynchAppointmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAppointmentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchPrescriptions", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchPrescriptions(string RegistrationKey, RxPatm[] rxList) {
            this.Invoke("SynchPrescriptions", new object[] {
                        RegistrationKey,
                        rxList});
        }
        
        /// <remarks/>
        public void SynchPrescriptionsAsync(string RegistrationKey, RxPatm[] rxList) {
            this.SynchPrescriptionsAsync(RegistrationKey, rxList, null);
        }
        
        /// <remarks/>
        public void SynchPrescriptionsAsync(string RegistrationKey, RxPatm[] rxList, object userState) {
            if ((this.SynchPrescriptionsOperationCompleted == null)) {
                this.SynchPrescriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPrescriptionsOperationCompleted);
            }
            this.InvokeAsync("SynchPrescriptions", new object[] {
                        RegistrationKey,
                        rxList}, this.SynchPrescriptionsOperationCompleted, userState);
        }
        
        private void OnSynchPrescriptionsOperationCompleted(object arg) {
            if ((this.SynchPrescriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPrescriptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchProviders", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchProviders(string RegistrationKey, Providerm[] providerList) {
            this.Invoke("SynchProviders", new object[] {
                        RegistrationKey,
                        providerList});
        }
        
        /// <remarks/>
        public void SynchProvidersAsync(string RegistrationKey, Providerm[] providerList) {
            this.SynchProvidersAsync(RegistrationKey, providerList, null);
        }
        
        /// <remarks/>
        public void SynchProvidersAsync(string RegistrationKey, Providerm[] providerList, object userState) {
            if ((this.SynchProvidersOperationCompleted == null)) {
                this.SynchProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchProvidersOperationCompleted);
            }
            this.InvokeAsync("SynchProviders", new object[] {
                        RegistrationKey,
                        providerList}, this.SynchProvidersOperationCompleted, userState);
        }
        
        private void OnSynchProvidersOperationCompleted(object arg) {
            if ((this.SynchProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchProvidersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchPharmacies", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchPharmacies(string RegistrationKey, Pharmacym[] pharmacyList) {
            this.Invoke("SynchPharmacies", new object[] {
                        RegistrationKey,
                        pharmacyList});
        }
        
        /// <remarks/>
        public void SynchPharmaciesAsync(string RegistrationKey, Pharmacym[] pharmacyList) {
            this.SynchPharmaciesAsync(RegistrationKey, pharmacyList, null);
        }
        
        /// <remarks/>
        public void SynchPharmaciesAsync(string RegistrationKey, Pharmacym[] pharmacyList, object userState) {
            if ((this.SynchPharmaciesOperationCompleted == null)) {
                this.SynchPharmaciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPharmaciesOperationCompleted);
            }
            this.InvokeAsync("SynchPharmacies", new object[] {
                        RegistrationKey,
                        pharmacyList}, this.SynchPharmaciesOperationCompleted, userState);
        }
        
        private void OnSynchPharmaciesOperationCompleted(object arg) {
            if ((this.SynchPharmaciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPharmaciesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetUserName", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(string RegistrationKey) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        RegistrationKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserNameAsync(string RegistrationKey) {
            this.GetUserNameAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void GetUserNameAsync(string RegistrationKey, object userState) {
            if ((this.GetUserNameOperationCompleted == null)) {
                this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
            }
            this.InvokeAsync("GetUserName", new object[] {
                        RegistrationKey}, this.GetUserNameOperationCompleted, userState);
        }
        
        private void OnGetUserNameOperationCompleted(object arg) {
            if ((this.GetUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetMobileWebUserPassword", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMobileWebUserPassword(string RegistrationKey, string UserName, string Password) {
            this.Invoke("SetMobileWebUserPassword", new object[] {
                        RegistrationKey,
                        UserName,
                        Password});
        }
        
        /// <remarks/>
        public void SetMobileWebUserPasswordAsync(string RegistrationKey, string UserName, string Password) {
            this.SetMobileWebUserPasswordAsync(RegistrationKey, UserName, Password, null);
        }
        
        /// <remarks/>
        public void SetMobileWebUserPasswordAsync(string RegistrationKey, string UserName, string Password, object userState) {
            if ((this.SetMobileWebUserPasswordOperationCompleted == null)) {
                this.SetMobileWebUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMobileWebUserPasswordOperationCompleted);
            }
            this.InvokeAsync("SetMobileWebUserPassword", new object[] {
                        RegistrationKey,
                        UserName,
                        Password}, this.SetMobileWebUserPasswordOperationCompleted, userState);
        }
        
        private void OnSetMobileWebUserPasswordOperationCompleted(object arg) {
            if ((this.SetMobileWebUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMobileWebUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetPracticeTitle", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPracticeTitle(string RegistrationKey, string PracticeTitle) {
            this.Invoke("SetPracticeTitle", new object[] {
                        RegistrationKey,
                        PracticeTitle});
        }
        
        /// <remarks/>
        public void SetPracticeTitleAsync(string RegistrationKey, string PracticeTitle) {
            this.SetPracticeTitleAsync(RegistrationKey, PracticeTitle, null);
        }
        
        /// <remarks/>
        public void SetPracticeTitleAsync(string RegistrationKey, string PracticeTitle, object userState) {
            if ((this.SetPracticeTitleOperationCompleted == null)) {
                this.SetPracticeTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPracticeTitleOperationCompleted);
            }
            this.InvokeAsync("SetPracticeTitle", new object[] {
                        RegistrationKey,
                        PracticeTitle}, this.SetPracticeTitleOperationCompleted, userState);
        }
        
        private void OnSetPracticeTitleOperationCompleted(object arg) {
            if ((this.SetPracticeTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPracticeTitleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetPreference", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPreference(string RegistrationKey, Prefm prefm) {
            this.Invoke("SetPreference", new object[] {
                        RegistrationKey,
                        prefm});
        }
        
        /// <remarks/>
        public void SetPreferenceAsync(string RegistrationKey, Prefm prefm) {
            this.SetPreferenceAsync(RegistrationKey, prefm, null);
        }
        
        /// <remarks/>
        public void SetPreferenceAsync(string RegistrationKey, Prefm prefm, object userState) {
            if ((this.SetPreferenceOperationCompleted == null)) {
                this.SetPreferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPreferenceOperationCompleted);
            }
            this.InvokeAsync("SetPreference", new object[] {
                        RegistrationKey,
                        prefm}, this.SetPreferenceOperationCompleted, userState);
        }
        
        private void OnSetPreferenceOperationCompleted(object arg) {
            if ((this.SetPreferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPreferenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetPatientPortalAddress", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientPortalAddress(string RegistrationKey) {
            object[] results = this.Invoke("GetPatientPortalAddress", new object[] {
                        RegistrationKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientPortalAddressAsync(string RegistrationKey) {
            this.GetPatientPortalAddressAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void GetPatientPortalAddressAsync(string RegistrationKey, object userState) {
            if ((this.GetPatientPortalAddressOperationCompleted == null)) {
                this.GetPatientPortalAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientPortalAddressOperationCompleted);
            }
            this.InvokeAsync("GetPatientPortalAddress", new object[] {
                        RegistrationKey}, this.GetPatientPortalAddressOperationCompleted, userState);
        }
        
        private void OnGetPatientPortalAddressOperationCompleted(object arg) {
            if ((this.GetPatientPortalAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientPortalAddressCompleted(this, new GetPatientPortalAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchLabPanels", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchLabPanels(string RegistrationKey, LabPanelm[] labPanelmList) {
            this.Invoke("SynchLabPanels", new object[] {
                        RegistrationKey,
                        labPanelmList});
        }
        
        /// <remarks/>
        public void SynchLabPanelsAsync(string RegistrationKey, LabPanelm[] labPanelmList) {
            this.SynchLabPanelsAsync(RegistrationKey, labPanelmList, null);
        }
        
        /// <remarks/>
        public void SynchLabPanelsAsync(string RegistrationKey, LabPanelm[] labPanelmList, object userState) {
            if ((this.SynchLabPanelsOperationCompleted == null)) {
                this.SynchLabPanelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchLabPanelsOperationCompleted);
            }
            this.InvokeAsync("SynchLabPanels", new object[] {
                        RegistrationKey,
                        labPanelmList}, this.SynchLabPanelsOperationCompleted, userState);
        }
        
        private void OnSynchLabPanelsOperationCompleted(object arg) {
            if ((this.SynchLabPanelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchLabPanelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchLabResults", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchLabResults(string RegistrationKey, LabResultm[] labResultmList) {
            this.Invoke("SynchLabResults", new object[] {
                        RegistrationKey,
                        labResultmList});
        }
        
        /// <remarks/>
        public void SynchLabResultsAsync(string RegistrationKey, LabResultm[] labResultmList) {
            this.SynchLabResultsAsync(RegistrationKey, labResultmList, null);
        }
        
        /// <remarks/>
        public void SynchLabResultsAsync(string RegistrationKey, LabResultm[] labResultmList, object userState) {
            if ((this.SynchLabResultsOperationCompleted == null)) {
                this.SynchLabResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchLabResultsOperationCompleted);
            }
            this.InvokeAsync("SynchLabResults", new object[] {
                        RegistrationKey,
                        labResultmList}, this.SynchLabResultsOperationCompleted, userState);
        }
        
        private void OnSynchLabResultsOperationCompleted(object arg) {
            if ((this.SynchLabResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchLabResultsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchMedications", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchMedications(string RegistrationKey, Medicationm[] medicationmList) {
            this.Invoke("SynchMedications", new object[] {
                        RegistrationKey,
                        medicationmList});
        }
        
        /// <remarks/>
        public void SynchMedicationsAsync(string RegistrationKey, Medicationm[] medicationmList) {
            this.SynchMedicationsAsync(RegistrationKey, medicationmList, null);
        }
        
        /// <remarks/>
        public void SynchMedicationsAsync(string RegistrationKey, Medicationm[] medicationmList, object userState) {
            if ((this.SynchMedicationsOperationCompleted == null)) {
                this.SynchMedicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationsOperationCompleted);
            }
            this.InvokeAsync("SynchMedications", new object[] {
                        RegistrationKey,
                        medicationmList}, this.SynchMedicationsOperationCompleted, userState);
        }
        
        private void OnSynchMedicationsOperationCompleted(object arg) {
            if ((this.SynchMedicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchMedicationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchMedicationPats", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchMedicationPats(string RegistrationKey, MedicationPatm[] medicationPatList) {
            this.Invoke("SynchMedicationPats", new object[] {
                        RegistrationKey,
                        medicationPatList});
        }
        
        /// <remarks/>
        public void SynchMedicationPatsAsync(string RegistrationKey, MedicationPatm[] medicationPatList) {
            this.SynchMedicationPatsAsync(RegistrationKey, medicationPatList, null);
        }
        
        /// <remarks/>
        public void SynchMedicationPatsAsync(string RegistrationKey, MedicationPatm[] medicationPatList, object userState) {
            if ((this.SynchMedicationPatsOperationCompleted == null)) {
                this.SynchMedicationPatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationPatsOperationCompleted);
            }
            this.InvokeAsync("SynchMedicationPats", new object[] {
                        RegistrationKey,
                        medicationPatList}, this.SynchMedicationPatsOperationCompleted, userState);
        }
        
        private void OnSynchMedicationPatsOperationCompleted(object arg) {
            if ((this.SynchMedicationPatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchMedicationPatsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAllergies", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAllergies(string RegistrationKey, Allergym[] allergyList) {
            this.Invoke("SynchAllergies", new object[] {
                        RegistrationKey,
                        allergyList});
        }
        
        /// <remarks/>
        public void SynchAllergiesAsync(string RegistrationKey, Allergym[] allergyList) {
            this.SynchAllergiesAsync(RegistrationKey, allergyList, null);
        }
        
        /// <remarks/>
        public void SynchAllergiesAsync(string RegistrationKey, Allergym[] allergyList, object userState) {
            if ((this.SynchAllergiesOperationCompleted == null)) {
                this.SynchAllergiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergiesOperationCompleted);
            }
            this.InvokeAsync("SynchAllergies", new object[] {
                        RegistrationKey,
                        allergyList}, this.SynchAllergiesOperationCompleted, userState);
        }
        
        private void OnSynchAllergiesOperationCompleted(object arg) {
            if ((this.SynchAllergiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAllergiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAllergyDefs", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAllergyDefs(string RegistrationKey, AllergyDefm[] allergyDefList) {
            this.Invoke("SynchAllergyDefs", new object[] {
                        RegistrationKey,
                        allergyDefList});
        }
        
        /// <remarks/>
        public void SynchAllergyDefsAsync(string RegistrationKey, AllergyDefm[] allergyDefList) {
            this.SynchAllergyDefsAsync(RegistrationKey, allergyDefList, null);
        }
        
        /// <remarks/>
        public void SynchAllergyDefsAsync(string RegistrationKey, AllergyDefm[] allergyDefList, object userState) {
            if ((this.SynchAllergyDefsOperationCompleted == null)) {
                this.SynchAllergyDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergyDefsOperationCompleted);
            }
            this.InvokeAsync("SynchAllergyDefs", new object[] {
                        RegistrationKey,
                        allergyDefList}, this.SynchAllergyDefsOperationCompleted, userState);
        }
        
        private void OnSynchAllergyDefsOperationCompleted(object arg) {
            if ((this.SynchAllergyDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAllergyDefsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDiseases", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDiseases(string RegistrationKey, Diseasem[] diseaseList) {
            this.Invoke("SynchDiseases", new object[] {
                        RegistrationKey,
                        diseaseList});
        }
        
        /// <remarks/>
        public void SynchDiseasesAsync(string RegistrationKey, Diseasem[] diseaseList) {
            this.SynchDiseasesAsync(RegistrationKey, diseaseList, null);
        }
        
        /// <remarks/>
        public void SynchDiseasesAsync(string RegistrationKey, Diseasem[] diseaseList, object userState) {
            if ((this.SynchDiseasesOperationCompleted == null)) {
                this.SynchDiseasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseasesOperationCompleted);
            }
            this.InvokeAsync("SynchDiseases", new object[] {
                        RegistrationKey,
                        diseaseList}, this.SynchDiseasesOperationCompleted, userState);
        }
        
        private void OnSynchDiseasesOperationCompleted(object arg) {
            if ((this.SynchDiseasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDiseasesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDiseaseDefs", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDiseaseDefs(string RegistrationKey, DiseaseDefm[] diseaseDefList) {
            this.Invoke("SynchDiseaseDefs", new object[] {
                        RegistrationKey,
                        diseaseDefList});
        }
        
        /// <remarks/>
        public void SynchDiseaseDefsAsync(string RegistrationKey, DiseaseDefm[] diseaseDefList) {
            this.SynchDiseaseDefsAsync(RegistrationKey, diseaseDefList, null);
        }
        
        /// <remarks/>
        public void SynchDiseaseDefsAsync(string RegistrationKey, DiseaseDefm[] diseaseDefList, object userState) {
            if ((this.SynchDiseaseDefsOperationCompleted == null)) {
                this.SynchDiseaseDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseaseDefsOperationCompleted);
            }
            this.InvokeAsync("SynchDiseaseDefs", new object[] {
                        RegistrationKey,
                        diseaseDefList}, this.SynchDiseaseDefsOperationCompleted, userState);
        }
        
        private void OnSynchDiseaseDefsOperationCompleted(object arg) {
            if ((this.SynchDiseaseDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDiseaseDefsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchICD9s", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchICD9s(string RegistrationKey, ICD9m[] icd9List) {
            this.Invoke("SynchICD9s", new object[] {
                        RegistrationKey,
                        icd9List});
        }
        
        /// <remarks/>
        public void SynchICD9sAsync(string RegistrationKey, ICD9m[] icd9List) {
            this.SynchICD9sAsync(RegistrationKey, icd9List, null);
        }
        
        /// <remarks/>
        public void SynchICD9sAsync(string RegistrationKey, ICD9m[] icd9List, object userState) {
            if ((this.SynchICD9sOperationCompleted == null)) {
                this.SynchICD9sOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchICD9sOperationCompleted);
            }
            this.InvokeAsync("SynchICD9s", new object[] {
                        RegistrationKey,
                        icd9List}, this.SynchICD9sOperationCompleted, userState);
        }
        
        private void OnSynchICD9sOperationCompleted(object arg) {
            if ((this.SynchICD9sCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchICD9sCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchStatements", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchStatements(string RegistrationKey, Statementm[] statementList) {
            this.Invoke("SynchStatements", new object[] {
                        RegistrationKey,
                        statementList});
        }
        
        /// <remarks/>
        public void SynchStatementsAsync(string RegistrationKey, Statementm[] statementList) {
            this.SynchStatementsAsync(RegistrationKey, statementList, null);
        }
        
        /// <remarks/>
        public void SynchStatementsAsync(string RegistrationKey, Statementm[] statementList, object userState) {
            if ((this.SynchStatementsOperationCompleted == null)) {
                this.SynchStatementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchStatementsOperationCompleted);
            }
            this.InvokeAsync("SynchStatements", new object[] {
                        RegistrationKey,
                        statementList}, this.SynchStatementsOperationCompleted, userState);
        }
        
        private void OnSynchStatementsOperationCompleted(object arg) {
            if ((this.SynchStatementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchStatementsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDocuments", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDocuments(string RegistrationKey, Documentm[] documentList) {
            this.Invoke("SynchDocuments", new object[] {
                        RegistrationKey,
                        documentList});
        }
        
        /// <remarks/>
        public void SynchDocumentsAsync(string RegistrationKey, Documentm[] documentList) {
            this.SynchDocumentsAsync(RegistrationKey, documentList, null);
        }
        
        /// <remarks/>
        public void SynchDocumentsAsync(string RegistrationKey, Documentm[] documentList, object userState) {
            if ((this.SynchDocumentsOperationCompleted == null)) {
                this.SynchDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDocumentsOperationCompleted);
            }
            this.InvokeAsync("SynchDocuments", new object[] {
                        RegistrationKey,
                        documentList}, this.SynchDocumentsOperationCompleted, userState);
        }
        
        private void OnSynchDocumentsOperationCompleted(object arg) {
            if ((this.SynchDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDocumentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchRecalls", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchRecalls(string RegistrationKey, Recallm[] recallList) {
            this.Invoke("SynchRecalls", new object[] {
                        RegistrationKey,
                        recallList});
        }
        
        /// <remarks/>
        public void SynchRecallsAsync(string RegistrationKey, Recallm[] recallList) {
            this.SynchRecallsAsync(RegistrationKey, recallList, null);
        }
        
        /// <remarks/>
        public void SynchRecallsAsync(string RegistrationKey, Recallm[] recallList, object userState) {
            if ((this.SynchRecallsOperationCompleted == null)) {
                this.SynchRecallsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchRecallsOperationCompleted);
            }
            this.InvokeAsync("SynchRecalls", new object[] {
                        RegistrationKey,
                        recallList}, this.SynchRecallsOperationCompleted, userState);
        }
        
        private void OnSynchRecallsOperationCompleted(object arg) {
            if ((this.SynchRecallsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchRecallsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeletePatientsRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePatientsRecords(string RegistrationKey, long[] patNumList) {
            this.Invoke("DeletePatientsRecords", new object[] {
                        RegistrationKey,
                        patNumList});
        }
        
        /// <remarks/>
        public void DeletePatientsRecordsAsync(string RegistrationKey, long[] patNumList) {
            this.DeletePatientsRecordsAsync(RegistrationKey, patNumList, null);
        }
        
        /// <remarks/>
        public void DeletePatientsRecordsAsync(string RegistrationKey, long[] patNumList, object userState) {
            if ((this.DeletePatientsRecordsOperationCompleted == null)) {
                this.DeletePatientsRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePatientsRecordsOperationCompleted);
            }
            this.InvokeAsync("DeletePatientsRecords", new object[] {
                        RegistrationKey,
                        patNumList}, this.DeletePatientsRecordsOperationCompleted, userState);
        }
        
        private void OnDeletePatientsRecordsOperationCompleted(object arg) {
            if ((this.DeletePatientsRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePatientsRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class DeletedObject : TableBase {
        
        private long deletedObjectNumField;
        
        private long objectNumField;
        
        private DeletedObjectType objectTypeField;
        
        private System.DateTime dateTStampField;
        
        /// <remarks/>
        public long DeletedObjectNum {
            get {
                return this.deletedObjectNumField;
            }
            set {
                this.deletedObjectNumField = value;
            }
        }
        
        /// <remarks/>
        public long ObjectNum {
            get {
                return this.objectNumField;
            }
            set {
                this.objectNumField = value;
            }
        }
        
        /// <remarks/>
        public DeletedObjectType ObjectType {
            get {
                return this.objectTypeField;
            }
            set {
                this.objectTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTStamp {
            get {
                return this.dateTStampField;
            }
            set {
                this.dateTStampField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum DeletedObjectType {
        
        /// <remarks/>
        Appointment,
        
        /// <remarks/>
        ScheduleProv,
        
        /// <remarks/>
        RecallPatNum,
        
        /// <remarks/>
        RxPat,
        
        /// <remarks/>
        LabPanel,
        
        /// <remarks/>
        LabResult,
        
        /// <remarks/>
        DrugUnit,
        
        /// <remarks/>
        Medication,
        
        /// <remarks/>
        MedicationPat,
        
        /// <remarks/>
        Allergy,
        
        /// <remarks/>
        AllergyDef,
        
        /// <remarks/>
        Disease,
        
        /// <remarks/>
        DiseaseDef,
        
        /// <remarks/>
        ICD9,
        
        /// <remarks/>
        Provider,
        
        /// <remarks/>
        Pharmacy,
        
        /// <remarks/>
        Statement,
        
        /// <remarks/>
        Document,
        
        /// <remarks/>
        Recall,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Recallm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Documentm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Statementm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ICD9m))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiseaseDefm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Diseasem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AllergyDefm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Allergym))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MedicationPatm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Medicationm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LabResultm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LabPanelm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Prefm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Pharmacym))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Providerm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RxPatm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Appointmentm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Patientm))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeletedObject))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public abstract partial class TableBase {
        
        private bool isNewField;
        
        /// <remarks/>
        public bool IsNew {
            get {
                return this.isNewField;
            }
            set {
                this.isNewField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Recallm : TableBase {
        
        private long customerNumField;
        
        private long recallNumField;
        
        private long patNumField;
        
        private System.DateTime dateDueField;
        
        private System.DateTime datePreviousField;
        
        private long recallStatusField;
        
        private string noteField;
        
        private bool isDisabledField;
        
        private double disableUntilBalanceField;
        
        private System.DateTime disableUntilDateField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long RecallNum {
            get {
                return this.recallNumField;
            }
            set {
                this.recallNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateDue {
            get {
                return this.dateDueField;
            }
            set {
                this.dateDueField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DatePrevious {
            get {
                return this.datePreviousField;
            }
            set {
                this.datePreviousField = value;
            }
        }
        
        /// <remarks/>
        public long RecallStatus {
            get {
                return this.recallStatusField;
            }
            set {
                this.recallStatusField = value;
            }
        }
        
        /// <remarks/>
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDisabled {
            get {
                return this.isDisabledField;
            }
            set {
                this.isDisabledField = value;
            }
        }
        
        /// <remarks/>
        public double DisableUntilBalance {
            get {
                return this.disableUntilBalanceField;
            }
            set {
                this.disableUntilBalanceField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DisableUntilDate {
            get {
                return this.disableUntilDateField;
            }
            set {
                this.disableUntilDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Documentm : TableBase {
        
        private long customerNumField;
        
        private long docNumField;
        
        private long patNumField;
        
        private string rawBase64Field;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long DocNum {
            get {
                return this.docNumField;
            }
            set {
                this.docNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public string RawBase64 {
            get {
                return this.rawBase64Field;
            }
            set {
                this.rawBase64Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Statementm : TableBase {
        
        private long customerNumField;
        
        private long statementNumField;
        
        private long patNumField;
        
        private System.DateTime dateSentField;
        
        private long docNumField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long StatementNum {
            get {
                return this.statementNumField;
            }
            set {
                this.statementNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateSent {
            get {
                return this.dateSentField;
            }
            set {
                this.dateSentField = value;
            }
        }
        
        /// <remarks/>
        public long DocNum {
            get {
                return this.docNumField;
            }
            set {
                this.docNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class ICD9m : TableBase {
        
        private long customerNumField;
        
        private long iCD9NumField;
        
        private string iCD9CodeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long ICD9Num {
            get {
                return this.iCD9NumField;
            }
            set {
                this.iCD9NumField = value;
            }
        }
        
        /// <remarks/>
        public string ICD9Code {
            get {
                return this.iCD9CodeField;
            }
            set {
                this.iCD9CodeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class DiseaseDefm : TableBase {
        
        private long customerNumField;
        
        private long diseaseDefNumField;
        
        private string diseaseNameField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long DiseaseDefNum {
            get {
                return this.diseaseDefNumField;
            }
            set {
                this.diseaseDefNumField = value;
            }
        }
        
        /// <remarks/>
        public string DiseaseName {
            get {
                return this.diseaseNameField;
            }
            set {
                this.diseaseNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Diseasem : TableBase {
        
        private long customerNumField;
        
        private long diseaseNumField;
        
        private long patNumField;
        
        private long diseaseDefNumField;
        
        private string patNoteField;
        
        private long iCD9NumField;
        
        private ProblemStatus probStatusField;
        
        private System.DateTime dateStartField;
        
        private System.DateTime dateStopField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long DiseaseNum {
            get {
                return this.diseaseNumField;
            }
            set {
                this.diseaseNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public long DiseaseDefNum {
            get {
                return this.diseaseDefNumField;
            }
            set {
                this.diseaseDefNumField = value;
            }
        }
        
        /// <remarks/>
        public string PatNote {
            get {
                return this.patNoteField;
            }
            set {
                this.patNoteField = value;
            }
        }
        
        /// <remarks/>
        public long ICD9Num {
            get {
                return this.iCD9NumField;
            }
            set {
                this.iCD9NumField = value;
            }
        }
        
        /// <remarks/>
        public ProblemStatus ProbStatus {
            get {
                return this.probStatusField;
            }
            set {
                this.probStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateStart {
            get {
                return this.dateStartField;
            }
            set {
                this.dateStartField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateStop {
            get {
                return this.dateStopField;
            }
            set {
                this.dateStopField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum ProblemStatus {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Resolved,
        
        /// <remarks/>
        Inactive,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class AllergyDefm : TableBase {
        
        private long customerNumField;
        
        private long allergyDefNumField;
        
        private string descriptionField;
        
        private SnomedAllergy snomedField;
        
        private long medicationNumField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long AllergyDefNum {
            get {
                return this.allergyDefNumField;
            }
            set {
                this.allergyDefNumField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public SnomedAllergy Snomed {
            get {
                return this.snomedField;
            }
            set {
                this.snomedField = value;
            }
        }
        
        /// <remarks/>
        public long MedicationNum {
            get {
                return this.medicationNumField;
            }
            set {
                this.medicationNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum SnomedAllergy {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        AllergyToSubstance,
        
        /// <remarks/>
        DrugAllergy,
        
        /// <remarks/>
        DrugIntolerance,
        
        /// <remarks/>
        FoodAllergy,
        
        /// <remarks/>
        FoodIntolerance,
        
        /// <remarks/>
        AdverseReactions,
        
        /// <remarks/>
        AdverseReactionsToDrug,
        
        /// <remarks/>
        AdverseReactionsToFood,
        
        /// <remarks/>
        AdverseReactionsToSubstance,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Allergym : TableBase {
        
        private long customerNumField;
        
        private long allergyNumField;
        
        private long allergyDefNumField;
        
        private long patNumField;
        
        private string reactionField;
        
        private bool statusIsActiveField;
        
        private System.DateTime dateAdverseReactionField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long AllergyNum {
            get {
                return this.allergyNumField;
            }
            set {
                this.allergyNumField = value;
            }
        }
        
        /// <remarks/>
        public long AllergyDefNum {
            get {
                return this.allergyDefNumField;
            }
            set {
                this.allergyDefNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public string Reaction {
            get {
                return this.reactionField;
            }
            set {
                this.reactionField = value;
            }
        }
        
        /// <remarks/>
        public bool StatusIsActive {
            get {
                return this.statusIsActiveField;
            }
            set {
                this.statusIsActiveField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateAdverseReaction {
            get {
                return this.dateAdverseReactionField;
            }
            set {
                this.dateAdverseReactionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class MedicationPatm : TableBase {
        
        private long customerNumField;
        
        private long medicationPatNumField;
        
        private long patNumField;
        
        private long medicationNumField;
        
        private string patNoteField;
        
        private System.DateTime dateStartField;
        
        private System.DateTime dateStopField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long MedicationPatNum {
            get {
                return this.medicationPatNumField;
            }
            set {
                this.medicationPatNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public long MedicationNum {
            get {
                return this.medicationNumField;
            }
            set {
                this.medicationNumField = value;
            }
        }
        
        /// <remarks/>
        public string PatNote {
            get {
                return this.patNoteField;
            }
            set {
                this.patNoteField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateStart {
            get {
                return this.dateStartField;
            }
            set {
                this.dateStartField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateStop {
            get {
                return this.dateStopField;
            }
            set {
                this.dateStopField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Medicationm : TableBase {
        
        private long customerNumField;
        
        private long medicationNumField;
        
        private string medNameField;
        
        private long genericNumField;
        
        private long rxCuiField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long MedicationNum {
            get {
                return this.medicationNumField;
            }
            set {
                this.medicationNumField = value;
            }
        }
        
        /// <remarks/>
        public string MedName {
            get {
                return this.medNameField;
            }
            set {
                this.medNameField = value;
            }
        }
        
        /// <remarks/>
        public long GenericNum {
            get {
                return this.genericNumField;
            }
            set {
                this.genericNumField = value;
            }
        }
        
        /// <remarks/>
        public long RxCui {
            get {
                return this.rxCuiField;
            }
            set {
                this.rxCuiField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class LabResultm : TableBase {
        
        private long customerNumField;
        
        private long labResultNumField;
        
        private long labPanelNumField;
        
        private System.DateTime dateTimeTestField;
        
        private string testNameField;
        
        private string testIDField;
        
        private string obsValueField;
        
        private string obsUnitsField;
        
        private string obsRangeField;
        
        private LabAbnormalFlag abnormalFlagField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long LabResultNum {
            get {
                return this.labResultNumField;
            }
            set {
                this.labResultNumField = value;
            }
        }
        
        /// <remarks/>
        public long LabPanelNum {
            get {
                return this.labPanelNumField;
            }
            set {
                this.labPanelNumField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTimeTest {
            get {
                return this.dateTimeTestField;
            }
            set {
                this.dateTimeTestField = value;
            }
        }
        
        /// <remarks/>
        public string TestName {
            get {
                return this.testNameField;
            }
            set {
                this.testNameField = value;
            }
        }
        
        /// <remarks/>
        public string TestID {
            get {
                return this.testIDField;
            }
            set {
                this.testIDField = value;
            }
        }
        
        /// <remarks/>
        public string ObsValue {
            get {
                return this.obsValueField;
            }
            set {
                this.obsValueField = value;
            }
        }
        
        /// <remarks/>
        public string ObsUnits {
            get {
                return this.obsUnitsField;
            }
            set {
                this.obsUnitsField = value;
            }
        }
        
        /// <remarks/>
        public string ObsRange {
            get {
                return this.obsRangeField;
            }
            set {
                this.obsRangeField = value;
            }
        }
        
        /// <remarks/>
        public LabAbnormalFlag AbnormalFlag {
            get {
                return this.abnormalFlagField;
            }
            set {
                this.abnormalFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum LabAbnormalFlag {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Below,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Above,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class LabPanelm : TableBase {
        
        private long customerNumField;
        
        private long labPanelNumField;
        
        private long patNumField;
        
        private string labNameAddressField;
        
        private string specimenConditionField;
        
        private string specimenSourceField;
        
        private string serviceIdField;
        
        private string serviceNameField;
        
        private long medicalOrderNumField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long LabPanelNum {
            get {
                return this.labPanelNumField;
            }
            set {
                this.labPanelNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public string LabNameAddress {
            get {
                return this.labNameAddressField;
            }
            set {
                this.labNameAddressField = value;
            }
        }
        
        /// <remarks/>
        public string SpecimenCondition {
            get {
                return this.specimenConditionField;
            }
            set {
                this.specimenConditionField = value;
            }
        }
        
        /// <remarks/>
        public string SpecimenSource {
            get {
                return this.specimenSourceField;
            }
            set {
                this.specimenSourceField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceId {
            get {
                return this.serviceIdField;
            }
            set {
                this.serviceIdField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceName {
            get {
                return this.serviceNameField;
            }
            set {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        public long MedicalOrderNum {
            get {
                return this.medicalOrderNumField;
            }
            set {
                this.medicalOrderNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Prefm : TableBase {
        
        private long customerNumField;
        
        private long prefNumField;
        
        private string prefmNameField;
        
        private string valueStringField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long PrefNum {
            get {
                return this.prefNumField;
            }
            set {
                this.prefNumField = value;
            }
        }
        
        /// <remarks/>
        public string PrefmName {
            get {
                return this.prefmNameField;
            }
            set {
                this.prefmNameField = value;
            }
        }
        
        /// <remarks/>
        public string ValueString {
            get {
                return this.valueStringField;
            }
            set {
                this.valueStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Pharmacym : TableBase {
        
        private long customerNumField;
        
        private long pharmacyNumField;
        
        private string storeNameField;
        
        private string phoneField;
        
        private string faxField;
        
        private string addressField;
        
        private string address2Field;
        
        private string cityField;
        
        private string stateField;
        
        private string zipField;
        
        private string noteField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long PharmacyNum {
            get {
                return this.pharmacyNumField;
            }
            set {
                this.pharmacyNumField = value;
            }
        }
        
        /// <remarks/>
        public string StoreName {
            get {
                return this.storeNameField;
            }
            set {
                this.storeNameField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string Fax {
            get {
                return this.faxField;
            }
            set {
                this.faxField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string Address2 {
            get {
                return this.address2Field;
            }
            set {
                this.address2Field = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
        
        /// <remarks/>
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Providerm : TableBase {
        
        private long customerNumField;
        
        private long provNumField;
        
        private string abbrField;
        
        private bool isSecondaryField;
        
        private int provColorField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long ProvNum {
            get {
                return this.provNumField;
            }
            set {
                this.provNumField = value;
            }
        }
        
        /// <remarks/>
        public string Abbr {
            get {
                return this.abbrField;
            }
            set {
                this.abbrField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSecondary {
            get {
                return this.isSecondaryField;
            }
            set {
                this.isSecondaryField = value;
            }
        }
        
        /// <remarks/>
        public int ProvColor {
            get {
                return this.provColorField;
            }
            set {
                this.provColorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class RxPatm : TableBase {
        
        private long customerNumField;
        
        private long rxNumField;
        
        private long patNumField;
        
        private System.DateTime rxDateField;
        
        private string drugField;
        
        private string sigField;
        
        private string dispField;
        
        private string refillsField;
        
        private long provNumField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long RxNum {
            get {
                return this.rxNumField;
            }
            set {
                this.rxNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RxDate {
            get {
                return this.rxDateField;
            }
            set {
                this.rxDateField = value;
            }
        }
        
        /// <remarks/>
        public string Drug {
            get {
                return this.drugField;
            }
            set {
                this.drugField = value;
            }
        }
        
        /// <remarks/>
        public string Sig {
            get {
                return this.sigField;
            }
            set {
                this.sigField = value;
            }
        }
        
        /// <remarks/>
        public string Disp {
            get {
                return this.dispField;
            }
            set {
                this.dispField = value;
            }
        }
        
        /// <remarks/>
        public string Refills {
            get {
                return this.refillsField;
            }
            set {
                this.refillsField = value;
            }
        }
        
        /// <remarks/>
        public long ProvNum {
            get {
                return this.provNumField;
            }
            set {
                this.provNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Appointmentm : TableBase {
        
        private long customerNumField;
        
        private long aptNumField;
        
        private long patNumField;
        
        private ApptStatus aptStatusField;
        
        private string patternField;
        
        private long confirmedField;
        
        private long opField;
        
        private string noteField;
        
        private long provNumField;
        
        private long provHygField;
        
        private System.DateTime aptDateTimeField;
        
        private bool isNewPatientField;
        
        private string procDescriptField;
        
        private long clinicNumField;
        
        private bool isHygieneField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long AptNum {
            get {
                return this.aptNumField;
            }
            set {
                this.aptNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public ApptStatus AptStatus {
            get {
                return this.aptStatusField;
            }
            set {
                this.aptStatusField = value;
            }
        }
        
        /// <remarks/>
        public string Pattern {
            get {
                return this.patternField;
            }
            set {
                this.patternField = value;
            }
        }
        
        /// <remarks/>
        public long Confirmed {
            get {
                return this.confirmedField;
            }
            set {
                this.confirmedField = value;
            }
        }
        
        /// <remarks/>
        public long Op {
            get {
                return this.opField;
            }
            set {
                this.opField = value;
            }
        }
        
        /// <remarks/>
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        public long ProvNum {
            get {
                return this.provNumField;
            }
            set {
                this.provNumField = value;
            }
        }
        
        /// <remarks/>
        public long ProvHyg {
            get {
                return this.provHygField;
            }
            set {
                this.provHygField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AptDateTime {
            get {
                return this.aptDateTimeField;
            }
            set {
                this.aptDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNewPatient {
            get {
                return this.isNewPatientField;
            }
            set {
                this.isNewPatientField = value;
            }
        }
        
        /// <remarks/>
        public string ProcDescript {
            get {
                return this.procDescriptField;
            }
            set {
                this.procDescriptField = value;
            }
        }
        
        /// <remarks/>
        public long ClinicNum {
            get {
                return this.clinicNumField;
            }
            set {
                this.clinicNumField = value;
            }
        }
        
        /// <remarks/>
        public bool IsHygiene {
            get {
                return this.isHygieneField;
            }
            set {
                this.isHygieneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum ApptStatus {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Scheduled,
        
        /// <remarks/>
        Complete,
        
        /// <remarks/>
        UnschedList,
        
        /// <remarks/>
        ASAP,
        
        /// <remarks/>
        Broken,
        
        /// <remarks/>
        Planned,
        
        /// <remarks/>
        PtNote,
        
        /// <remarks/>
        PtNoteCompleted,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public partial class Patientm : TableBase {
        
        private long customerNumField;
        
        private long patNumField;
        
        private string lNameField;
        
        private string fNameField;
        
        private string middleIField;
        
        private string preferredField;
        
        private PatientStatus patStatusField;
        
        private PatientGender genderField;
        
        private PatientPosition positionField;
        
        private System.DateTime birthdateField;
        
        private string addressField;
        
        private string address2Field;
        
        private string cityField;
        
        private string stateField;
        
        private string zipField;
        
        private string hmPhoneField;
        
        private string wkPhoneField;
        
        private string wirelessPhoneField;
        
        private long guarantorField;
        
        private int ageField;
        
        private string emailField;
        
        private string addrNoteField;
        
        private long clinicNumField;
        
        private double insEstField;
        
        private double balTotalField;
        
        private ContactMethod preferContactMethodField;
        
        private string onlinePasswordField;
        
        /// <remarks/>
        public long CustomerNum {
            get {
                return this.customerNumField;
            }
            set {
                this.customerNumField = value;
            }
        }
        
        /// <remarks/>
        public long PatNum {
            get {
                return this.patNumField;
            }
            set {
                this.patNumField = value;
            }
        }
        
        /// <remarks/>
        public string LName {
            get {
                return this.lNameField;
            }
            set {
                this.lNameField = value;
            }
        }
        
        /// <remarks/>
        public string FName {
            get {
                return this.fNameField;
            }
            set {
                this.fNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleI {
            get {
                return this.middleIField;
            }
            set {
                this.middleIField = value;
            }
        }
        
        /// <remarks/>
        public string Preferred {
            get {
                return this.preferredField;
            }
            set {
                this.preferredField = value;
            }
        }
        
        /// <remarks/>
        public PatientStatus PatStatus {
            get {
                return this.patStatusField;
            }
            set {
                this.patStatusField = value;
            }
        }
        
        /// <remarks/>
        public PatientGender Gender {
            get {
                return this.genderField;
            }
            set {
                this.genderField = value;
            }
        }
        
        /// <remarks/>
        public PatientPosition Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Birthdate {
            get {
                return this.birthdateField;
            }
            set {
                this.birthdateField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string Address2 {
            get {
                return this.address2Field;
            }
            set {
                this.address2Field = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
        
        /// <remarks/>
        public string HmPhone {
            get {
                return this.hmPhoneField;
            }
            set {
                this.hmPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string WkPhone {
            get {
                return this.wkPhoneField;
            }
            set {
                this.wkPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string WirelessPhone {
            get {
                return this.wirelessPhoneField;
            }
            set {
                this.wirelessPhoneField = value;
            }
        }
        
        /// <remarks/>
        public long Guarantor {
            get {
                return this.guarantorField;
            }
            set {
                this.guarantorField = value;
            }
        }
        
        /// <remarks/>
        public int Age {
            get {
                return this.ageField;
            }
            set {
                this.ageField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string AddrNote {
            get {
                return this.addrNoteField;
            }
            set {
                this.addrNoteField = value;
            }
        }
        
        /// <remarks/>
        public long ClinicNum {
            get {
                return this.clinicNumField;
            }
            set {
                this.clinicNumField = value;
            }
        }
        
        /// <remarks/>
        public double InsEst {
            get {
                return this.insEstField;
            }
            set {
                this.insEstField = value;
            }
        }
        
        /// <remarks/>
        public double BalTotal {
            get {
                return this.balTotalField;
            }
            set {
                this.balTotalField = value;
            }
        }
        
        /// <remarks/>
        public ContactMethod PreferContactMethod {
            get {
                return this.preferContactMethodField;
            }
            set {
                this.preferContactMethodField = value;
            }
        }
        
        /// <remarks/>
        public string OnlinePassword {
            get {
                return this.onlinePasswordField;
            }
            set {
                this.onlinePasswordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum PatientStatus {
        
        /// <remarks/>
        Patient,
        
        /// <remarks/>
        NonPatient,
        
        /// <remarks/>
        Inactive,
        
        /// <remarks/>
        Archived,
        
        /// <remarks/>
        Deleted,
        
        /// <remarks/>
        Deceased,
        
        /// <remarks/>
        Prospective,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum PatientGender {
        
        /// <remarks/>
        Male,
        
        /// <remarks/>
        Female,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum PatientPosition {
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        Married,
        
        /// <remarks/>
        Child,
        
        /// <remarks/>
        Widowed,
        
        /// <remarks/>
        Divorced,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://opendental.com/")]
    public enum ContactMethod {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        DoNotCall,
        
        /// <remarks/>
        HmPhone,
        
        /// <remarks/>
        WkPhone,
        
        /// <remarks/>
        WirelessPh,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        SeeNotes,
        
        /// <remarks/>
        Mail,
        
        /// <remarks/>
        TextMessage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ServiceExistsCompletedEventHandler(object sender, ServiceExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCustomerNumCompletedEventHandler(object sender, GetCustomerNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IsPaidCustomerCompletedEventHandler(object sender, IsPaidCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPaidCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPaidCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeleteObjectsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeleteAllRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchPatientsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchAppointmentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchPrescriptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchProvidersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchPharmaciesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetMobileWebUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetPracticeTitleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetPreferenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPatientPortalAddressCompletedEventHandler(object sender, GetPatientPortalAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientPortalAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientPortalAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchLabPanelsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchLabResultsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchMedicationsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchMedicationPatsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchAllergiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchAllergyDefsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchDiseasesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchDiseaseDefsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchICD9sCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchStatementsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchDocumentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SynchRecallsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeletePatientsRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591